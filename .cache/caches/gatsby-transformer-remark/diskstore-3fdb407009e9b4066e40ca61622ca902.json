{"expireTime":9007200911206585000,"key":"transformer-remark-markdown-html-ast-0bdcc15baa15c59b170f1e8a91e49015-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/string-to-integer-atoi/description/"},"children":[{"type":"text","value":"8. String to Integer (atoi)","position":{"start":{"line":3,"column":5,"offset":6},"end":{"line":3,"column":32,"offset":33}}}],"position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":100,"offset":101}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":100,"offset":101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":5,"column":5,"offset":107},"end":{"line":5,"column":13,"offset":115}}}],"position":{"start":{"line":5,"column":1,"offset":103},"end":{"line":5,"column":13,"offset":115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Implement ","position":{"start":{"line":7,"column":1,"offset":117},"end":{"line":7,"column":11,"offset":127}}},{"type":"raw","value":"<code class=\"language-text\">atoi</code>","position":{"start":{"line":7,"column":11,"offset":127},"end":{"line":7,"column":17,"offset":133}}},{"type":"text","value":" which converts a string to an integer.","position":{"start":{"line":7,"column":17,"offset":133},"end":{"line":7,"column":56,"offset":172}}}],"position":{"start":{"line":7,"column":1,"offset":117},"end":{"line":7,"column":56,"offset":172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.","position":{"start":{"line":9,"column":1,"offset":174},"end":{"line":9,"column":295,"offset":468}}}],"position":{"start":{"line":9,"column":1,"offset":174},"end":{"line":9,"column":295,"offset":468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.","position":{"start":{"line":11,"column":1,"offset":470},"end":{"line":11,"column":159,"offset":628}}}],"position":{"start":{"line":11,"column":1,"offset":470},"end":{"line":11,"column":159,"offset":628}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.","position":{"start":{"line":13,"column":1,"offset":630},"end":{"line":13,"column":219,"offset":848}}}],"position":{"start":{"line":13,"column":1,"offset":630},"end":{"line":13,"column":219,"offset":848}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If no valid conversion could be performed, a zero value is returned.","position":{"start":{"line":15,"column":1,"offset":850},"end":{"line":15,"column":69,"offset":918}}}],"position":{"start":{"line":15,"column":1,"offset":850},"end":{"line":15,"column":69,"offset":918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":17,"column":3,"offset":922},"end":{"line":17,"column":8,"offset":927}}}],"position":{"start":{"line":17,"column":1,"offset":920},"end":{"line":17,"column":10,"offset":929}}}],"position":{"start":{"line":17,"column":1,"offset":920},"end":{"line":17,"column":10,"offset":929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only the space character ","position":{"start":{"line":19,"column":1,"offset":931},"end":{"line":19,"column":26,"offset":956}}},{"type":"raw","value":"<code class=\"language-text\">' '</code>","position":{"start":{"line":19,"column":26,"offset":956},"end":{"line":19,"column":31,"offset":961}}},{"type":"text","value":" is considered as whitespace character.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: ","position":{"start":{"line":19,"column":31,"offset":961},"end":{"line":20,"column":115,"offset":1115}}},{"type":"text","value":"[−231, 231 − 1]","position":{"start":{"line":20,"column":116,"offset":1116},"end":{"line":20,"column":129,"offset":1129}}},{"type":"text","value":". If the numerical value is out of the range of representable values, INT","position":{"start":{"line":20,"column":130,"offset":1130},"end":{"line":20,"column":203,"offset":1203}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"MAX (231 − 1) or INT","position":{"start":{"line":20,"column":204,"offset":1204},"end":{"line":20,"column":224,"offset":1224}}}],"position":{"start":{"line":20,"column":203,"offset":1203},"end":{"line":20,"column":225,"offset":1225}}},{"type":"text","value":"MIN (−231) is returned.","position":{"start":{"line":20,"column":225,"offset":1225},"end":{"line":20,"column":248,"offset":1248}}}],"position":{"start":{"line":19,"column":1,"offset":931},"end":{"line":20,"column":248,"offset":1248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":22,"column":3,"offset":1252},"end":{"line":22,"column":13,"offset":1262}}}],"position":{"start":{"line":22,"column":1,"offset":1250},"end":{"line":22,"column":15,"offset":1264}}}],"position":{"start":{"line":22,"column":1,"offset":1250},"end":{"line":22,"column":15,"offset":1264}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"42\"\nOutput: 42</code></pre></div>","position":{"start":{"line":24,"column":1,"offset":1266},"end":{"line":27,"column":4,"offset":1296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":29,"column":3,"offset":1300},"end":{"line":29,"column":13,"offset":1310}}}],"position":{"start":{"line":29,"column":1,"offset":1298},"end":{"line":29,"column":15,"offset":1312}}}],"position":{"start":{"line":29,"column":1,"offset":1298},"end":{"line":29,"column":15,"offset":1312}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n             Then take as many numerical digits as possible, which gets 42.</code></pre></div>","position":{"start":{"line":31,"column":1,"offset":1314},"end":{"line":36,"column":4,"offset":1506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":38,"column":3,"offset":1510},"end":{"line":38,"column":13,"offset":1520}}}],"position":{"start":{"line":38,"column":1,"offset":1508},"end":{"line":38,"column":15,"offset":1522}}}],"position":{"start":{"line":38,"column":1,"offset":1508},"end":{"line":38,"column":15,"offset":1522}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.</code></pre></div>","position":{"start":{"line":40,"column":1,"offset":1524},"end":{"line":44,"column":4,"offset":1660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 4:","position":{"start":{"line":46,"column":3,"offset":1664},"end":{"line":46,"column":13,"offset":1674}}}],"position":{"start":{"line":46,"column":1,"offset":1662},"end":{"line":46,"column":15,"offset":1676}}}],"position":{"start":{"line":46,"column":1,"offset":1662},"end":{"line":46,"column":15,"offset":1676}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"words and 987\"\nOutput: 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical\n             digit or a +/- sign. Therefore no valid conversion could be performed.</code></pre></div>","position":{"start":{"line":48,"column":1,"offset":1678},"end":{"line":53,"column":4,"offset":1883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 5:","position":{"start":{"line":55,"column":3,"offset":1887},"end":{"line":55,"column":13,"offset":1897}}}],"position":{"start":{"line":55,"column":1,"offset":1885},"end":{"line":55,"column":15,"offset":1899}}}],"position":{"start":{"line":55,"column":1,"offset":1885},"end":{"line":55,"column":15,"offset":1899}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"-91283472332\"\nOutput: -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n             Thefore INT_MIN (−231) is returned.</code></pre></div>","position":{"start":{"line":57,"column":1,"offset":1901},"end":{"line":62,"column":4,"offset":2086}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":64,"column":5,"offset":2092},"end":{"line":64,"column":14,"offset":2101}}}],"position":{"start":{"line":64,"column":1,"offset":2088},"end":{"line":64,"column":14,"offset":2101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":66,"column":6,"offset":2108},"end":{"line":66,"column":9,"offset":2111}}}],"position":{"start":{"line":66,"column":1,"offset":2103},"end":{"line":66,"column":9,"offset":2111}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string} str\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAtoi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":68,"column":1,"offset":2113},"end":{"line":77,"column":4,"offset":2285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":79,"column":6,"offset":2292},"end":{"line":79,"column":9,"offset":2295}}}],"position":{"start":{"line":79,"column":1,"offset":2287},"end":{"line":79,"column":9,"offset":2295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Looks like ","position":{"start":{"line":81,"column":1,"offset":2297},"end":{"line":81,"column":12,"offset":2308}}},{"type":"raw","value":"<code class=\"language-text\">Number()</code>","position":{"start":{"line":81,"column":12,"offset":2308},"end":{"line":81,"column":22,"offset":2318}}},{"type":"text","value":" is faster than ","position":{"start":{"line":81,"column":22,"offset":2318},"end":{"line":81,"column":38,"offset":2334}}},{"type":"raw","value":"<code class=\"language-text\">parseInt()</code>","position":{"start":{"line":81,"column":38,"offset":2334},"end":{"line":81,"column":50,"offset":2346}}},{"type":"text","value":".","position":{"start":{"line":81,"column":50,"offset":2346},"end":{"line":81,"column":51,"offset":2347}}}],"position":{"start":{"line":81,"column":1,"offset":2297},"end":{"line":81,"column":51,"offset":2347}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string} str\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAtoi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^ *[-+]?\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":83,"column":1,"offset":2349},"end":{"line":92,"column":4,"offset":2538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":94,"column":6,"offset":2545},"end":{"line":94,"column":11,"offset":2550}}}],"position":{"start":{"line":94,"column":1,"offset":2540},"end":{"line":94,"column":11,"offset":2550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"General solution.","position":{"start":{"line":96,"column":1,"offset":2552},"end":{"line":96,"column":18,"offset":2569}}}],"position":{"start":{"line":96,"column":1,"offset":2552},"end":{"line":96,"column":18,"offset":2569}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string} str\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAtoi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> cc <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cc <span class=\"token operator\">===</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// -</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cc <span class=\"token operator\">===</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// +</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cc <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> cc <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 0-9</span>\n            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cc <span class=\"token operator\">!==</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// space</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> digit <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> digit <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> digit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">*</span> sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":98,"column":1,"offset":2571},"end":{"line":138,"column":4,"offset":3392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":140,"column":1,"offset":3394},"end":{"line":140,"column":4,"offset":3397}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"☆","position":{"start":{"line":142,"column":1,"offset":3399},"end":{"line":142,"column":2,"offset":3400}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":142,"column":3,"offset":3401},"end":{"line":142,"column":21,"offset":3419}}}],"position":{"start":{"line":142,"column":2,"offset":3400},"end":{"line":142,"column":22,"offset":3420}}},{"type":"text","value":"☆☆","position":{"start":{"line":142,"column":22,"offset":3420},"end":{"line":142,"column":24,"offset":3422}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":142,"column":25,"offset":3423},"end":{"line":142,"column":43,"offset":3441}}}],"position":{"start":{"line":142,"column":24,"offset":3422},"end":{"line":142,"column":44,"offset":3442}}},{"type":"text","value":"☆☆","position":{"start":{"line":142,"column":44,"offset":3442},"end":{"line":142,"column":46,"offset":3444}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":142,"column":47,"offset":3445},"end":{"line":142,"column":65,"offset":3463}}}],"position":{"start":{"line":142,"column":46,"offset":3444},"end":{"line":142,"column":66,"offset":3464}}},{"type":"text","value":"☆","position":{"start":{"line":142,"column":66,"offset":3464},"end":{"line":142,"column":67,"offset":3465}}}],"position":{"start":{"line":142,"column":1,"offset":3399},"end":{"line":142,"column":67,"offset":3465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":144,"column":1,"offset":3467},"end":{"line":144,"column":4,"offset":3470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":146,"column":1,"offset":3472},"end":{"line":146,"column":4,"offset":3475}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"☆","position":{"start":{"line":148,"column":1,"offset":3477},"end":{"line":148,"column":2,"offset":3478}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":148,"column":3,"offset":3479},"end":{"line":148,"column":21,"offset":3497}}}],"position":{"start":{"line":148,"column":2,"offset":3478},"end":{"line":148,"column":22,"offset":3498}}},{"type":"text","value":"☆☆","position":{"start":{"line":148,"column":22,"offset":3498},"end":{"line":148,"column":24,"offset":3500}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":148,"column":25,"offset":3501},"end":{"line":148,"column":43,"offset":3519}}}],"position":{"start":{"line":148,"column":24,"offset":3500},"end":{"line":148,"column":44,"offset":3520}}},{"type":"text","value":"☆","position":{"start":{"line":148,"column":44,"offset":3520},"end":{"line":148,"column":45,"offset":3521}}}],"position":{"start":{"line":148,"column":1,"offset":3477},"end":{"line":148,"column":45,"offset":3521}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":150,"column":1,"offset":3523},"end":{"line":150,"column":4,"offset":3526}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":151,"column":1,"offset":3527}}}}