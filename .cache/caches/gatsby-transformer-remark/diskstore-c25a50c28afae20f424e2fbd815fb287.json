{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-cf659d3d4c9d4274cb1b702125a10e4a-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/description/\">33. Search in Rotated Sorted Array</a></h2>\n<h3>Problem:</h3>\n<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., <code class=\"language-text\">[0,1,2,4,5,6,7]</code> might become <code class=\"language-text\">[4,5,6,7,0,1,2]</code>).</p>\n<p>You are given a target value to search. If found in the array return its index, otherwise return <code class=\"language-text\">-1</code>.</p>\n<p>You may assume no duplicate exists in the array.</p>\n<p>Your algorithm's runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4</code></pre></div>\n<p><strong>Example 2:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1</code></pre></div>\n<h3>Solution:</h3>\n<p>Obviously the problem requires binary search.</p>\n<p>The core idea of binary search is to pick the middle item and then decide to keep which half.</p>\n<p>The precondition of it is the array must be sorted.</p>\n<p>But take a closer look and we realize that only one of the two halves needs to be sorted. This is sufficient for us to know if the target is in that half. If not, then it must be in the other.</p>\n<p>Whenever we choose a pivot, it must be in one of the two sorted parts of the rotated array.</p>\n<ul>\n<li>If the pivot is in the left part. We know that the begin of the left part to the pivot are sorted.</li>\n<li>Otherwise the pivot is in the right part. We know that the end of the right part to the pivot are sorted.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pivot <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pivot <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// right half is sorted</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> pivot <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// target is inside the right half</span>\n                s <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                e <span class=\"token operator\">=</span> p <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// left half is sorted</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> pivot <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// target is inside the left half</span>\n                e <span class=\"token operator\">=</span> p <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                s <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}