{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-713c5300a23939facbd237c850e58efd-gatsby-remark-prismjs-","val":"<p>Variables are declared with the <code class=\"language-text\">var</code> keyword. JavaScript is\n<em>dynamically typed</em> so every variable can hold a value of any data type.</p>\n<p>Variables can be declared without an initial value.</p>\n<p>Some example declarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span>\n    z<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Variables that don't explicitly get assigned an initial value have the value\n<code class=\"language-text\">undefined</code>.</p>\n<div class=\"callout secondary\">\n<i class=\"fa fa-info-circle\" aria-hidden=\"true\">\n</i> **ES2015**\n<p>Since ES2015, <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> can be used in addition to <code class=\"language-text\">var</code>. We will learn\nhow they differ from <code class=\"language-text\">var</code> later. For now, lets have a look how <code class=\"language-text\">const</code> differs\nfrom <code class=\"language-text\">var</code> or <code class=\"language-text\">let</code>: <code class=\"language-text\">const</code> can be assigned a value only <em>once</em> (<em>const</em>ant).<br>\nReassigning a value will either throw an error (in strict mode, see below) or\nis silently ignored:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error or ignored</span></code></pre></div>\n<p><code class=\"language-text\">const</code>s <em>must</em> be initialized with a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<hr>\n<h2>Variable names</h2>\n<p>Valid characters for variable names include <a href=\"http://mathiasbynens.be/notes/javascript-identifiers\">a wide range of <em>unicode\ncharacters</em></a>.\nHowever, the name <em>must</em> start with a letter, <code class=\"language-text\">_</code> or <code class=\"language-text\">$</code>. Not doing so will\nresult in a syntax error.</p>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> π <span class=\"token operator\">=</span> <span class=\"token number\">3.141</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _foo <span class=\"token operator\">=</span> π<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> 0_bar <span class=\"token operator\">=</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Syntax error</span></code></pre></div>\n<hr>\n<h2>Variable access</h2>\n<p>Trying to <em>read</em> an <em>undeclared variable</em> results in a runtime error:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: bar is not defined.</span></code></pre></div>\n<p>However, <em>writing</em> to an undeclared variable is valid by default. It will\ncreate an <em>implicit global variable</em> and should thus be avoided:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no error</span></code></pre></div>\n<div class=\"callout primary\">\n<p>If code runs in <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">strict mode</a></em>, assigning to an undeclared variable throws\nan <em>error</em>.</p>\n</div>\n<div class=\"callout primary\">\n<h3>Strict mode</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict mode</a> is a mode of evaluating JavaScript that enforces stricter\nrules. It was introduced to \"deprecate\" certain patterns/behaviors that are\nconsidered bad or confusing.</p>\n<p>Strict mode can be enabled for a JavaScript or a function by putting</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>at the beginning of it.</p>\n</div>\n<p>JavaScript has <em>6</em> data types. Five of those are so called <em>primitive</em> data\ntypes:</p>\n<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n<p>Everything else that is not a value of one of the above types is an</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>As we will see in the following slides, objects belong to different kinds of\n\"classes\" of objects.</p>\n<div class=\"callout secondary\">\n<i class=\"fa fa-info-circle\" aria-hidden=\"true\">\n</i> **ES2015**\n<p>ES2015 introduces a 6th primitive data type: <em>[Symbol][]</em>. Symbols are <em>unique</em>\nand <em>immutable</em> values.</p>\n</div>"}