{"expireTime":9007200911206588000,"key":"transformer-remark-markdown-html-c5932781de3e73052fbcdc844f5524ef-gatsby-remark-prismjs-","val":"<h1>Specificity</h1>\n<p><strong>Specificity</strong> is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is based on the matching rules which are composed of different sorts of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#selectors\">CSS selectors</a>.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#how_is_specificity_calculated\" title=\"Permalink to How is specificity calculated?\">How is specificity calculated?</a></h2>\n<p>Specificity is a weight that is applied to a given CSS declaration, determined by the number of each <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#selector_types\">selector type</a> in the matching selector. When multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. Specificity only applies when the same element is targeted by multiple declarations. As per CSS rules, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#directly_targeted_elements_vs._inherited_styles\">directly targeted elements</a> will always take precedence over rules which an element inherits from its ancestor.</p>\n<p><strong>Note:</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#tree_proximity_ignorance\">Proximity of elements</a> in the document tree has no effect on the specificity.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#selector_types\" title=\"Permalink to Selector Types\">Selector Types</a></h3>\n<p>The following list of selector types increases by specificity:</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">Type selectors</a> (e.g., <code class=\"language-text\">h1</code>) and pseudo-elements (e.g., <code class=\"language-text\">::before</code>).</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\">Class selectors</a> (e.g., <code class=\"language-text\">.example</code>), attributes selectors (e.g., <code class=\"language-text\">[type=\"radio\"]</code>) and pseudo-classes (e.g., <code class=\"language-text\">:hover</code>).</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\">ID selectors</a> (e.g., <code class=\"language-text\">#example</code>).</li>\n</ol>\n<p>Universal selector (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors\"><code class=\"language-text\">*</code></a>), combinators (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator\"><code class=\"language-text\">+</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator\"><code class=\"language-text\">></code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator\"><code class=\"language-text\">~</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator\">\" \"</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Column_combinator\"><code class=\"language-text\">||</code></a>) and negation pseudo-class (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:not\"><code class=\"language-text\">:not()</code></a>) have no effect on specificity. (The selectors declared <em>inside</em> <code class=\"language-text\">:not()</code> do, however.)</p>\n<p>For more information, visit: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance#specificity_2\">\"Specificity\" in \"Cascade and inheritance\"</a>, you can also visit: <a href=\"https://specifishity.com\">https://specifishity.com</a></p>\n<p>Inline styles added to an element (e.g., <code class=\"language-text\">style=\"font-weight: bold;\"</code>) always overwrite any styles in external stylesheets, and thus can be thought of as having the highest specificity.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#the_!important_exception\" title=\"Permalink to The !important exception\">The !important exception</a></h3>\n<p>When an <code class=\"language-text\">important</code> rule is used on a style declaration, this declaration overrides any other declarations. Although technically <code class=\"language-text\">!important</code> has nothing to do with specificity, it interacts directly with it. Using <code class=\"language-text\">!important,</code> however, is <strong>bad practice</strong> and should be avoided because it makes debugging more difficult by breaking the natural <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade\">cascading</a> in your stylesheets. When two conflicting declarations with the <code class=\"language-text\">!important</code> rule are applied to the same element, the declaration with a greater specificity will be applied.</p>\n<p><strong>Recommended guidelines:</strong></p>\n<ul>\n<li><strong>Always</strong> look for a way to use specificity before even considering <code class=\"language-text\">!important</code></li>\n<li><strong>Only</strong> use <code class=\"language-text\">!important</code> on page-specific CSS that overrides foreign CSS (from external libraries, like Bootstrap or normalize.css).</li>\n<li><strong>Never</strong> use <code class=\"language-text\">!important</code> when you're writing a plugin/mashup.</li>\n<li><strong>Never</strong> use <code class=\"language-text\">!important</code> on site-wide CSS.</li>\n</ul>\n<p><strong>Instead of using <code class=\"language-text\">!important</code>, consider:</strong></p>\n<ol>\n<li>Make better use of the CSS cascade</li>\n<li>Use more specific rules. By indicating one or more elements before the element you're selecting, the rule becomes more specific and gets higher priority:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   &lt;div id=\"test\">\n     &lt;span>Text&lt;/span>\n   &lt;/div></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Copy to Clipboard</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   div#test span { color: green; }\n   div span { color: blue; }\n   span { color: red; }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Copy to Clipboard\n\nNo matter the order, text will be green because that rule is most specific. (Also, the rule for blue overwrites the rule for red, notwithstanding the order of the rules)</code></pre></div>\n<ol start=\"3\">\n<li>As a nonsense special case for (2), duplicate simple selectors to increase specificity when you have nothing more to specify.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   #myId#myId span { color: yellow; }\n   .myClass.myClass span { color: orange; }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Copy to Clipboard</code></pre></div>\n<h4>How !important can be used:</h4>\n<h5>A) Overriding inline styles</h5>\n<p>Your global CSS file that sets visual aspects of your site globally may be overwritten by inline styles defined directly on individual elements. Both inline styles and !important are considered bad practice, but sometimes you need the latter to override the former.</p>\n<p>In this case, you could set certain styles in your global CSS file as !important, thus overriding inline styles set directly on elements.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=\"foo\" style=\"color: red;\">What color am I?&lt;/div></code></pre></div>\n<p>Copy to Clipboard</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.foo[style*=\"color: red\"] {\n  color: firebrick !important;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>Many JavaScript frameworks and libraries add inline styles. Using <code class=\"language-text\">!important</code> with a very targeted selector is one way to override these inline styles.</p>\n<h5>B) Overriding high specificity</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#someElement p {\n  color: blue;\n}\n\np.awesome {\n  color: red;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>How do you make <code class=\"language-text\">awesome</code> paragraphs always turn red, even ones inside <code class=\"language-text\">#someElement</code>? Without <code class=\"language-text\">!important</code>, the first rule will have more specificity and will win over the second rule.</p>\n<h4>How to override <code class=\"language-text\">!important</code></h4>\n<p>A) Add another CSS rule with <code class=\"language-text\">!important</code>, and either give the selector a higher specificity (adding a tag, id or class to the selector), or add a CSS rule with the same selector at a later point than the existing one. This works because in a specificity tie, the last rule defined wins.</p>\n<p>Some examples with a higher specificity:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">table td    { height: 50px !important; }\n.myTable td { height: 50px !important; }\n#myTable td { height: 50px !important; }</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>B) Or add the same selector after the existing one:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">td { height: 50px !important; }</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>C) Or, preferably, rewrite the original rule to avoid the use of <code class=\"language-text\">!important</code> altogether.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[id=\"someElement\"] p {\n  color: blue;\n}\n\np.awesome {\n  color: red;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>Including an id as part of an attribute selector instead of as an id selector gives it the same specificity as a class. Both selectors above now have the same weight. In a specificity tie, the last rule defined wins.</p>\n<h4>For more information, visit:</h4>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/3706819/what-are-the-implications-of-using-important-in-css\">https://stackoverflow.com/questions/3706819/what-are-the-implications-of-using-important-in-css</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9245353/what-does-important-in-css-mean\">https://stackoverflow.com/questions/9245353/what-does-important-in-css-mean</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5701149/when-to-use-important-property-in-css\">https://stackoverflow.com/questions/5701149/when-to-use-important-property-in-css</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11178673/how-to-override-important\">https://stackoverflow.com/questions/11178673/how-to-override-important</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2042497/when-to-use-important-to-save-the-day-when-working-with-css\">https://stackoverflow.com/questions/2042497/when-to-use-important-to-save-the-day-when-working-with-css</a></li>\n</ul>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#the_is_and_not_exceptions\" title=\"Permalink to The :is() and :not() exceptions\">The :is() and :not() exceptions</a></h3>\n<p>The matches-any pseudo-class <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:is\"><code class=\"language-text\">:is()</code></a> Experimental and the negation pseudo-class <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:not\"><code class=\"language-text\">:not()</code></a> are <em>not</em> considered a pseudo-class in the specificity calculation. But selectors placed into the pseudo-class count as normal selectors when determining the count of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#selector_types\">selector types</a>.</p>\n<p>This chunk of CSS ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">div.outer p {\n  color: orange;\n}\n\ndiv:not(.outer) p {\n  color: blueviolet;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... when used with the following HTML ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=\"outer\">\n  &lt;p>This is in the outer div.&lt;/p>\n  &lt;div class=\"inner\">\n    &lt;p>This text is in the inner div.&lt;/p>\n  &lt;/div>\n&lt;/div></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... appears on the screen like this:</p>\n<iframe class=\"sample-code-frame\" title=\"The is and not exceptions sample\" id=\"frame_the_is_and_not_exceptions\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/CSS/Specificity/_sample_.the_is_and_not_exceptions.html\" loading=\"lazy\">\n</iframe>\n<br>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#the_where_exception\" title=\"Permalink to The :where() exception\">The :where() exception</a></h3>\n<p>The specificity-adjustment pseudo-class <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:where\"><code class=\"language-text\">:where()</code></a> Experimental always has its specificity replaced with zero.</p>\n<p>This chunk of CSS ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">div:where(.outer) p {\n  color: orange;\n}\n\ndiv p {\n  color: blueviolet;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#no-where-support {\n  margin: 0.5em;\n  border: 1px solid red;\n}\n\n#no-where-support:where(*) {\n  display: none !important;\n}</code></pre></div>\n<p>... when used with the following HTML ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"no-where-support\">\n⚠️ Your browser doesn't support the &lt;code>\n&lt;a href=\"https://developer.mozilla.org/docs/Web/CSS/:where\" target=\"_top\">:where()&lt;/a>\n&lt;/code> pseudo-class.\n&lt;/div></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=\"outer\">\n  &lt;p>This is in the outer div.&lt;/p>\n  &lt;div class=\"inner\">\n    &lt;p>This text is in the inner div.&lt;/p>\n  &lt;/div>\n&lt;/div></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... appears on the screen like this:</p>\n<iframe class=\"sample-code-frame\" title=\"The where exception sample\" id=\"frame_the_where_exception\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/CSS/Specificity/_sample_.the_where_exception.html\" loading=\"lazy\">\n</iframe>\n<br>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#form-based_specificity\" title=\"Permalink to Form-based specificity\">Form-based specificity</a></h3>\n<p>Specificity is based on the form of a selector. In the following case, the selector <code class=\"language-text\">*[id=\"foo\"]</code> counts as an attribute selector for the purpose of determining the selector's specificity, even though it selects an ID.</p>\n<p>The following CSS styles ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">*#foo {\n  color: green;\n}\n\n*[id=\"foo\"] {\n  color: purple;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... when used with this markup ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p id=\"foo\">I am a sample text.&lt;/p></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... end up looking like this:</p>\n<iframe class=\"sample-code-frame\" title=\"Form-based specificity sample\" id=\"frame_form-based_specificity\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/CSS/Specificity/_sample_.form-based_specificity.html\" loading=\"lazy\">\n</iframe>\n<br>\n<p>This is because it matches the same element but the ID selector has a higher specificity.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#tree_proximity_ignorance\" title=\"Permalink to Tree proximity ignorance\">Tree proximity ignorance</a></h3>\n<p>The proximity of an element to other elements that are referenced in a given selector has no impact on specificity. The following style declaration ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">body h1 {\n  color: green;\n}\n\nhtml h1 {\n  color: purple;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... with the following HTML ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html>\n  &lt;body>\n    &lt;h1>Here is a title!&lt;/h1>\n  &lt;/body>\n&lt;/html></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... will render as:</p>\n<iframe class=\"sample-code-frame\" title=\"Tree proximity ignorance sample\" id=\"frame_tree_proximity_ignorance\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/CSS/Specificity/_sample_.tree_proximity_ignorance.html\" loading=\"lazy\">\n</iframe>\n<br>\n<p>This is because the two declarations have equal <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#selector_types\">selector type</a> counts, but the <code class=\"language-text\">html h1</code> selector is declared last.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#directly_targeted_elements_vs._inherited_styles\" title=\"Permalink to Directly targeted elements vs. inherited styles\">Directly targeted elements vs. inherited styles</a></h3>\n<p>Styles for a directly targeted element will always take precedence over inherited styles, regardless of the specificity of the inherited rule. This CSS ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#parent {\n  color: green;\n}\n\nh1 {\n  color: purple;\n}</code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... with the following HTML ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html>\n  &lt;body id=\"parent\">\n    &lt;h1>Here is a title!&lt;/h1>\n  &lt;/body>\n&lt;/html></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>... will also render as:</p>\n<iframe class=\"sample-code-frame\" title=\"Directly targeted elements vs. inherited styles sample\" id=\"frame_directly_targeted_elements_vs._inherited_styles\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/CSS/Specificity/_sample_.directly_targeted_elements_vs._inherited_styles.html\" loading=\"lazy\">\n</iframe>\n<br>\n<p>This is because the <code class=\"language-text\">h1</code> selector targets the element specifically, but the green selector is only inherited from its parent.</p>"}