{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-4f866190f3116184fc140fcc8f032f26-gatsby-remark-prismjs-","val":"<p>A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render() {\n  return (\n    &lt;React.Fragment>\n      &lt;ChildA />\n      &lt;ChildB />\n      &lt;ChildC />\n    &lt;/React.Fragment>\n  );\n}</code></pre></div>\n<p>There is also a new <a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">short syntax</a> for declaring them.</p>\n<h2><a href=\"https://reactjs.org/docs/fragments.html#motivation\"></a>Motivation</h2>\n<p>A common pattern is for a component to return a list of children. Take this example React snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Table extends React.Component {\n  render() {\n    return (\n      &lt;table>\n        &lt;tr>\n          &lt;Columns />\n        &lt;/tr>\n      &lt;/table>\n    );\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">&lt;Columns /></code> would need to return multiple <code class=\"language-text\">&lt;td></code> elements in order for the rendered HTML to be valid. If a parent div was used inside the <code class=\"language-text\">render()</code> of <code class=\"language-text\">&lt;Columns /></code>, then the resulting HTML will be invalid.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Columns extends React.Component {\n  render() {\n    return (\n      &lt;div>\n        &lt;td>Hello&lt;/td>\n        &lt;td>World&lt;/td>\n      &lt;/div>\n    );\n  }\n}</code></pre></div>\n<p>results in a <code class=\"language-text\">&lt;Table /></code> output of:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;table>\n  &lt;tr>\n    &lt;div>\n      &lt;td>Hello&lt;/td>\n      &lt;td>World&lt;/td>\n    &lt;/div>\n  &lt;/tr>\n&lt;/table></code></pre></div>\n<p>Fragments solve this problem.</p>\n<h2><a href=\"https://reactjs.org/docs/fragments.html#usage\"></a>Usage</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Columns extends React.Component {\n  render() {\n    return (\n      &lt;React.Fragment>        &lt;td>Hello&lt;/td>\n        &lt;td>World&lt;/td>\n      &lt;/React.Fragment>    );\n  }\n}</code></pre></div>\n<p>which results in a correct <code class=\"language-text\">&lt;Table /></code> output of:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;table>\n  &lt;tr>\n    &lt;td>Hello&lt;/td>\n    &lt;td>World&lt;/td>\n  &lt;/tr>\n&lt;/table></code></pre></div>\n<h3><a href=\"https://reactjs.org/docs/fragments.html#short-syntax\"></a>Short Syntax</h3>\n<p>There is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Columns extends React.Component {\n  render() {\n    return (\n      &lt;>        &lt;td>Hello&lt;/td>\n        &lt;td>World&lt;/td>\n      &lt;/>    );\n  }\n}</code></pre></div>\n<p>You can use <code class=\"language-text\">&lt;>&lt;/></code> the same way you’d use any other element except that it doesn’t support keys or attributes.</p>\n<h3><a href=\"https://reactjs.org/docs/fragments.html#keyed-fragments\"></a>Keyed Fragments</h3>\n<p>Fragments declared with the explicit <code class=\"language-text\">&lt;React.Fragment></code> syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Glossary(props) {\n  return (\n    &lt;dl>\n      {props.items.map(item => (\n        // Without the `key`, React will fire a key warning\n        &lt;React.Fragment key={item.id}>\n          &lt;dt>{item.term}&lt;/dt>\n          &lt;dd>{item.description}&lt;/dd>\n        &lt;/React.Fragment>\n      ))}\n    &lt;/dl>\n  );\n}</code></pre></div>\n<p><code class=\"language-text\">key</code> is the only attribute that can be passed to <code class=\"language-text\">Fragment</code>. In the future, we may add support for additional attributes, such as event handlers.</p>\n<iframe height=\"800\" style=\"width: 100%;\" scrolling=\"no\" title=\"Example: Fragments\" src=\"https://codepen.io/bgoonz/embed/VwQQWyV?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n</iframe>"}