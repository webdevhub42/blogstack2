{"expireTime":9007200911206581000,"key":"transformer-remark-markdown-html-ast-b9850db4b0f32dfd0d07f8c7f0f9ced8-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"raw","value":"<h2 align=\"center\">JavaScript challenges on Asynchronous programming</h2>","position":{"start":{"line":6,"column":1,"offset":5},"end":{"line":6,"column":74,"offset":78}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":8,"column":1,"offset":80},"end":{"line":8,"column":5,"offset":84}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print \"Hello, world\" with a delay of 3 seconds","position":{"start":{"line":10,"column":5,"offset":90},"end":{"line":10,"column":54,"offset":139}}}],"position":{"start":{"line":10,"column":1,"offset":86},"end":{"line":10,"column":54,"offset":139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"setTimeout takes a function as the 1st argument and optional timeout delay & list of values as the function parameters","position":{"start":{"line":12,"column":3,"offset":143},"end":{"line":12,"column":121,"offset":261}}}],"position":{"start":{"line":12,"column":1,"offset":141},"end":{"line":12,"column":121,"offset":261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"setTimeout returns an id (number) which can be used to stop the setTimeout using clearTimeout function","position":{"start":{"line":13,"column":3,"offset":264},"end":{"line":13,"column":105,"offset":366}}}],"position":{"start":{"line":13,"column":1,"offset":262},"end":{"line":13,"column":105,"offset":366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":141},"end":{"line":13,"column":105,"offset":366}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":15,"column":1,"offset":368},"end":{"line":19,"column":4,"offset":455}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":21,"column":1,"offset":457},"end":{"line":23,"column":4,"offset":519}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":25,"column":1,"offset":521},"end":{"line":27,"column":4,"offset":577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":29,"column":8,"offset":586},"end":{"line":29,"column":13,"offset":591}}}],"position":{"start":{"line":29,"column":1,"offset":579},"end":{"line":29,"column":13,"offset":591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Zero or more values that represent any parameters you want to pass to the function when it is run.","position":{"start":{"line":30,"column":1,"offset":592},"end":{"line":30,"column":99,"offset":690}}}],"position":{"start":{"line":30,"column":1,"offset":592},"end":{"line":30,"column":99,"offset":690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":32,"column":8,"offset":699},"end":{"line":32,"column":18,"offset":709}}}],"position":{"start":{"line":32,"column":1,"offset":692},"end":{"line":32,"column":18,"offset":709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals"},"children":[{"type":"text","value":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals","position":{"start":{"line":34,"column":4,"offset":714},"end":{"line":34,"column":97,"offset":807}}}],"position":{"start":{"line":34,"column":3,"offset":713},"end":{"line":34,"column":98,"offset":808}}}],"position":{"start":{"line":34,"column":1,"offset":711},"end":{"line":34,"column":98,"offset":808}}},{"type":"text","value":"\n"}],"position":{"start":{"line":34,"column":1,"offset":711},"end":{"line":34,"column":98,"offset":808}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":36,"column":1,"offset":810},"end":{"line":36,"column":7,"offset":816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Create a function which receives a function as argument and executes it after 2 seconds","position":{"start":{"line":38,"column":5,"offset":822},"end":{"line":38,"column":95,"offset":912}}}],"position":{"start":{"line":38,"column":1,"offset":818},"end":{"line":38,"column":95,"offset":912}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callbackExec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Callback is executed after 2 seconds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">displayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">callbackExec</span><span class=\"token punctuation\">(</span>displayHello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":40,"column":1,"offset":914},"end":{"line":55,"column":4,"offset":1211}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":57,"column":1,"offset":1213},"end":{"line":57,"column":7,"offset":1219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 1 to 10 with delay of 1 second between each value being printed","position":{"start":{"line":59,"column":5,"offset":1225},"end":{"line":59,"column":90,"offset":1310}}}],"position":{"start":{"line":59,"column":1,"offset":1221},"end":{"line":59,"column":90,"offset":1310}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":1312},"end":{"line":66,"column":4,"offset":1435}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token keyword\">function</span> <span class=\"token function\">displayWithDelay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>displayWithDelay<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":68,"column":1,"offset":1437},"end":{"line":75,"column":4,"offset":1598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":77,"column":8,"offset":1607},"end":{"line":77,"column":13,"offset":1612}}}],"position":{"start":{"line":77,"column":1,"offset":1600},"end":{"line":77,"column":13,"offset":1612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the 2nd solution, recursive setTimeout is used.","position":{"start":{"line":78,"column":1,"offset":1613},"end":{"line":78,"column":51,"offset":1663}}}],"position":{"start":{"line":78,"column":1,"offset":1613},"end":{"line":78,"column":51,"offset":1663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":80,"column":8,"offset":1672},"end":{"line":80,"column":18,"offset":1682}}}],"position":{"start":{"line":80,"column":1,"offset":1665},"end":{"line":80,"column":18,"offset":1682}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://javascript.info/settimeout-setinterval"},"children":[{"type":"text","value":"https://javascript.info/settimeout-setinterval","position":{"start":{"line":82,"column":4,"offset":1687},"end":{"line":82,"column":50,"offset":1733}}}],"position":{"start":{"line":82,"column":3,"offset":1686},"end":{"line":82,"column":51,"offset":1734}}}],"position":{"start":{"line":82,"column":1,"offset":1684},"end":{"line":82,"column":51,"offset":1734}}},{"type":"text","value":"\n"}],"position":{"start":{"line":82,"column":1,"offset":1684},"end":{"line":82,"column":51,"offset":1734}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":84,"column":1,"offset":1736},"end":{"line":84,"column":7,"offset":1742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 1 to 10 with delay of 1 second between each value being printed using setInterval","position":{"start":{"line":86,"column":5,"offset":1748},"end":{"line":86,"column":108,"offset":1851}}}],"position":{"start":{"line":86,"column":1,"offset":1744},"end":{"line":86,"column":108,"offset":1851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":88,"column":3,"offset":1855},"end":{"line":88,"column":16,"offset":1868}}},{"type":"text","value":" function repeats a block of code at every given timing event","position":{"start":{"line":88,"column":16,"offset":1868},"end":{"line":88,"column":77,"offset":1929}}}],"position":{"start":{"line":88,"column":1,"offset":1853},"end":{"line":88,"column":77,"offset":1929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">clearInterval</code>","position":{"start":{"line":89,"column":3,"offset":1932},"end":{"line":89,"column":18,"offset":1947}}},{"type":"text","value":" is used to stop the setInterval execution","position":{"start":{"line":89,"column":18,"offset":1947},"end":{"line":89,"column":60,"offset":1989}}}],"position":{"start":{"line":89,"column":1,"offset":1930},"end":{"line":89,"column":60,"offset":1989}}},{"type":"text","value":"\n"}],"position":{"start":{"line":88,"column":1,"offset":1853},"end":{"line":89,"column":60,"offset":1989}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> num2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":91,"column":1,"offset":1991},"end":{"line":99,"column":4,"offset":2171}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":101,"column":1,"offset":2173},"end":{"line":101,"column":7,"offset":2179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 10 to 1 with delay of 1 second between each value being printed using setTimeout using pre ES6 features only","position":{"start":{"line":103,"column":5,"offset":2185},"end":{"line":103,"column":135,"offset":2315}}}],"position":{"start":{"line":103,"column":1,"offset":2181},"end":{"line":103,"column":135,"offset":2315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We can use 3rd parameter of setTimeout to pass the value of iteration which creates a new scope each time loop iterates","position":{"start":{"line":105,"column":3,"offset":2319},"end":{"line":105,"column":122,"offset":2438}}}],"position":{"start":{"line":105,"column":1,"offset":2317},"end":{"line":105,"column":122,"offset":2438}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We can also use an inner function scope (IIFE) within the for loop for each iteration","position":{"start":{"line":106,"column":3,"offset":2441},"end":{"line":106,"column":88,"offset":2526}}}],"position":{"start":{"line":106,"column":1,"offset":2439},"end":{"line":106,"column":88,"offset":2526}}},{"type":"text","value":"\n"}],"position":{"start":{"line":105,"column":1,"offset":2317},"end":{"line":106,"column":88,"offset":2526}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":2528},"end":{"line":113,"column":4,"offset":2652}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":115,"column":1,"offset":2654},"end":{"line":122,"column":4,"offset":2819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":124,"column":8,"offset":2828},"end":{"line":124,"column":18,"offset":2838}}}],"position":{"start":{"line":124,"column":1,"offset":2821},"end":{"line":124,"column":18,"offset":2838}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch5.md"},"children":[{"type":"text","value":"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch5.md","position":{"start":{"line":126,"column":4,"offset":2843},"end":{"line":126,"column":88,"offset":2927}}}],"position":{"start":{"line":126,"column":3,"offset":2842},"end":{"line":126,"column":89,"offset":2928}}}],"position":{"start":{"line":126,"column":1,"offset":2840},"end":{"line":126,"column":89,"offset":2928}}},{"type":"text","value":"\n"}],"position":{"start":{"line":126,"column":1,"offset":2840},"end":{"line":126,"column":89,"offset":2928}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":128,"column":1,"offset":2930},"end":{"line":128,"column":7,"offset":2936}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Write a utility which prints numbers starting from an initial value and increment in steps which can be started and stopped by the user, any number of times","position":{"start":{"line":130,"column":5,"offset":2942},"end":{"line":130,"column":164,"offset":3101}}}],"position":{"start":{"line":130,"column":1,"offset":2938},"end":{"line":130,"column":164,"offset":3101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The functionality to start and stop can be exposed from a function which internally takes care of incrementing and displaying data","position":{"start":{"line":132,"column":3,"offset":3105},"end":{"line":132,"column":133,"offset":3235}}}],"position":{"start":{"line":132,"column":1,"offset":3103},"end":{"line":132,"column":133,"offset":3235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":133,"column":3,"offset":3238},"end":{"line":133,"column":16,"offset":3251}}},{"type":"text","value":" can be used to achieve the task and handle the start & stop of data display","position":{"start":{"line":133,"column":16,"offset":3251},"end":{"line":133,"column":92,"offset":3327}}}],"position":{"start":{"line":133,"column":1,"offset":3236},"end":{"line":133,"column":92,"offset":3327}}},{"type":"text","value":"\n"}],"position":{"start":{"line":132,"column":1,"offset":3103},"end":{"line":133,"column":92,"offset":3327}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">init <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> intervalId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">stopTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        intervalId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        startTimer<span class=\"token punctuation\">,</span>\n        stopTimer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> timerObj <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimerObj<span class=\"token punctuation\">.</span><span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    timerObj<span class=\"token punctuation\">.</span><span class=\"token function\">stopTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":135,"column":1,"offset":3329},"end":{"line":166,"column":4,"offset":3907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":168,"column":8,"offset":3916},"end":{"line":168,"column":13,"offset":3921}}}],"position":{"start":{"line":168,"column":1,"offset":3909},"end":{"line":168,"column":13,"offset":3921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The function can also be modified to have completion after which timer can not be started","position":{"start":{"line":169,"column":1,"offset":3922},"end":{"line":169,"column":90,"offset":4011}}}],"position":{"start":{"line":169,"column":1,"offset":3922},"end":{"line":169,"column":90,"offset":4011}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":171,"column":1,"offset":4013},"end":{"line":171,"column":7,"offset":4019}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions one after the other in sequence using callbacks","position":{"start":{"line":173,"column":5,"offset":4025},"end":{"line":173,"column":98,"offset":4118}}}],"position":{"start":{"line":173,"column":1,"offset":4021},"end":{"line":173,"column":98,"offset":4118}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The asynchronous function can be simulated using setTimeout which executes the callback","position":{"start":{"line":175,"column":3,"offset":4122},"end":{"line":175,"column":90,"offset":4209}}}],"position":{"start":{"line":175,"column":1,"offset":4120},"end":{"line":175,"column":90,"offset":4209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The array of functions execution can be managed by having a function which takes care of execution of all the async functions","position":{"start":{"line":176,"column":3,"offset":4212},"end":{"line":176,"column":128,"offset":4337}}}],"position":{"start":{"line":176,"column":1,"offset":4210},"end":{"line":176,"column":128,"offset":4337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Asynchronous functions need not be aware of the function to be executed and will take a callback as argument and execute it after completion","position":{"start":{"line":177,"column":3,"offset":4340},"end":{"line":177,"column":143,"offset":4480}}}],"position":{"start":{"line":177,"column":1,"offset":4338},"end":{"line":177,"column":143,"offset":4480}}},{"type":"text","value":"\n"}],"position":{"start":{"line":175,"column":1,"offset":4120},"end":{"line":177,"column":143,"offset":4480}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callbackManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFuncs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">nextFuncExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> nextAsyncFunc <span class=\"token operator\">=</span> asyncFuncs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextAsyncFunc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> nextAsyncFunc <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">nextAsyncFunc</span><span class=\"token punctuation\">(</span>nextFuncExecutor<span class=\"token punctuation\">,</span> asyncFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">nextFuncExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token function\">callbackManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":179,"column":1,"offset":4482},"end":{"line":216,"column":4,"offset":5380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":218,"column":8,"offset":5389},"end":{"line":218,"column":13,"offset":5394}}}],"position":{"start":{"line":218,"column":1,"offset":5382},"end":{"line":218,"column":13,"offset":5394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"3 asynchrounous functions are considered here, but the program should work for any number","position":{"start":{"line":219,"column":1,"offset":5395},"end":{"line":219,"column":90,"offset":5484}}}],"position":{"start":{"line":219,"column":1,"offset":5395},"end":{"line":219,"column":90,"offset":5484}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":221,"column":1,"offset":5486},"end":{"line":221,"column":7,"offset":5492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute the given list of asynchronous functions in parallel and return the results as an array to the callback","position":{"start":{"line":223,"column":5,"offset":5498},"end":{"line":223,"column":119,"offset":5612}}}],"position":{"start":{"line":223,"column":1,"offset":5494},"end":{"line":223,"column":119,"offset":5612}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Example</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncParallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                            <span class=\"token comment\">// 1, 2, 3 (prints results of each asynchronous function in order)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":225,"column":1,"offset":5614},"end":{"line":248,"column":4,"offset":6116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The async functions can be executed in parallel using the loop and can be tracked for completion with a counter","position":{"start":{"line":250,"column":3,"offset":6120},"end":{"line":250,"column":114,"offset":6231}}}],"position":{"start":{"line":250,"column":1,"offset":6118},"end":{"line":250,"column":114,"offset":6231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The callback function can be sent to the async functions and the results will be stored in the array which will be returned after the completion of all","position":{"start":{"line":251,"column":3,"offset":6234},"end":{"line":251,"column":154,"offset":6385}}}],"position":{"start":{"line":251,"column":1,"offset":6232},"end":{"line":251,"column":154,"offset":6385}}},{"type":"text","value":"\n"}],"position":{"start":{"line":250,"column":1,"offset":6118},"end":{"line":251,"column":154,"offset":6385}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncParallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFuncArr<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resultArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>asyncFuncArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resultCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    asyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">async<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            resultArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            resultCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultCounter <span class=\"token operator\">>=</span> asyncFuncArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>resultArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":253,"column":1,"offset":6387},"end":{"line":268,"column":4,"offset":6797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":270,"column":8,"offset":6806},"end":{"line":270,"column":18,"offset":6816}}}],"position":{"start":{"line":270,"column":1,"offset":6799},"end":{"line":270,"column":18,"offset":6816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://jsvault.com/async-parallel"},"children":[{"type":"text","value":"https://jsvault.com/async-parallel","position":{"start":{"line":272,"column":4,"offset":6821},"end":{"line":272,"column":38,"offset":6855}}}],"position":{"start":{"line":272,"column":3,"offset":6820},"end":{"line":272,"column":39,"offset":6856}}}],"position":{"start":{"line":272,"column":1,"offset":6818},"end":{"line":272,"column":39,"offset":6856}}},{"type":"text","value":"\n"}],"position":{"start":{"line":272,"column":1,"offset":6818},"end":{"line":272,"column":39,"offset":6856}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":274,"column":1,"offset":6858},"end":{"line":274,"column":7,"offset":6864}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using promise chaining","position":{"start":{"line":276,"column":5,"offset":6870},"end":{"line":276,"column":95,"offset":6960}}}],"position":{"start":{"line":276,"column":1,"offset":6866},"end":{"line":276,"column":95,"offset":6960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The implementation of chaining is that the result is passed through the chain of ","position":{"start":{"line":278,"column":3,"offset":6964},"end":{"line":278,"column":84,"offset":7045}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":278,"column":84,"offset":7045},"end":{"line":278,"column":90,"offset":7051}}},{"type":"text","value":" handlers for all the promises","position":{"start":{"line":278,"column":90,"offset":7051},"end":{"line":278,"column":120,"offset":7081}}}],"position":{"start":{"line":278,"column":1,"offset":6962},"end":{"line":278,"column":120,"offset":7081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":279,"column":3,"offset":7084},"end":{"line":279,"column":9,"offset":7090}}},{"type":"text","value":" method on Promise also returns a promise which can be used to perform ","position":{"start":{"line":279,"column":9,"offset":7090},"end":{"line":279,"column":80,"offset":7161}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":279,"column":80,"offset":7161},"end":{"line":279,"column":86,"offset":7167}}},{"type":"text","value":" on the returned promise","position":{"start":{"line":279,"column":86,"offset":7167},"end":{"line":279,"column":110,"offset":7191}}}],"position":{"start":{"line":279,"column":1,"offset":7082},"end":{"line":279,"column":110,"offset":7191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The errors in promise / promise chaining can be handled with the error callback for each promise when it settles or with a generic catch block","position":{"start":{"line":280,"column":3,"offset":7194},"end":{"line":280,"column":145,"offset":7336}}}],"position":{"start":{"line":280,"column":1,"offset":7192},"end":{"line":280,"column":145,"offset":7336}}},{"type":"text","value":"\n"}],"position":{"start":{"line":278,"column":1,"offset":6962},"end":{"line":280,"column":145,"offset":7336}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":282,"column":1,"offset":7338},"end":{"line":308,"column":4,"offset":8018}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>asyncFunc2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>asyncFunc3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occured in one of the async function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":310,"column":1,"offset":8020},"end":{"line":315,"column":4,"offset":8156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":317,"column":8,"offset":8165},"end":{"line":317,"column":13,"offset":8170}}}],"position":{"start":{"line":317,"column":1,"offset":8158},"end":{"line":317,"column":13,"offset":8170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If ","position":{"start":{"line":318,"column":1,"offset":8171},"end":{"line":318,"column":4,"offset":8174}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":318,"column":4,"offset":8174},"end":{"line":318,"column":10,"offset":8180}}},{"type":"text","value":" method has a return statement which is a promise then it will be considered for the next promise chain until it settles","position":{"start":{"line":318,"column":10,"offset":8180},"end":{"line":318,"column":130,"offset":8300}}}],"position":{"start":{"line":318,"column":1,"offset":8171},"end":{"line":318,"column":130,"offset":8300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":320,"column":8,"offset":8309},"end":{"line":320,"column":18,"offset":8319}}}],"position":{"start":{"line":320,"column":1,"offset":8302},"end":{"line":320,"column":18,"offset":8319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://javascript.info/promise-chaining"},"children":[{"type":"text","value":"https://javascript.info/promise-chaining","position":{"start":{"line":322,"column":4,"offset":8324},"end":{"line":322,"column":44,"offset":8364}}}],"position":{"start":{"line":322,"column":3,"offset":8323},"end":{"line":322,"column":45,"offset":8365}}}],"position":{"start":{"line":322,"column":1,"offset":8321},"end":{"line":322,"column":45,"offset":8365}}},{"type":"text","value":"\n"}],"position":{"start":{"line":322,"column":1,"offset":8321},"end":{"line":322,"column":45,"offset":8365}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":324,"column":1,"offset":8367},"end":{"line":324,"column":7,"offset":8373}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using async await","position":{"start":{"line":326,"column":5,"offset":8379},"end":{"line":326,"column":90,"offset":8464}}}],"position":{"start":{"line":326,"column":1,"offset":8375},"end":{"line":326,"column":90,"offset":8464}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Async function with ","position":{"start":{"line":328,"column":3,"offset":8468},"end":{"line":328,"column":23,"offset":8488}}},{"type":"raw","value":"<code class=\"language-text\">await</code>","position":{"start":{"line":328,"column":23,"offset":8488},"end":{"line":328,"column":30,"offset":8495}}},{"type":"text","value":" for each promise can be used to execute in sequence","position":{"start":{"line":328,"column":30,"offset":8495},"end":{"line":328,"column":82,"offset":8547}}}],"position":{"start":{"line":328,"column":1,"offset":8466},"end":{"line":328,"column":82,"offset":8547}}},{"type":"text","value":"\n"}],"position":{"start":{"line":328,"column":1,"offset":8466},"end":{"line":328,"column":82,"offset":8547}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\"Error occured<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":330,"column":1,"offset":8549},"end":{"line":342,"column":4,"offset":8784}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":344,"column":1,"offset":8786},"end":{"line":344,"column":7,"offset":8792}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using promise chaining and do not terminate on failure","position":{"start":{"line":346,"column":5,"offset":8798},"end":{"line":346,"column":127,"offset":8920}}}],"position":{"start":{"line":346,"column":1,"offset":8794},"end":{"line":346,"column":127,"offset":8920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The promise which gets rejected will invoke the 2nd function argument to ","position":{"start":{"line":348,"column":3,"offset":8924},"end":{"line":348,"column":76,"offset":8997}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":348,"column":76,"offset":8997},"end":{"line":348,"column":82,"offset":9003}}},{"type":"text","value":" handler","position":{"start":{"line":348,"column":82,"offset":9003},"end":{"line":348,"column":90,"offset":9011}}}],"position":{"start":{"line":348,"column":1,"offset":8922},"end":{"line":348,"column":90,"offset":9011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The failure handler will receive the error and continue with next execution which will not propagate failures","position":{"start":{"line":349,"column":3,"offset":9014},"end":{"line":349,"column":112,"offset":9123}}}],"position":{"start":{"line":349,"column":1,"offset":9012},"end":{"line":349,"column":112,"offset":9123}}},{"type":"text","value":"\n"}],"position":{"start":{"line":348,"column":1,"offset":8922},"end":{"line":349,"column":112,"offset":9123}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>async2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>async3<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":351,"column":1,"offset":9125},"end":{"line":379,"column":4,"offset":9648}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":381,"column":1,"offset":9650},"end":{"line":381,"column":7,"offset":9656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using async await and do not terminate on failure","position":{"start":{"line":383,"column":5,"offset":9662},"end":{"line":383,"column":122,"offset":9779}}}],"position":{"start":{"line":383,"column":1,"offset":9658},"end":{"line":383,"column":122,"offset":9779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Unlike promises, ","position":{"start":{"line":385,"column":3,"offset":9783},"end":{"line":385,"column":20,"offset":9800}}},{"type":"raw","value":"<code class=\"language-text\">try-catch</code>","position":{"start":{"line":385,"column":20,"offset":9800},"end":{"line":385,"column":31,"offset":9811}}},{"type":"text","value":" block can be used on async functions","position":{"start":{"line":385,"column":31,"offset":9811},"end":{"line":385,"column":68,"offset":9848}}}],"position":{"start":{"line":385,"column":1,"offset":9781},"end":{"line":385,"column":68,"offset":9848}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">catch</code>","position":{"start":{"line":386,"column":3,"offset":9851},"end":{"line":386,"column":10,"offset":9858}}},{"type":"text","value":" block for each asynchronous function can be used to catch errors and continue with next execution which will not propagate failures","position":{"start":{"line":386,"column":10,"offset":9858},"end":{"line":386,"column":142,"offset":9990}}}],"position":{"start":{"line":386,"column":1,"offset":9849},"end":{"line":386,"column":142,"offset":9990}}},{"type":"text","value":"\n"}],"position":{"start":{"line":385,"column":1,"offset":9781},"end":{"line":386,"column":142,"offset":9990}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":388,"column":1,"offset":9992},"end":{"line":410,"column":4,"offset":10479}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":412,"column":1,"offset":10481},"end":{"line":412,"column":7,"offset":10487}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions which returns a promise, one after the other in sequence","position":{"start":{"line":414,"column":5,"offset":10493},"end":{"line":414,"column":107,"offset":10595}}}],"position":{"start":{"line":414,"column":1,"offset":10489},"end":{"line":414,"column":107,"offset":10595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Asynchronous functions can be executed and promises can be captured in an array","position":{"start":{"line":416,"column":3,"offset":10599},"end":{"line":416,"column":82,"offset":10678}}}],"position":{"start":{"line":416,"column":1,"offset":10597},"end":{"line":416,"column":82,"offset":10678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array method ","position":{"start":{"line":417,"column":3,"offset":10681},"end":{"line":417,"column":16,"offset":10694}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":417,"column":16,"offset":10694},"end":{"line":417,"column":24,"offset":10702}}},{"type":"text","value":" can be used to make the sequential execution on promise settlement","position":{"start":{"line":417,"column":24,"offset":10702},"end":{"line":417,"column":91,"offset":10769}}}],"position":{"start":{"line":417,"column":1,"offset":10679},"end":{"line":417,"column":91,"offset":10769}}},{"type":"text","value":"\n"}],"position":{"start":{"line":416,"column":1,"offset":10597},"end":{"line":417,"column":91,"offset":10769}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":419,"column":1,"offset":10771},"end":{"line":425,"column":4,"offset":10955}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> asyncFunc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":427,"column":1,"offset":10957},"end":{"line":434,"column":4,"offset":11148}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":436,"column":8,"offset":11157},"end":{"line":436,"column":13,"offset":11162}}}],"position":{"start":{"line":436,"column":1,"offset":11150},"end":{"line":436,"column":13,"offset":11162}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Promise.resolve()</code>","position":{"start":{"line":437,"column":1,"offset":11163},"end":{"line":437,"column":20,"offset":11182}}},{"type":"text","value":" is used as the initial value to ","position":{"start":{"line":437,"column":20,"offset":11182},"end":{"line":437,"column":53,"offset":11215}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":437,"column":53,"offset":11215},"end":{"line":437,"column":61,"offset":11223}}},{"type":"text","value":", which resolves the promise immediately,","position":{"start":{"line":437,"column":61,"offset":11223},"end":{"line":437,"column":102,"offset":11264}}}],"position":{"start":{"line":437,"column":1,"offset":11163},"end":{"line":437,"column":102,"offset":11264}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":439,"column":1,"offset":11266},"end":{"line":439,"column":7,"offset":11272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions simultaneously but print the output in the ordered sequence. Do not wait for printing the data if it already available after promise is settled","position":{"start":{"line":441,"column":5,"offset":11278},"end":{"line":441,"column":194,"offset":11467}}}],"position":{"start":{"line":441,"column":1,"offset":11274},"end":{"line":441,"column":194,"offset":11467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array method ","position":{"start":{"line":443,"column":3,"offset":11471},"end":{"line":443,"column":16,"offset":11484}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":443,"column":16,"offset":11484},"end":{"line":443,"column":24,"offset":11492}}},{"type":"text","value":" can be used to make the simultaneously execution on promise settlement","position":{"start":{"line":443,"column":24,"offset":11492},"end":{"line":443,"column":95,"offset":11563}}}],"position":{"start":{"line":443,"column":1,"offset":11469},"end":{"line":443,"column":95,"offset":11563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Unlike sequential execution, the parallel execution of asynchronous functions happen but the output will executed in order of sequence","position":{"start":{"line":444,"column":3,"offset":11566},"end":{"line":444,"column":137,"offset":11700}}}],"position":{"start":{"line":444,"column":1,"offset":11564},"end":{"line":444,"column":137,"offset":11700}}},{"type":"text","value":"\n"}],"position":{"start":{"line":443,"column":1,"offset":11469},"end":{"line":444,"column":137,"offset":11700}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr\n<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">async</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":446,"column":1,"offset":11702},"end":{"line":454,"column":4,"offset":11926}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr\n<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">async</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":456,"column":1,"offset":11928},"end":{"line":464,"column":4,"offset":12138}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":466,"column":1,"offset":12140},"end":{"line":466,"column":7,"offset":12146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Design a utility which takes array of asynchronous functions and returns the 1st successful or non successful result with max waiting time set by the user","position":{"start":{"line":468,"column":5,"offset":12152},"end":{"line":468,"column":162,"offset":12309}}}],"position":{"start":{"line":468,"column":1,"offset":12148},"end":{"line":468,"column":162,"offset":12309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Promise.race</code>","position":{"start":{"line":470,"column":3,"offset":12313},"end":{"line":470,"column":17,"offset":12327}}},{"type":"text","value":" is an in built JavaScript method which helps us to return the first resolved or rejected promise data from promises array","position":{"start":{"line":470,"column":17,"offset":12327},"end":{"line":470,"column":139,"offset":12449}}}],"position":{"start":{"line":470,"column":1,"offset":12311},"end":{"line":470,"column":139,"offset":12449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Timeout feature can be set by adding a function returning a promise which rejects after specified amount of time","position":{"start":{"line":471,"column":3,"offset":12452},"end":{"line":471,"column":115,"offset":12564}}}],"position":{"start":{"line":471,"column":1,"offset":12450},"end":{"line":471,"column":115,"offset":12564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If any promise resolves before timeout the promise which settles first will be the output else timeout will cause rejection","position":{"start":{"line":472,"column":3,"offset":12567},"end":{"line":472,"column":126,"offset":12690}}}],"position":{"start":{"line":472,"column":1,"offset":12565},"end":{"line":472,"column":126,"offset":12690}}},{"type":"text","value":"\n"}],"position":{"start":{"line":470,"column":1,"offset":12311},"end":{"line":472,"column":126,"offset":12690}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeoutFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> asyncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">,</span> timeoutFunc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promiseArr <span class=\"token operator\">=</span> asyncArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFunc</span> <span class=\"token operator\">=></span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":474,"column":1,"offset":12692},"end":{"line":485,"column":4,"offset":13047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":487,"column":1,"offset":13049},"end":{"line":487,"column":7,"offset":13055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Design a utility which takes URL and a value for attempts which will attempt to make a fetch request. If on failure it tries again with increasing delay for number of times which user has requested","position":{"start":{"line":489,"column":5,"offset":13061},"end":{"line":489,"column":205,"offset":13261}}}],"position":{"start":{"line":489,"column":1,"offset":13057},"end":{"line":489,"column":205,"offset":13261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Utility can designed which returns a promise which attempts to make requests and return the data on success","position":{"start":{"line":491,"column":3,"offset":13265},"end":{"line":491,"column":110,"offset":13372}}}],"position":{"start":{"line":491,"column":1,"offset":13263},"end":{"line":491,"column":110,"offset":13372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":492,"column":3,"offset":13375},"end":{"line":492,"column":7,"offset":13379}}},{"type":"raw","value":"<code class=\"language-text\">fetch</code>","position":{"start":{"line":492,"column":7,"offset":13379},"end":{"line":492,"column":14,"offset":13386}}},{"type":"text","value":" request attempts to make calls after increasing time delay on failure","position":{"start":{"line":492,"column":14,"offset":13386},"end":{"line":492,"column":84,"offset":13456}}}],"position":{"start":{"line":492,"column":1,"offset":13373},"end":{"line":492,"column":84,"offset":13456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If all the attempts by to get response fails, promise gets rejected","position":{"start":{"line":493,"column":3,"offset":13459},"end":{"line":493,"column":70,"offset":13526}}}],"position":{"start":{"line":493,"column":1,"offset":13457},"end":{"line":493,"column":70,"offset":13526}}},{"type":"text","value":"\n"}],"position":{"start":{"line":491,"column":1,"offset":13263},"end":{"line":493,"column":70,"offset":13526}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">requestManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> attempts <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> attempts<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attempts <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token function\">requestManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://reqbin.com/echo/get/json'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":495,"column":1,"offset":13528},"end":{"line":519,"column":4,"offset":14222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":521,"column":8,"offset":14231},"end":{"line":521,"column":13,"offset":14236}}}],"position":{"start":{"line":521,"column":1,"offset":14224},"end":{"line":521,"column":13,"offset":14236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">1000 + 1000 * i</code>","position":{"start":{"line":522,"column":1,"offset":14237},"end":{"line":522,"column":18,"offset":14254}}},{"type":"text","value":" is used for delay after 1st unsuccessful attempt to fetch, which increases the delay on every iteration","position":{"start":{"line":522,"column":18,"offset":14254},"end":{"line":522,"column":122,"offset":14358}}}],"position":{"start":{"line":522,"column":1,"offset":14237},"end":{"line":522,"column":122,"offset":14358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":524,"column":8,"offset":14367},"end":{"line":524,"column":18,"offset":14377}}}],"position":{"start":{"line":524,"column":1,"offset":14360},"end":{"line":524,"column":18,"offset":14377}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://dev.to/ycmjason/javascript-fetch-retry-upon-failure-3p6g"},"children":[{"type":"text","value":"https://dev.to/ycmjason/javascript-fetch-retry-upon-failure-3p6g","position":{"start":{"line":526,"column":4,"offset":14382},"end":{"line":526,"column":68,"offset":14446}}}],"position":{"start":{"line":526,"column":3,"offset":14381},"end":{"line":526,"column":69,"offset":14447}}}],"position":{"start":{"line":526,"column":1,"offset":14379},"end":{"line":526,"column":69,"offset":14447}}},{"type":"text","value":"\n"}],"position":{"start":{"line":526,"column":1,"offset":14379},"end":{"line":526,"column":69,"offset":14447}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":528,"column":1,"offset":14449},"end":{"line":528,"column":7,"offset":14455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Create a generator to return a random number on every request","position":{"start":{"line":530,"column":5,"offset":14461},"end":{"line":530,"column":69,"offset":14525}}}],"position":{"start":{"line":530,"column":1,"offset":14457},"end":{"line":530,"column":69,"offset":14525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The generation of random number can be implemented in the normal way in the function but will returned and function yields","position":{"start":{"line":532,"column":3,"offset":14529},"end":{"line":532,"column":125,"offset":14651}}}],"position":{"start":{"line":532,"column":1,"offset":14527},"end":{"line":532,"column":125,"offset":14651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The function will again continue to execute in loop to return a new random number","position":{"start":{"line":533,"column":3,"offset":14654},"end":{"line":533,"column":84,"offset":14735}}}],"position":{"start":{"line":533,"column":1,"offset":14652},"end":{"line":533,"column":84,"offset":14735}}},{"type":"text","value":"\n"}],"position":{"start":{"line":532,"column":1,"offset":14527},"end":{"line":533,"column":84,"offset":14735}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rand1 <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rand2 <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":535,"column":1,"offset":14737},"end":{"line":546,"column":4,"offset":14943}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":548,"column":8,"offset":14952},"end":{"line":548,"column":13,"offset":14957}}}],"position":{"start":{"line":548,"column":1,"offset":14945},"end":{"line":548,"column":13,"offset":14957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Genertor function need not complete its execution","position":{"start":{"line":549,"column":1,"offset":14958},"end":{"line":549,"column":50,"offset":15007}}}],"position":{"start":{"line":549,"column":1,"offset":14958},"end":{"line":549,"column":50,"offset":15007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":551,"column":8,"offset":15016},"end":{"line":551,"column":18,"offset":15026}}}],"position":{"start":{"line":551,"column":1,"offset":15009},"end":{"line":551,"column":18,"offset":15026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"},"children":[{"type":"text","value":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function","position":{"start":{"line":553,"column":4,"offset":15031},"end":{"line":553,"column":89,"offset":15116}}}],"position":{"start":{"line":553,"column":3,"offset":15030},"end":{"line":553,"column":90,"offset":15117}}},{"type":"text","value":"*","position":{"start":{"line":553,"column":90,"offset":15117},"end":{"line":553,"column":91,"offset":15118}}}],"position":{"start":{"line":553,"column":1,"offset":15028},"end":{"line":553,"column":91,"offset":15118}}},{"type":"text","value":"\n"}],"position":{"start":{"line":553,"column":1,"offset":15028},"end":{"line":553,"column":91,"offset":15118}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":555,"column":1,"offset":15120},"end":{"line":555,"column":7,"offset":15126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Search for the presence of a given value in the nested object using generator","position":{"start":{"line":557,"column":5,"offset":15132},"end":{"line":557,"column":85,"offset":15212}}}],"position":{"start":{"line":557,"column":1,"offset":15128},"end":{"line":557,"column":85,"offset":15212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"With the help of generator Inversion of control is possible","position":{"start":{"line":559,"column":3,"offset":15216},"end":{"line":559,"column":62,"offset":15275}}}],"position":{"start":{"line":559,"column":1,"offset":15214},"end":{"line":559,"column":62,"offset":15275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Instead of function seaching for the key by passing the callback or key, the logic can be implemented in the controlling code","position":{"start":{"line":560,"column":3,"offset":15278},"end":{"line":560,"column":128,"offset":15403}}}],"position":{"start":{"line":560,"column":1,"offset":15276},"end":{"line":560,"column":128,"offset":15403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"For..of loop calling the recursive generator function on object can be used to achieve this","position":{"start":{"line":561,"column":3,"offset":15406},"end":{"line":561,"column":94,"offset":15497}}}],"position":{"start":{"line":561,"column":1,"offset":15404},"end":{"line":561,"column":94,"offset":15497}}},{"type":"text","value":"\n"}],"position":{"start":{"line":559,"column":1,"offset":15214},"end":{"line":561,"column":94,"offset":15497}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">m</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchValue <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> searchValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchValue <span class=\"token operator\">+</span> <span class=\"token string\">\" exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":563,"column":1,"offset":15499},"end":{"line":584,"column":4,"offset":15945}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":586,"column":1,"offset":15947},"end":{"line":586,"column":7,"offset":15953}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":589,"column":1,"offset":15956}}}}