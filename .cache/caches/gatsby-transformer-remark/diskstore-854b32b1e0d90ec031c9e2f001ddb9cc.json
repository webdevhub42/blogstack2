{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-cedc1be873e1a42eea66facd7f7e4bd7-gatsby-remark-prismjs-","val":"<h1>Map</h1>\n<p>The <code class=\"language-text\">Map</code> object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value.</p>\n<h2>Description</h2>\n<p>A <code class=\"language-text\">Map</code> object iterates its elements in insertion order — a <a href=\"../statements/for...of\"><code class=\"language-text\">for...of</code></a> loop returns an array of <code class=\"language-text\">[key, value]</code> for each iteration.</p>\n<h3>Key equality</h3>\n<ul>\n<li>Key equality is based on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality\"><code class=\"language-text\">sameValueZero</code></a> algorithm.</li>\n<li><a href=\"nan\"><code class=\"language-text\">NaN</code></a> is considered the same as <code class=\"language-text\">NaN</code> (even though <code class=\"language-text\">NaN !== NaN</code>) and all other values are considered equal according to the semantics of the <code class=\"language-text\">===</code> operator.</li>\n<li>In the current ECMAScript specification, <code class=\"language-text\">-0</code> and <code class=\"language-text\">+0</code> are considered equal, although this was not so in earlier drafts. See <em>\"Value equality for -0 and 0\"</em> in the <a href=\"#browser_compatibility\">Browser compatibility</a> table for details.</li>\n</ul>\n<h3>Objects vs. Maps</h3>\n<p><a href=\"object\"><code class=\"language-text\">Object</code></a> is similar to <code class=\"language-text\">Map</code>—both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), <code class=\"language-text\">Object</code> has been used as <code class=\"language-text\">Map</code> historically.</p>\n<p>However, there are important differences that make <code class=\"language-text\">Map</code> preferable in certain cases:</p>\n<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>\n</th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Accidental Keys</td>\n<td>A <code>Map</code> does not contain any keys by default. It only contains what is explicitly put into it.</td>\n<td>\n<p>An <code>Object</code> has a prototype, so it contains default keys that could collide with your own keys if you're not careful.</p>\n<div class=\"notecard note\">\n<p>\n<strong>Note:</strong> As of ES5, this can be bypassed by using <a href=\"object/create\">\n<code>Object.create(null)</code>\n</a>, but this is seldom done.</p>\n</div>\n</td>\n</tr>\n<tr class=\"even\">\n<td>Key Types</td>\n<td>A <code>Map</code>'s keys can be any value (including functions, objects, or any primitive).</td>\n<td>The keys of an <code>Object</code> must be either a <a href=\"string\">\n<code>String</code>\n</a> or a <a href=\"symbol\">\n<code>Symbol</code>\n</a>.</td>\n</tr>\n<tr class=\"odd\">\n<td>Key Order</td>\n<td>\n<p>The keys in <code>Map</code> are ordered in a simple, straightforward way: A <code>Map</code> object iterates entries, keys, and values in the order of entry insertion.</p>\n</td>\n<td>\n<p>Although the keys of an ordinary <code>Object</code> are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.</p>\n<p>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a> and <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\">EnumerateObjectProperties</a> abstract specification operations. But note that no single mechanism iterates <strong>all</strong> of an object's properties; the various mechanisms each include different subsets of properties. (<a href=\"../statements/for...in\">\n<code>for-in</code>\n</a> includes only enumerable string-keyed properties; <a href=\"object/keys\">\n<code>Object.keys</code>\n</a> includes only own, enumerable, string-keyed properties; <a href=\"object/getownpropertynames\">\n<code>Object.getOwnPropertyNames</code>\n</a> includes own, string-keyed properties even if non-enumerable; <a href=\"object/getownpropertysymbols\">\n<code>Object.getOwnPropertySymbols</code>\n</a> does the same for just <code>Symbol</code>-keyed properties, etc.)</p>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\n<p>Size</p>\n</td>\n<td>The number of items in a <code>Map</code> is easily retrieved from its <a href=\"map/size\">\n<code>size</code>\n</a> property.</td>\n<td>The number of items in an <code>Object</code> must be determined manually.</td>\n</tr>\n<tr class=\"odd\">\n<td>Iteration</td>\n<td>A <code>Map</code> is an <a href=\"../iteration_protocols\">iterable</a>, so it can be directly iterated.</td>\n<td>\n<p>\n<code>Object</code> does not implement an <a href=\"../iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript <a href=\"../statements/for...of\">for...of</a> statement (by default).</p>\n<div class=\"notecard note\">\n<p>\n<strong>Note:</strong>\n</p>\n<ul>\n<li>An object can implement the iteration protocol, or you can get an iterable for an object using <a href=\"object/keys\">\n<code>Object.keys</code>\n</a> or <a href=\"object/entries\">\n<code>Object.entries</code>\n</a>.</li>\n<li>The <a href=\"../statements/for...in\">for...in</a> statement allows you to iterate over the <em>enumerable</em> properties of an object.</li>\n</ul>\n</div>\n</td>\n</tr>\n<tr class=\"even\">\n<td>Performance</td>\n<td>\n<p>Performs better in scenarios involving frequent additions and removals of key-value pairs.</p>\n</td>\n<td>\n<p>Not optimized for frequent additions and removals of key-value pairs.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3>Setting object properties</h3>\n<p>Setting Object properties works for Map objects as well, and can cause considerable confusion.</p>\n<p>Therefore, this appears to work in a way:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let wrongMap = new Map()\nwrongMap['bla'] = 'blaa'\nwrongMap['bla2'] = 'blaaa2'\n\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }</code></pre></div>\n<p>But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wrongMap.has('bla')    // false\nwrongMap.delete('bla') // false\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }</code></pre></div>\n<p>The correct usage for storing data in the Map is through the <code class=\"language-text\">set(key, value)</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let contacts = new Map()\ncontacts.set('Jessie', {phone: \"213-555-1234\", address: \"123 N 1st Ave\"})\ncontacts.has('Jessie') // true\ncontacts.get('Hilary') // undefined\ncontacts.set('Hilary', {phone: \"617-555-4321\", address: \"321 S 2nd St\"})\ncontacts.get('Jessie') // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete('Raymond') // false\ncontacts.delete('Jessie') // true\nconsole.log(contacts.size) // 1</code></pre></div>\n<h2>Constructor</h2>\n<p><a href=\"map/map\"><code class=\"language-text\">Map()</code></a>\nCreates a new <code class=\"language-text\">Map</code> object.</p>\n<h2>Static properties</h2>\n<p><a href=\"map/@@species\"><code class=\"language-text\">get Map[@@species]</code></a>\nThe constructor function that is used to create derived objects.</p>\n<h2>Instance properties</h2>\n<p><a href=\"map/size\"><code class=\"language-text\">Map.prototype.size</code></a>\nReturns the number of key/value pairs in the <code class=\"language-text\">Map</code> object.</p>\n<h2>Instance methods</h2>\n<p><a href=\"map/clear\"><code class=\"language-text\">Map.prototype.clear()</code></a>\nRemoves all key-value pairs from the <code class=\"language-text\">Map</code> object.</p>\n<p><a href=\"map/delete\"><code class=\"language-text\">Map.prototype.delete(key)</code></a>\nReturns <code class=\"language-text\">true</code> if an element in the <code class=\"language-text\">Map</code> object existed and has been removed, or <code class=\"language-text\">false</code> if the element does not exist. <code class=\"language-text\">Map.prototype.has(key)</code> will return <code class=\"language-text\">false</code> afterwards.</p>\n<p><a href=\"map/get\"><code class=\"language-text\">Map.prototype.get(key)</code></a>\nReturns the value associated to the <code class=\"language-text\">key</code>, or <code class=\"language-text\">undefined</code> if there is none.</p>\n<p><a href=\"map/has\"><code class=\"language-text\">Map.prototype.has(key)</code></a>\nReturns a boolean asserting whether a value has been associated to the <code class=\"language-text\">key</code> in the <code class=\"language-text\">Map</code> object or not.</p>\n<p><a href=\"map/set\"><code class=\"language-text\">Map.prototype.set(key, value)</code></a>\nSets the <code class=\"language-text\">value</code> for the <code class=\"language-text\">key</code> in the <code class=\"language-text\">Map</code> object. Returns the <code class=\"language-text\">Map</code> object.</p>\n<h3>Iteration methods</h3>\n<p><a href=\"map/@@iterator\"><code class=\"language-text\">Map.prototype[@@iterator]()</code></a>\nReturns a new Iterator object that contains <code class=\"language-text\">[key, value]</code> for each element in the <code class=\"language-text\">Map</code> object in insertion order.</p>\n<p><a href=\"map/keys\"><code class=\"language-text\">Map.prototype.keys()</code></a>\nReturns a new Iterator object that contains the <strong>keys</strong> for each element in the <code class=\"language-text\">Map</code> object in insertion order.</p>\n<p><a href=\"map/values\"><code class=\"language-text\">Map.prototype.values()</code></a>\nReturns a new Iterator object that contains the <strong>values</strong> for each element in the <code class=\"language-text\">Map</code> object in insertion order.</p>\n<p><a href=\"map/entries\"><code class=\"language-text\">Map.prototype.entries()</code></a>\nReturns a new Iterator object that contains <code class=\"language-text\">[key, value]</code> for each element in the <code class=\"language-text\">Map</code> object in insertion order.</p>\n<p><a href=\"map/foreach\"><code class=\"language-text\">Map.prototype.forEach(callbackFn[, thisArg])</code></a>\nCalls <code class=\"language-text\">callbackFn</code> once for each key-value pair present in the <code class=\"language-text\">Map</code> object, in insertion order. If a <code class=\"language-text\">thisArg</code> parameter is provided to <code class=\"language-text\">forEach</code>, it will be used as the <code class=\"language-text\">this</code> value for each callback.</p>\n<h2>Examples</h2>\n<h3>Using the Map object</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}</code></pre></div>\n<h3>Using NaN as Map keys</h3>\n<p><a href=\"nan\"><code class=\"language-text\">NaN</code></a> can also be used as a key. Even though every <code class=\"language-text\">NaN</code> is not equal to itself (<code class=\"language-text\">NaN !== NaN</code> is true), the following example works because <code class=\"language-text\">NaN</code>s are indistinguishable from each other:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN)\n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN)\n// \"not a number\"</code></pre></div>\n<h3>Iterating Map with for..of</h3>\n<p>Maps can be iterated using a <code class=\"language-text\">for..of</code> loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one</code></pre></div>\n<h3>Iterating Map with forEach()</h3>\n<p>Maps can be iterated using the <a href=\"map/foreach\"><code class=\"language-text\">forEach()</code></a> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one</code></pre></div>\n<h3>Relation with Array objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]</code></pre></div>\n<h3>Cloning and merging Maps</h3>\n<p>Just like <code class=\"language-text\">Array</code>s, <code class=\"language-text\">Map</code>s can be cloned:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)</code></pre></div>\n<p><strong>Note:</strong> Keep in mind that <em>the data itself</em> is not cloned.</p>\n<p>Maps can be merged, maintaining key uniqueness:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three</code></pre></div>\n<p>Maps can be merged with Arrays, too:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three</code></pre></div>"}