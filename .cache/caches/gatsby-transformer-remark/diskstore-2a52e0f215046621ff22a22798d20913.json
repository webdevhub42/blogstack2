{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-118a1b6c575ee89bf478ce4c9c3d0c8e-gatsby-remark-prismjs-","val":"<h2>Javascript</h2>\n<h3>Chwat sheet:</h3>\n<details>\n<summary>  **Cheatsheet** </summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token comment\">// Single-line comments start with two slashes.</span>\n<span class=\"token comment\">/* Multiline comments start with slash-star,\n   and end with star-slash */</span>\n\n<span class=\"token comment\">// Statements can be terminated by ;</span>\n<span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... but they don't have to be, as semicolons are automatically inserted</span>\n<span class=\"token comment\">// wherever there's a newline, except in certain cases.</span>\n<span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Because those cases can cause unexpected results, we'll keep on using</span>\n<span class=\"token comment\">// semicolons in this guide.</span>\n\n<span class=\"token comment\">///////////////////////////////////</span>\n<span class=\"token comment\">// 1. Numbers, Strings and Operators</span>\n\n<span class=\"token comment\">// JavaScript has one number type (which is a 64-bit IEEE 754 double).</span>\n<span class=\"token comment\">// Doubles have a 52-bit mantissa, which is enough to store integers</span>\n<span class=\"token comment\">// up to about 9✕10¹⁵ precisely.</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 3</span>\n<span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 1.5</span>\n\n<span class=\"token comment\">// Some basic arithmetic works as you'd expect.</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 2</span>\n<span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 0.30000000000000004</span>\n<span class=\"token number\">8</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 7</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 20</span>\n<span class=\"token number\">35</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 7</span>\n\n<span class=\"token comment\">// Including uneven division.</span>\n<span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 2.5</span>\n\n<span class=\"token comment\">// And modulo division.</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 0</span>\n<span class=\"token number\">30</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 2</span>\n<span class=\"token number\">18.5</span> <span class=\"token operator\">%</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 4.5</span>\n\n<span class=\"token comment\">// Bitwise operations also work; when you perform a bitwise operation your float</span>\n<span class=\"token comment\">// is converted to a signed int *up to* 32 bits.</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 4</span>\n\n<span class=\"token comment\">// Precedence is enforced with parentheses.</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 8</span>\n\n<span class=\"token comment\">// There are three special not-a-real-number values:</span>\n<span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result of e.g. 1/0</span>\n<span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result of e.g. -1/0</span>\n<span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result of e.g. 0/0, stands for 'Not a Number'</span>\n\n<span class=\"token comment\">// There's also a boolean type.</span>\n<span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Strings are created with ' or \".</span>\n<span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Negation uses the ! symbol</span>\n<span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// Equality is ===</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n\n<span class=\"token comment\">// Inequality is !==</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// More comparisons</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// Strings are concatenated with +</span>\n<span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello world!\"</span>\n\n<span class=\"token comment\">// ... which works with more than just strings</span>\n<span class=\"token string\">\"1, 2, \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"1, 2, 3\"</span>\n<span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello world,!\"</span>\n\n<span class=\"token comment\">// and are compared with &lt; and ></span>\n<span class=\"token string\">\"a\"</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// Type coercion is performed for comparisons with double equals...</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// ...unless you use ===</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">===</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n\n<span class=\"token comment\">// ...which can result in some weird behaviour...</span>\n<span class=\"token number\">13</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 14</span>\n<span class=\"token string\">\"13\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '13true'</span>\n\n<span class=\"token comment\">// You can access characters in a string with `charAt`</span>\n<span class=\"token string\">\"This is a string\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// = 'T'</span>\n\n<span class=\"token comment\">// ...or use `substring` to get larger pieces.</span>\n<span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello\"</span>\n\n<span class=\"token comment\">// `length` is a property, so don't use ().</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 5</span>\n\n<span class=\"token comment\">// There's also `null` and `undefined`.</span>\n<span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// used to indicate a deliberate non-value</span>\n<span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// used to indicate a value is not currently present (although</span>\n           <span class=\"token comment\">// `undefined` is actually a value itself)</span>\n\n<span class=\"token comment\">// false, null, undefined, NaN, 0 and \"\" are falsy; everything else is truthy.</span>\n<span class=\"token comment\">// Note that 0 is falsy and \"0\" is truthy, even though 0 == \"0\".</span>\n\n<span class=\"token comment\">///////////////////////////////////</span>\n<span class=\"token comment\">// 2. Variables, Arrays and Objects</span>\n\n<span class=\"token comment\">// Variables are declared with the `var` keyword. JavaScript is dynamically</span>\n<span class=\"token comment\">// typed, so you don't need to specify type. Assignment uses a single `=`</span>\n<span class=\"token comment\">// character.</span>\n<span class=\"token keyword\">var</span> someVar <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If you leave the var keyword off, you won't get an error...</span>\nsomeOtherVar <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...but your variable will be created in the global scope, not in the scope</span>\n<span class=\"token comment\">// you defined it in.</span>\n\n<span class=\"token comment\">// Variables declared without being assigned to are set to undefined.</span>\n<span class=\"token keyword\">var</span> someThirdVar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = undefined</span>\n\n<span class=\"token comment\">// If you want to declare a couple of variables, then you could use a comma</span>\n<span class=\"token comment\">// separator</span>\n<span class=\"token keyword\">var</span> someFourthVar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> someFifthVar <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// There's shorthand for performing math operations on variables:</span>\nsomeVar <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// equivalent to someVar = someVar + 5; someVar is 10 now</span>\nsomeVar <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now someVar is 100</span>\n\n<span class=\"token comment\">// and an even-shorter-hand for adding or subtracting 1</span>\nsomeVar<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now someVar is 101</span>\nsomeVar<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// back to 100</span>\n\n<span class=\"token comment\">// Arrays are ordered lists of values, of any type.</span>\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Their members can be accessed using the square-brackets subscript syntax.</span>\n<span class=\"token comment\">// Array indices start at zero.</span>\nmyArray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 45</span>\n\n<span class=\"token comment\">// Arrays are mutable and of variable length.</span>\nmyArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 4</span>\n\n<span class=\"token comment\">// Add/Modify at specific index</span>\nmyArray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add and remove element from front or back end of an array</span>\nmyArray<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Add as the first element</span>\nsomeVar <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Remove first element and return it</span>\nmyArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Add as the last element</span>\nsomeVar <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Remove last element and return it</span>\n\n<span class=\"token comment\">// Join all elements of an array with semicolon</span>\n<span class=\"token keyword\">var</span> myArray0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmyArray0<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// = \"32;false;js;12;56;90\"</span>\n\n<span class=\"token comment\">// Get subarray of elements from index 1 (include) to 4 (exclude)</span>\nmyArray0<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = [false,\"js\",12]</span>\n\n<span class=\"token comment\">// Remove 4 elements starting from index 2, and insert there strings</span>\n<span class=\"token comment\">// \"hi\",\"wr\" and \"ld\"; return removed subarray</span>\nmyArray0<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = [\"js\",12,56,90]</span>\n<span class=\"token comment\">// myArray0 === [32,false,\"hi\",\"wr\",\"ld\"]</span>\n\n<span class=\"token comment\">// JavaScript's objects are equivalent to \"dictionaries\" or \"maps\" in other</span>\n<span class=\"token comment\">// languages: an unordered collection of key-value pairs.</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">key1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Keys are strings, but quotes aren't required if they're a valid</span>\n<span class=\"token comment\">// JavaScript identifier. Values can be any type.</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">myKey</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"my other key\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Object attributes can also be accessed using the subscript syntax,</span>\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"my other key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 4</span>\n\n<span class=\"token comment\">// ... or using the dot syntax, provided the key is a valid identifier.</span>\nmyObj<span class=\"token punctuation\">.</span>myKey<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"myValue\"</span>\n\n<span class=\"token comment\">// Objects are mutable; values can be changed and new keys added.</span>\nmyObj<span class=\"token punctuation\">.</span>myThirdKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If you try to access a value that's not yet set, you'll get undefined.</span>\nmyObj<span class=\"token punctuation\">.</span>myFourthKey<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = undefined</span>\n\n<span class=\"token comment\">///////////////////////////////////</span>\n<span class=\"token comment\">// 3. Logic and Control Structures</span>\n\n<span class=\"token comment\">// The `if` structure works as you'd expect.</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// evaluated if count is 3</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// evaluated if count is 4</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// evaluated if it's not either 3 or 4</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// As does `while`.</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// An infinite loop!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Do-while loops are like while loops, except they always run at least once.</span>\n<span class=\"token keyword\">var</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    input <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The `for` loop is the same as C and Java:</span>\n<span class=\"token comment\">// initialization; continue condition; iteration.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// will run 5 times</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Breaking out of labeled loops is similar to Java</span>\n<span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// breaks out of outer loop instead of only the inner one</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The for/in statement allows iteration over properties of an object.</span>\n<span class=\"token keyword\">var</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">fname</span><span class=\"token operator\">:</span><span class=\"token string\">\"Paul\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lname</span><span class=\"token operator\">:</span><span class=\"token string\">\"Ken\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    description <span class=\"token operator\">+=</span> person<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// description = 'Paul Ken 18 '</span>\n\n<span class=\"token comment\">// The for/of statement allows iteration over iterable objects (including the built-in String,</span>\n<span class=\"token comment\">// Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set,</span>\n<span class=\"token comment\">// and user-defined iterables).</span>\n<span class=\"token keyword\">var</span> myPets <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hamster\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hedgehog\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> pet <span class=\"token keyword\">of</span> pets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    myPets <span class=\"token operator\">+=</span> pet <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// myPets = 'cat dog hamster hedgehog '</span>\n\n<span class=\"token comment\">// &amp;&amp; is logical and, || is logical or</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>house<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token string\">\"big\"</span> <span class=\"token operator\">&amp;&amp;</span> house<span class=\"token punctuation\">.</span>colour <span class=\"token operator\">==</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    house<span class=\"token punctuation\">.</span>contains <span class=\"token operator\">=</span> <span class=\"token string\">\"bear\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colour <span class=\"token operator\">==</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">||</span> colour <span class=\"token operator\">==</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// colour is either red or blue</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// &amp;&amp; and || \"short circuit\", which is useful for setting default values.</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> otherName <span class=\"token operator\">||</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The `switch` statement checks for equality with `===`.</span>\n<span class=\"token comment\">// Use 'break' after each case</span>\n<span class=\"token comment\">// or the cases after the correct one will be executed too.</span>\ngrade <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'A'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Great job\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'B'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK job\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'C'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can do better\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oy vey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">///////////////////////////////////</span>\n<span class=\"token comment\">// 4. Functions, Scope and Closures</span>\n\n<span class=\"token comment\">// JavaScript functions are declared with the `function` keyword.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">thing</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> thing<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"FOO\"</span>\n\n<span class=\"token comment\">// Note that the value to be returned must start on the same line as the</span>\n<span class=\"token comment\">// `return` keyword, otherwise you'll always return `undefined` due to</span>\n<span class=\"token comment\">// automatic semicolon insertion. Watch out for this when using Allman style.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token comment\">// &lt;- semicolon automatically inserted here</span>\n    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">thisIsAn</span><span class=\"token operator\">:</span> <span class=\"token string\">'object literal'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = undefined</span>\n\n<span class=\"token comment\">// JavaScript functions are first class objects, so they can be reassigned to</span>\n<span class=\"token comment\">// different variable names and passed to other functions as arguments - for</span>\n<span class=\"token comment\">// example, when supplying an event handler:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code will be called in 5 seconds' time</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>myFunction<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note: setTimeout isn't part of the JS language, but is provided by browsers</span>\n<span class=\"token comment\">// and Node.js.</span>\n\n<span class=\"token comment\">// Another function provided by browsers is setInterval</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code will be called every 5 seconds</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>myFunction<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Function objects don't even have to be declared with a name - you can write</span>\n<span class=\"token comment\">// an anonymous function definition directly into the arguments of another.</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code will be called in 5 seconds' time</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JavaScript has function scope; functions get their own scope but other blocks</span>\n<span class=\"token comment\">// do not.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ni<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 5 - not undefined as you'd expect in a block-scoped language</span>\n\n<span class=\"token comment\">// This has led to a common pattern of \"immediately-executing anonymous</span>\n<span class=\"token comment\">// functions\", which prevent temporary variables from leaking into the global</span>\n<span class=\"token comment\">// scope.</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> temporary <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// We can access the global scope by assigning to the \"global object\", which</span>\n    <span class=\"token comment\">// in a web browser is always `window`. The global object may have a</span>\n    <span class=\"token comment\">// different name in non-browser environments such as Node.js.</span>\n    window<span class=\"token punctuation\">.</span>permanent <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntemporary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// raises ReferenceError</span>\npermanent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 10</span>\n\n<span class=\"token comment\">// One of JavaScript's most powerful features is closures. If a function is</span>\n<span class=\"token comment\">// defined inside another function, the inner function has access to all the</span>\n<span class=\"token comment\">// outer function's variables, even after the outer function exits.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHelloInFiveSeconds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prompt <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Inner functions are put in the local scope by default, as if they were</span>\n    <span class=\"token comment\">// declared with `var`.</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setTimeout is asynchronous, so the sayHelloInFiveSeconds function will</span>\n    <span class=\"token comment\">// exit immediately, and setTimeout will call inner afterwards. However,</span>\n    <span class=\"token comment\">// because inner is \"closed over\" sayHelloInFiveSeconds, inner still has</span>\n    <span class=\"token comment\">// access to the `prompt` variable when it is finally called.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHelloInFiveSeconds</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will open a popup with \"Hello, Adam!\" in 5s</span>\n\n<span class=\"token comment\">///////////////////////////////////</span>\n<span class=\"token comment\">// 5. More about Objects; Constructors and Prototypes</span>\n\n<span class=\"token comment\">// Objects can contain functions.</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">myFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello world!\"</span>\n\n<span class=\"token comment\">// When functions attached to an object are called, they can access the object</span>\n<span class=\"token comment\">// they're attached to using the `this` keyword.</span>\nmyObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">myString</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">myFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myString<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello world!\"</span>\n\n<span class=\"token comment\">// What this is set to has to do with how the function is called, not where</span>\n<span class=\"token comment\">// it's defined. So, our function doesn't work if it isn't called in the</span>\n<span class=\"token comment\">// context of the object.</span>\n<span class=\"token keyword\">var</span> myFunc <span class=\"token operator\">=</span> myObj<span class=\"token punctuation\">.</span>myFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = undefined</span>\n\n<span class=\"token comment\">// Inversely, a function can be assigned to the object and gain access to it</span>\n<span class=\"token comment\">// through `this`, even if it wasn't attached when it was defined.</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myOtherFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myString<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>myOtherFunc <span class=\"token operator\">=</span> myOtherFunc<span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">myOtherFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"HELLO WORLD!\"</span>\n\n<span class=\"token comment\">// We can also specify a context for a function to execute in when we invoke it</span>\n<span class=\"token comment\">// using `call` or `apply`.</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">anotherFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myString <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">anotherFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\" And Hello Moon!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello World! And Hello Moon!\"</span>\n\n<span class=\"token comment\">// The `apply` function is nearly identical, but takes an array for an argument</span>\n<span class=\"token comment\">// list.</span>\n\n<span class=\"token function\">anotherFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\" And Hello Sun!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello World! And Hello Sun!\"</span>\n\n<span class=\"token comment\">// This is useful when working with a function that accepts a sequence of</span>\n<span class=\"token comment\">// arguments and you want to pass an array.</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 6</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = NaN (uh-oh!)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 6</span>\n\n<span class=\"token comment\">// But, `call` and `apply` are only temporary. When we want it to stick, we can</span>\n<span class=\"token comment\">// use `bind`.</span>\n\n<span class=\"token keyword\">var</span> boundFunc <span class=\"token operator\">=</span> <span class=\"token function\">anotherFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">boundFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" And Hello Saturn!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"Hello World! And Hello Saturn!\"</span>\n\n<span class=\"token comment\">// `bind` can also be used to partially apply (curry) a function.</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">product</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> doubler <span class=\"token operator\">=</span> <span class=\"token function\">product</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doubler</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 16</span>\n\n<span class=\"token comment\">// When you call a function with the `new` keyword, a new object is created, and</span>\n<span class=\"token comment\">// made available to the function via the `this` keyword. Functions designed to be</span>\n<span class=\"token comment\">// called like that are called constructors.</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">MyConstructor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myNumber <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyNewObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = {myNumber: 5}</span>\nmyNewObj<span class=\"token punctuation\">.</span>myNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 5</span>\n\n<span class=\"token comment\">// Unlike most other popular object-oriented languages, JavaScript has no</span>\n<span class=\"token comment\">// concept of 'instances' created from 'class' blueprints; instead, JavaScript</span>\n<span class=\"token comment\">// combines instantiation and inheritance into a single concept: a 'prototype'.</span>\n\n<span class=\"token comment\">// Every JavaScript object has a 'prototype'. When you go to access a property</span>\n<span class=\"token comment\">// on an object that doesn't exist on the actual object, the interpreter will</span>\n<span class=\"token comment\">// look at its prototype.</span>\n\n<span class=\"token comment\">// Some JS implementations let you access an object's prototype on the magic</span>\n<span class=\"token comment\">// property `__proto__`. While this is useful for explaining prototypes it's not</span>\n<span class=\"token comment\">// part of the standard; we'll get to standard ways of using prototypes later.</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">myString</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello world!\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myPrototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">meaningOfLife</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">myFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myString<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> myPrototype<span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>meaningOfLife<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 42</span>\n\n<span class=\"token comment\">// This works for functions, too.</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"hello world!\"</span>\n\n<span class=\"token comment\">// Of course, if your property isn't on your prototype, the prototype's</span>\n<span class=\"token comment\">// prototype is searched, and so on.</span>\nmyPrototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">myBoolean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>myBoolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// There's no copying involved here; each object stores a reference to its</span>\n<span class=\"token comment\">// prototype. This means we can alter the prototype and our changes will be</span>\n<span class=\"token comment\">// reflected everywhere.</span>\nmyPrototype<span class=\"token punctuation\">.</span>meaningOfLife <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>meaningOfLife<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 43</span>\n\n<span class=\"token comment\">// The for/in statement allows iteration over properties of an object,</span>\n<span class=\"token comment\">// walking up the prototype chain until it sees a null prototype.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token keyword\">in</span> myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">///prints:</span>\n<span class=\"token comment\">// Hello world!</span>\n<span class=\"token comment\">// 43</span>\n<span class=\"token comment\">// [Function: myFunc]</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// To only consider properties attached to the object itself</span>\n<span class=\"token comment\">// and not its prototypes, use the `hasOwnProperty()` check.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token keyword\">in</span> myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">///prints:</span>\n<span class=\"token comment\">// Hello world!</span>\n\n<span class=\"token comment\">// We mentioned that `__proto__` was non-standard, and there's no standard way to</span>\n<span class=\"token comment\">// change the prototype of an existing object. However, there are two ways to</span>\n<span class=\"token comment\">// create a new object with a given prototype.</span>\n\n<span class=\"token comment\">// The first is Object.create, which is a recent addition to JS, and therefore</span>\n<span class=\"token comment\">// not available in all implementations yet.</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>myPrototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>meaningOfLife<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 43</span>\n\n<span class=\"token comment\">// The second way, which works anywhere, has to do with constructors.</span>\n<span class=\"token comment\">// Constructors have a property called prototype. This is *not* the prototype of</span>\n<span class=\"token comment\">// the constructor function itself; instead, it's the prototype that new objects</span>\n<span class=\"token comment\">// are given when they're created with that constructor and the new keyword.</span>\n<span class=\"token class-name\">MyConstructor</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">myNumber</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getMyNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myNewObj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyNewObj2<span class=\"token punctuation\">.</span><span class=\"token function\">getMyNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 5</span>\nmyNewObj2<span class=\"token punctuation\">.</span>myNumber <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nmyNewObj2<span class=\"token punctuation\">.</span><span class=\"token function\">getMyNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 6</span>\n\n<span class=\"token comment\">// Built-in types like strings and numbers also have constructors that create</span>\n<span class=\"token comment\">// equivalent wrapper objects.</span>\n<span class=\"token keyword\">var</span> myNumber <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myNumberObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyNumber <span class=\"token operator\">==</span> myNumberObj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span>\n\n<span class=\"token comment\">// Except, they aren't exactly equivalent.</span>\n<span class=\"token keyword\">typeof</span> myNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 'number'</span>\n<span class=\"token keyword\">typeof</span> myNumberObj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 'object'</span>\nmyNumber <span class=\"token operator\">===</span> myNumberObj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This code won't execute, because 0 is falsy.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// This code will execute, because wrapped numbers are objects, and objects</span>\n   <span class=\"token comment\">// are always truthy.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// However, the wrapper objects and the regular builtins share a prototype, so</span>\n<span class=\"token comment\">// you can actually add functionality to a string, for instance.</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">firstCharacter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">firstCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = \"a\"</span>\n\n<span class=\"token comment\">// This fact is often used in \"polyfilling\", which is implementing newer</span>\n<span class=\"token comment\">// features of JavaScript in an older subset of JavaScript, so that they can be</span>\n<span class=\"token comment\">// used in older environments such as outdated browsers.</span>\n\n<span class=\"token comment\">// For instance, we mentioned that Object.create isn't yet available in all</span>\n<span class=\"token comment\">// implementations, but we can still use it with this polyfill:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>create <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// don't overwrite it if it exists</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">proto</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// make a temporary constructor with the right prototype</span>\n        <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Constructor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// then use it to create a new, appropriately-prototyped object</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * GLOBAL OBJECTS > OBJECT\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n * ******************************************************************************************* */</span>\n\n<span class=\"token comment\">// Global object: properties</span>\nObject<span class=\"token punctuation\">.</span>length                                        <span class=\"token comment\">// length is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number does not include the rest parameter. Has a value of 1.</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype                                     <span class=\"token comment\">// Represents the Object prototype object and allows to add new properties and methods to all objects of type Object.</span>\n\n<span class=\"token comment\">// Methods of the Object constructor</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// Copies the values of all enumerable own properties from one or more source objects to a target object. method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>MyObject<span class=\"token punctuation\">)</span>                              <span class=\"token comment\">// Creates a new object with the specified prototype object and properties. The object which should be the prototype of the newly-created object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// Adds the named property described by a given descriptor to an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>                  <span class=\"token comment\">// Adds the named properties described by the given descriptors to an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                  <span class=\"token comment\">// Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                   <span class=\"token comment\">// Freezes an object: other code can't delete or change any properties.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Returns a property descriptor for a named property on an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                <span class=\"token comment\">// Returns an object containing all own property descriptors for an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                      <span class=\"token comment\">// Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// Returns an array of all symbol properties found directly upon a given object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                           <span class=\"token comment\">// Returns the prototype of the specified object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// Compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                             <span class=\"token comment\">// Determines if extending of an object is allowed.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">// Determines if an object was frozen.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">// Determines if an object is sealed.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// Returns an array containing the names of all of the given object's own enumerable string properties.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                        <span class=\"token comment\">// Prevents any extensions of an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// Prevents other code from deleting properties of an object.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prototype<span class=\"token punctuation\">)</span>                <span class=\"token comment\">// Sets the prototype (i.e., the internal [[Prototype]] property).</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                   <span class=\"token comment\">// Returns an array containing the values that correspond to all of a given object's own enumerable string properties.</span>\n\n<span class=\"token comment\">// Object instances and Object prototype object (Object.prototype.property or Object.prototype.method())</span>\n<span class=\"token comment\">// Properties</span>\nobj<span class=\"token punctuation\">.</span>constructor                                      <span class=\"token comment\">// Specifies the function that creates an object's prototype.</span>\nobj<span class=\"token punctuation\">.</span>__proto__                                        <span class=\"token comment\">// Points to the object which was used as prototype when the object was instantiated.</span>\n\n<span class=\"token comment\">// Methods</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span>                             <span class=\"token comment\">// Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.</span>\nprototypeObj<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set.</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">// Calls toString().</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                       <span class=\"token comment\">// Returns a string representation of the object.</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// Returns the primitive value of the specified object.</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * GLOBAL OBJECTS > ARRAY\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n * ******************************************************************************************* */</span>\n\n<span class=\"token comment\">// Global object: properties</span>\nArray<span class=\"token punctuation\">.</span>length                                         <span class=\"token comment\">// Reflects the number of elements in an array.</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype                                      <span class=\"token comment\">// Represents the prototype for the Array constructor and allows to add new properties and methods to all Array objects.</span>\n\n<span class=\"token comment\">// Global object: methods</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> mapFn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// Creates a new Array instance from an array-like or iterable object.</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>                                   <span class=\"token comment\">// Returns true if a variable is an array, if not false.</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>element0<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> element1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> elementN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.</span>\n\n<span class=\"token comment\">// Instance: properties</span>\narr<span class=\"token punctuation\">.</span>length                                           <span class=\"token comment\">// Reflects the number of elements in an array.</span>\n\n<span class=\"token comment\">// Instance: mutator methods</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// Copies a sequence of array elements within the array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>                          <span class=\"token comment\">// Fills all the elements of an array from a start index to an end index with a static value.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                            <span class=\"token comment\">// Removes the last element from an array and returns that element.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>element1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> elementN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// Adds one or more elements to the end of an array and returns the new length of the array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                        <span class=\"token comment\">// Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                          <span class=\"token comment\">// Removes the first element from an array and returns that element.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                           <span class=\"token comment\">// Sorts the elements of an array in place and returns the array.</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">,</span> item1<span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Adds and/or removes elements from an array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>element1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> elementN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Adds one or more elements to the front of an array and returns the new length of the array.</span>\n\n<span class=\"token comment\">// Instance: accessor methods</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> valueN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// Returns a new array comprised of this array joined with other array(s) and/or value(s).</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span>               <span class=\"token comment\">// Determines whether an array contains a certain element, returning true or false as appropriate.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span>                                  <span class=\"token comment\">// Joins all elements of an array into a string.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span>            <span class=\"token comment\">// Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>                                <span class=\"token comment\">// Extracts a section of an array and returns a new array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                       <span class=\"token comment\">// Returns a string representing the array and its elements. Overrides the Object.prototype.toString() method.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span>locales<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// Returns a localized string representing the array and its elements. Overrides the Object.prototype.toLocaleString() method.</span>\n\n<span class=\"token comment\">// Instance: iteration methods</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                        <span class=\"token comment\">// Returns a new Array Iterator object that contains the key/value pairs for each index in the array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// Returns true if every element in this array satisfies the provided testing function.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">// Creates a new array with all of the elements of this array for which the provided filtering function returns true.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                        <span class=\"token comment\">// Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">// Calls a function for each element in the array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                           <span class=\"token comment\">// Returns a new Array Iterator that contains the keys for each index in the array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// Creates a new array with the results of calling a provided function on every element in this array.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// Returns true if at least one element in this array satisfies the provided testing function.</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                         <span class=\"token comment\">// Returns a new Array Iterator object that contains the values for each index in the array.</span></code></pre></div>\n</details>\n<hr>\n<h1>Fundamental Javascript Concepts You Should Understand</h1>\n<p>Plain Old JS Object Lesson Concepts</p>\n<hr>\n<h3>Fundamental Javascript Concepts You Should Understand</h3>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*bEuahctJRS_qCQgV.jpg\" class=\"graf-image\" />\n</figure>- <span id=\"d911\">Label variables as either Primitive vs. Reference</span>\n- <span id=\"42a0\">primitives: strings, booleans, numbers, null and undefined</span>\n- <span id=\"4423\">primitives are immutable</span>\n- <span id=\"fd1a\">refereces: objects (including arrays)</span>\n- <span id=\"d581\">references are mutable</span>\n- <span id=\"65e2\">Identify when to use `.` vs `[]` when accessing values of an object</span>\n- <span id=\"eb9d\">dot syntax `object.key`</span>\n- <span id=\"8e03\">easier to read</span>\n- <span id=\"1662\">easier to write</span>\n- <span id=\"5796\">cannot use variables as keys</span>\n- <span id=\"588a\">keys cannot begin with a number</span>\n- <span id=\"5501\">bracket notation `object[\"key]`</span>\n- <span id=\"5734\">allows variables as keys</span>\n- <span id=\"76ca\">strings that start with numbers can be use as keys</span>\n- <span id=\"822a\">Write an object literal with a variable key using interpolation</span>\n<h4>put it in brackets to access the value of the variable, rather than just make the value that string</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a = \"b\";\n    let obj = {\n        a: \"letter_a\",\n        [a]: \"letter b\"\n    }</code></pre></div>\n<ul>\n<li><span id=\"e4fc\">Use the <code class=\"language-text\">obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</span></li>\n<li><span id=\"0baa\">can also use <code class=\"language-text\">(key in object)</code> syntax interchangeably (returns a boolean)</span></li>\n<li><span id=\"ad4c\">Utilize Object.keys and Object.values in a function</span></li>\n<li><span id=\"b548\"><code class=\"language-text\">Object.keys(obj)</code> returns an array of all the keys in <code class=\"language-text\">obj</code></span></li>\n<li><span id=\"f39b\"><code class=\"language-text\">Object.values(obj)</code> returns an array of the values in <code class=\"language-text\">obj</code></span></li>\n</ul>\n<h4>Iterate through an object using a <code class=\"language-text\">for in</code> loop</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let printValues = function(obj) {\n      for (let key in obj) {\n          let value = obj[key];\n          console.log(value);\n      }\n  }</code></pre></div>\n<h4>Define a function that utilizes <code class=\"language-text\">...rest</code> syntax to accept an arbitrary number of arguments</h4>\n<ul>\n<li><span id=\"58a5\"><code class=\"language-text\">...rest</code> syntax will store all additional arguments in an array</span></li>\n<li><span id=\"5f8b\">array will be empty if there are no additional arguments</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myFunction = function(str, ...strs) {\n        console.log(\"The first string is \" + str);\n        console.log(\"The rest of the strings are:\");\n        strs.forEach(function(str) {\n            console.log(str);\n        })\n    }</code></pre></div>\n<h4>Use <code class=\"language-text\">...spread</code> syntax for Object literals and Array literals</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let arr1 = [\"a\", \"b\", \"c\"];\n  let longer = [...arr1, \"d\", \"e\"]; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  // without spread syntax, this would give you a nested array\n  let withoutRest = [arr1, \"d\", \"e\"] // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]</code></pre></div>\n<ul>\n<li><span id=\"118b\">Destructure an array to reference specific elements</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let array = [35, 9];\n\nlet [firstEl, secondEl] = array;\n\nconsole.log(firstEl); // => 35\n\nconsole.log(secondEl); // => 9\n\n// can also destructure using … syntax let array = [35, 9, 14]; let [head, …tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]\n\n-Destructure an object to reference specific values\n    -\n    if you want to use variable names that don 't match the keys, you can use aliasing -\n    `let { oldkeyname: newkeyname } = object` -\n    rule of thumb— only destructure values from objects that are two levels deep ``\n`javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash</code></pre></div>\n<h4>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//\n  let elementCounts = function(array) {\n      let obj = {};\n      array.forEach(function(el) {\n          if (el in obj) obj[el] += 1;\n          else obj[el] = 1;\n      })\n      return obj;\n  }\n  console.log(elementCounts([\"e\", \"f\", \"g\", \"f\"])); // => Object {e: 1, f: 2, g: 1}</code></pre></div>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li><span id=\"a16e\">Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</span></li>\n<li><span id=\"0d89\">they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</span></li>\n<li><span id=\"e458\">supports same basic operations as other types (strings, bools, numbers)</span></li>\n<li><span id=\"6af2\">higher-order functions take functions as arguments or return functions as values</span></li>\n<li><span id=\"adbe\">Given a code snippet containing an anonymous callback, a named callback, and multiple <code class=\"language-text\">console.log</code>s, predict what will be printed</span></li>\n<li><span id=\"e93b\">what is this referring to?</span></li>\n<li><span id=\"c73f\">Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let greaterCB = function(val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n}\n\nlet greaterCB = function(val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n}</code></pre></div>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-Write a\nfunction, myMap, that takes in an array and a callback as arguments.The\nfunction should mimic the behavior of `Array#map`.\n``\n`javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &lt; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];</code></pre></div>\n<h4>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code class=\"language-text\">Array#filter</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myFilter = function(array, callback) {\n      let filtered = [];\n      for (let i = 0; i &lt; array.length; i++) {\n          if (callback(array[i])) {\n              filtered.push(array[i], i, array);\n          }\n      }\n  }</code></pre></div>\n<h4>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code class=\"language-text\">Array#every</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myEvery = function(array, callback) {\n      for (let i = 0; i &lt; array.length; i++) {\n          if (!callback(array[i], i, array)) {\n              return false\n          }\n      }\n      return true;\n  }\n  // with arrow function syntax\n  let myEvery = (array, callback) => {\n      for (let i = 0; i &lt; array.length; i++) {\n          if (!callback(array[i])) {\n              return false\n          }\n      }\n      return true;\n  }</code></pre></div>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li><span id=\"685f\">Identify the difference between <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code>, and <code class=\"language-text\">var</code> declarations</span></li>\n<li><span id=\"7308\"><code class=\"language-text\">const</code> - cannot reassign variable, scoped to block</span></li>\n<li><span id=\"e07f\"><code class=\"language-text\">let</code> - can reassign variable, scoped to block</span></li>\n<li><span id=\"670d\"><code class=\"language-text\">var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</span></li>\n<li><span id=\"b254\">a variable will always evaluate to the value it contains regardless of how it was declared</span></li>\n<li><span id=\"aace\">Explain the difference between <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code>, and <code class=\"language-text\">var</code> declarations</span></li>\n<li><span id=\"5d79\"><code class=\"language-text\">var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</span></li>\n<li><span id=\"a54b\">so it will exist in memory as \"undefined\" which is bad and unpredictable</span></li>\n<li><span id=\"2dc2\"><code class=\"language-text\">var</code> will also allow you to redeclare a variable, while <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code> will raise a syntax error. you shouldn't be able to do that!</span></li>\n<li><span id=\"1f74\"><code class=\"language-text\">const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</span></li>\n<li><span id=\"2c20\">block-scoped variables allow new variables with the same name in new scopes</span></li>\n<li><span id=\"c3d4\">block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code class=\"language-text\">undefined</code> like <code class=\"language-text\">var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</span></li>\n<li><span id=\"f797\">if you do not use <code class=\"language-text\">var</code> or <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code> when initializing, it will be declared as global—THIS IS BAD</span></li>\n<li><span id=\"2212\">if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</span></li>\n<li><span id=\"86d1\">Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</span></li>\n<li><span id=\"25dc\">scope of a program means the set of variables that are available for use within the program</span></li>\n<li><span id=\"bcaf\">global scope is represented by the <code class=\"language-text\">window</code> object in the browser and the <code class=\"language-text\">global</code> object in Node.js</span></li>\n<li><span id=\"7bc3\">global variables are available everywhere, and so increase the risk of name collisions</span></li>\n<li><span id=\"5172\">local scope is the set of variables available for use within the function</span></li>\n<li><span id=\"ed33\">when we enter a function, we enter a new scope</span></li>\n<li><span id=\"c21b\">includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</span></li>\n<li><span id=\"51ad\">for blocks (denoted by curly braces <code class=\"language-text\">{}</code>, as in conditionals or <code class=\"language-text\">for</code> loops), variables can be block scoped</span></li>\n<li><span id=\"09f1\">inner scope does not have access to variables in the outer scope</span></li>\n<li><span id=\"587e\">scope chaining — if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</span></li>\n<li><span id=\"6ea5\">so an inner scope can access outer scope variables</span></li>\n<li><span id=\"5188\">but an outer scope can never access inner scope variables</span></li>\n</ul>\n<h4>Define an arrow function</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let arrowFunction = (param1, param2) => {\n\nlet sum = param1 + param2;\n\nreturn sum;\n\n}\n\n// with 1 param you can remove parens around parameters let arrowFunction = param =>\n\n// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;\n\n// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</code></pre></div>\n<h4>Given an arrow function, deduce the value of <code class=\"language-text\">this</code> without executing the code</h4>\n<ul>\n<li><span id=\"0ee6\">arrow functions are automatically bound to the context they were declared in.</span></li>\n<li><span id=\"9fb2\">unlike regular function which use the context they are invoked in (unless they have been bound using <code class=\"language-text\">Function#bind</code>).</span></li>\n<li><span id=\"683a\">if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context.</span></li>\n<li><span id=\"e9e1\">so you can't use an arrow function to define a method directly</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {\nname: \"my object\",\nunboundFunc: function () {\n\nreturn this.name;\n\n// this function will be able to be called on different objects\n\n},\nboundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },\n\nmakeFuncBoundToObj: function() {\n        return () => {\n            return this.name;\n        }\n        // this function will return a function that will be bound\n        // to the object where we call the outer method\n        // because the arrow syntax is nested inside one of this\n        // function's methods, it cannot be rebound\n    },\n\n    makeUnboundFunc: function() {\n        return function() {\n            return this.name;\n        }\n        //this function will return a function that will still be unbound\n    },\n\n    immediatelyInvokedFunc: function() {\n        return this.name;\n    }(), // this property will be set to the return value of this anonymous function,\n    // which is invoked during the object definition;\n    // basically, it's a way to check the context inside of an object, at this moment\n\n    innerObj: {\n        name: \"inner object\",\n        innerArrowFunc: () => {\n            return this.name;\n        } // the context inside a nested object is not the parent, it's still\n        // the global object. entering an object definition doesn't change the context\n    },\n\n    let otherObj = {\n        name: \"my other object\"\n    }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n\n}\n\n-Implement a closure and explain how the closure effects scope\n    -\n    a closure is \"the combination of a function and the lexical environment within which that function was declared\" -\n    alternatively, \"when an inner function uses or changes variables in an outer function\" -\n    closures have access to any variables within their own scope + scope of outer functions + global scope— the set of all these available variables is \"lexical environemnt\" -\n    closure keeps reference to all variables ** even\nif the outer\nfunction has returned **\n    -each\nfunction has a private mutable state that cannot be accessed externally\n    -\n    the inner\nfunction will maintain a reference to the scope in which it was declared.so it has access to variables that were initialized in any outer scope— even\nif that scope\n    -\n    if a variable exists in the scope of what could have been accessed by a\nfunction(e.g.global scope, outer\n    function, etc), does that variable wind up in the closure even\nif it never got accessed ?\n    -\n    if you change the value of a variable(e.g.i++) you will change the value of that variable in the scope that it was declared in\n\n    ``\n`javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());</code></pre></div>\n<h4>Define a method that references <code class=\"language-text\">this</code> on an object literal</h4>\n<ul>\n<li><span id=\"ae61\">when we use <code class=\"language-text\">this</code> in a method it refers to the object that the method is invoked on</span></li>\n<li><span id=\"29a2\">it will let you access other pieces of information from within that object, or even other methods</span></li>\n<li><span id=\"c41d\">method style invocation — <code class=\"language-text\">object.method(args)</code> (e.g. built in examples like <code class=\"language-text\">Array#push</code>, or <code class=\"language-text\">String#toUpperCase</code>)</span></li>\n<li><span id=\"c99d\">context is set every time we invoke a function</span></li>\n<li><span id=\"fa43\">function style invocation sets the context to the global object no matter what</span></li>\n<li><span id=\"8cc1\">being inside an object does not make the context that object! you still have to use method-style invocation</span></li>\n<li><span id=\"f578\">Utilize the built in <code class=\"language-text\">Function#bind</code> on a callback to maintain the context of this</span></li>\n<li><span id=\"26ba\">when we call bind on a function, we get an exotic function back — so the context will always be the same for that new function</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cat = {\n  purr: function () {\n  console.log(\"meow\");\n  },\n  purrMore: function () {\n  this.purr();\n  },\n  };\n  let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n  // we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\n  boundCat(); // prints \"meow\"\n\n-`bind`\n   can also work with arguments, so you can have a version of a\n   function with particular arguments and a particular context.the first arg will be the context aka the `this`\n   you want it to use.the next arguments will be the functions arguments that you are binding -\n       if you just want to bind it to those arguments in particular, you can use `null`\n   as the first argument, so the context won 't be bound, just the arguments -\n       Given a code snippet, identify what `this`\n   refers to\n       -\n       important to recognize the difference between scope and context -\n       scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope(which itself has pointers to new scopes until you reach the global scope.so you can think about a whole given block 's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it) -\n           context refers to the value of the `this`\n           keyword -\n           the keyword `this`\n           exists in every\n           function and it evaluates to the object that is currently invoking that\n           function -so the context is fairly straightforward when we talk about methods being called on specific objects -\n           you could, however, call an object 's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n           ``\n           `javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}</code></pre></div>\n<h3>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP</h3>\n<ul>\n<li><span id=\"b960\">could throw an error if it expects this to have some other method or whatever that doesn't exist</span></li>\n<li><span id=\"1880\">you could also overwrite values or assign values to exist in a space where they should not exist</span></li>\n<li><span id=\"c9f0\">if you call a function as a callback, it will set <code class=\"language-text\">this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</span></li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cat = {\n  purr: function () {\n  console.log(\"meow\");\n  },\n  purrMore: function () {\n  this.purr();\n  },\n  };\n  global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</code></pre></div>\n<p>we can use strict mode with <code class=\"language-text\">\"use strict\";</code> this will prevent you from accessing the global object with <code class=\"language-text\">this</code> in functions, so if you try to call <code class=\"language-text\">this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n// we can use the built in Function.bind to ensure our context, our this , // is the cat object let boundCat = sayMeow.bind(cat);\n\nboundCat(); // prints \"meow\"\n\n-`bind`\n   can also work with arguments, so you can have a version of a\n   function with particular arguments and a particular context.the first arg will be the context aka the `this`\n   you want it to use.the next arguments will be the functions arguments that you are binding -\n       if you just want to bind it to those arguments in particular, you can use `null`\n   as the first argument, so the context won 't be bound, just the arguments -\n       Given a code snippet, identify what `this`\n   refers to\n       -\n       important to recognize the difference between scope and context -\n       scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope(which itself has pointers to new scopes until you reach the global scope.so you can think about a whole given block 's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it) -\n           context refers to the value of the `this`\n           keyword -\n           the keyword `this`\n           exists in every\n           function and it evaluates to the object that is currently invoking that\n           function -so the context is fairly straightforward when we talk about methods being called on specific objects -\n           you could, however, call an object 's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n           ``\n           `javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}</code></pre></div>\n<ul>\n<li><span id=\"48ab\">CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</span></li>\n<li><span id=\"857d\">could throw an error if it expects this to have some other method or whatever that doesn't exist</span></li>\n<li><span id=\"e09e\">you could also overwrite values or assign values to exist in a space where they should not exist</span></li>\n<li><span id=\"b6e0\">if you call a function as a callback, it will set <code class=\"language-text\">this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</span></li>\n</ul>\n<blockquote>\n<p>we can use strict mode with <code class=\"language-text\">\"use strict\";</code> this will prevent you from accessing the global object with <code class=\"language-text\">this</code> in functions, so if you try to call <code class=\"language-text\">this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n</blockquote>"}