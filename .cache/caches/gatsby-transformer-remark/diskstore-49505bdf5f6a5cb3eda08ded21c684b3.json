{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-97b41225c90be83310e886fb6aa4be1a-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\">19. Remove Nth Node From End of List</a></h2>\n<h3>Problem:</h3>\n<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Given linked list: 1->2->3->4->5, and n = 2.\n\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.</code></pre></div>\n<p><strong>Note:</strong></p>\n<p>Given <em>n</em> will always be valid.</p>\n<p><strong>Follow up:</strong></p>\n<p>Could you do this in one pass?</p>\n<h3>Solution:</h3>\n<p>Set a pointer <code class=\"language-text\">p1</code> for iterating, and <code class=\"language-text\">p2</code> which is <code class=\"language-text\">n</code> nodes behind, pointing at the (n+1)-th node from the end of list.</p>\n<p>Boundaries that should be awared of:</p>\n<ul>\n<li><code class=\"language-text\">p2</code> could be one node before <code class=\"language-text\">head</code>, which means the <code class=\"language-text\">head</code> should be removed.</li>\n<li><code class=\"language-text\">p2</code> could be larger than the length of the list (Though the description says <code class=\"language-text\">n</code> will always be valid, we take care of it anyway).</li>\n<li>It should be <code class=\"language-text\">p1.next</code> touches the end rather than <code class=\"language-text\">p1</code> because we want <code class=\"language-text\">p1</code> pointing at the last node.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"token comment\">/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">removeNthFromEnd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">?</span> head <span class=\"token operator\">:</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}