{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-d154d498bcbe110ae6ad8fb4b0f79851-gatsby-remark-prismjs-","val":"<h2><strong>Constructor Functions</strong></h2>\n<p><strong>Defining a constructor function</strong>\n<em>Example of an object using object initialiation</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> fellowshipOfTheRing <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'The Fellowship of the Ring'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">series</span><span class=\"token operator\">:</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">'J.R.R. Tolkien'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>The above literal is a \"Book\" object type.</li>\n<li>\n<p><strong><code class=\"language-text\">Object Type</code></strong> is defined by it's attributes and behaviors.</p>\n<ul>\n<li><strong><code class=\"language-text\">Behaviors</code></strong> are represented by methods.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Constructor Functions</code></strong> : Handle the creation of an object - it's a factory for creating objects of a specific type.</p>\n<ul>\n<li>\n<p>There are a few specific things to constructors worth noting:</p>\n<ul>\n<li><strong>The name of the constructor function is capitalized</strong></li>\n<li><strong>The Function does not explicityly return a value</strong></li>\n<li><strong>Within the body, the <em>this</em> keyword references the newly created object</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><strong>Invoking a constructor function</strong></h2>\n<ul>\n<li>We can invoke a constructor function using the <strong><code class=\"language-text\">new</code></strong> keyword.</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fellowshipOfTheRing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fellowship of the Ring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Book { title: 'The Fellowship of the Ring', ... }</span></code></pre></div>\n<ul>\n<li>\n<p><em>Four Things will happen when invoking a constructor function</em></p>\n<ol>\n<li>A new empty object is created {};</li>\n<li>The new obj's <strong><code class=\"language-text\">prototype</code></strong> is set to the object referenced by the constructors prototype property.</li>\n<li><strong><code class=\"language-text\">This</code></strong> is bound to the new object.</li>\n<li>The new object is returned after the constructor function has completed.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Understanding New Object Instances</strong></p>\n<ul>\n<li><strong><code class=\"language-text\">Instance</code></strong> : term to describe an objected created from a constructor function.</li>\n<li>Every instance created is a unique object and therefore not equal to each other.</li>\n</ul>\n<p><strong>Using the instanceof operator to check an object's type</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p>By using the <code class=\"language-text\">instanceof</code> operator we can verify that an object was created from a certain object type.</p>\n<ul>\n<li><em>The instanceOf operator works by checking to see if the prototype object of the left side of the operator is the same as the prototype object of the right side of the operator.</em></li>\n</ul>\n</li>\n</ul>\n<p><strong>Invoking a constructor function without the new keyword</strong></p>\n<ul>\n<li>\n<p>If we invoke a constructor function without the <strong><code class=\"language-text\">new</code></strong> keyword, we may result in one of two unexpected outcomes:</p>\n<ol>\n<li>In <strong>non-strict</strong> mode, this will be bound to the <strong>global object</strong> instead.</li>\n<li>\n<p>In <strong><code class=\"language-text\">strict</code></strong> mode, this will become undefined.</p>\n<ul>\n<li>You can enable strict mode by typing <code class=\"language-text\">\"use strict\"</code> at the top of your file.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>Defining Sharable Methods</strong></p>\n<ul>\n<li><em>Avoid the temptation to store an object method inside a constructor function, it is inefficient with computer memory usage b/c each object instance would have it's own method definition.</em></li>\n<li>\n<p><strong><code class=\"language-text\">Prototype</code></strong> : An object that is delegated to when a reference to an object property or method can't be resolved.</p>\n<ul>\n<li>Every instance created by a constructor function shares the same prototype.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Object.setPrototypeOf()</code></strong> and <strong><code class=\"language-text\">Object.getPrototypeOf()</code></strong> are just used to set a prototype of one object to another object; and also the verify a prototype.</p>\n<ul>\n<li><strong><code class=\"language-text\">proto</code></strong> : aka \"dunder proto\" is a property used to gain easy access to an object's prototype - it is widely supported by browsers but is considered deprecated.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Any method defined on the `Book.prototype` property</span>\n<span class=\"token comment\">// will be shared across all `Book` instances.</span>\n<span class=\"token class-name\">Book</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInformation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fellowshipOfTheRing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fellowship of the Ring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Every method we define on a constructor function's prototype property will be shared across all instances of that object type.</li>\n</ul>\n<p><strong>The Problem with Arrow Functions</strong></p>\n<ul>\n<li>\n<p>We <strong>cannot</strong> use arrow functions when defining methods on a constructor function's prototype property.</p>\n<ul>\n<li>Arrow functions don't include their own <strong>this</strong> binding; therefore it will not reference the current instance - always stick with the function () keyword.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><strong>Putting the Class in Javascript Classes</strong></h2>\n<p>In ES2015, JS gained the <strong><code class=\"language-text\">class</code></strong> keyword - replacing the need to use only constructor functions &#x26; prototypes to mimic classes!</p>\n<ul>\n<li><strong><code class=\"language-text\">class</code></strong> : keyword that gives developers a formal way to create a class definition to specify an object type's attributes and behavior; also used to create objects of that specific type.</li>\n</ul>\n<p><strong>Defining a ES2015 class</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Class names also begin only with capital letters.</li>\n<li>\n<p>Although not required, class definitions can include a <strong><code class=\"language-text\">class constructor function</code></strong> - these are similar to regular constructors in that:</p>\n<ul>\n<li>They don't explicitly return a value.</li>\n<li>The <strong>this</strong> keyword references the newly created object instance.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Instantiating an instance of a class</strong></p>\n<ul>\n<li>\n<p>We can also use the <strong><code class=\"language-text\">new</code></strong>.</p>\n<ul>\n<li>Four things occur when instantiating an instance of a class:</li>\n<li>New empty object is created {};</li>\n<li>The new obj's prototype is set to the class prototype's property value.</li>\n<li><strong><code class=\"language-text\">This</code></strong> is bound to the new object.</li>\n<li>After the constructor method has completed, the new obj is returned.</li>\n</ul>\n</li>\n<li>Don't try to instatiate a class object without the <strong>new</strong> keyword.</li>\n</ul>\n<p><strong>Class Definitions are NOT hoisted</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This works!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>In JS you can call a function before it's declared - this is known as <strong><code class=\"language-text\">hoisting</code></strong>.</li>\n<li>Class defs are NOT hoisted, so just get in the habit of declaring them <strong>before</strong> you use them.</li>\n</ul>\n<p><strong>Defining Methods</strong></p>\n<ul>\n<li>A class can contain two types of methods:</li>\n<li></li>\n<li>\n<p><strong><code class=\"language-text\">Instance Method</code></strong> : Methods that are invoked on an instance of the class - useful for performing an action on a specific instance.</p>\n<ul>\n<li>Instance methods are also sometimes referred to as <strong><code class=\"language-text\">prototype</code></strong> methods because they are defined on a shared prototype object.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Static Method</code></strong> : Methods that invoked directly on a class, not on an instance.</p>\n<ul>\n<li><code class=\"language-text\">Important</code>: Invoking a static method on an instance will result in a runtime error.</li>\n<li>Prepending the <strong><code class=\"language-text\">static</code></strong> keyword at the beginning on the method name will make it static.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Notice the use of a rest parameter (...books)</span>\n    <span class=\"token comment\">// to capture the passed parameters as an array of values.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">getTitles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>books</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">book</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fellowshipOfTheRing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fellowship of the Ring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> theTwoTowers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Two Towers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> bookTitles <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span><span class=\"token function\">getTitles</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing<span class=\"token punctuation\">,</span> theTwoTowers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bookTitles<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Fellowship of the Ring, The Two Towers</span></code></pre></div>\n<ul>\n<li>If we go back to an example of how constructor functions also use static methods - we see that static methods are <em>defined directly on the constructor function</em> - whereas instance methods need to be defined on the <em>prototype</em> object.</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Static methods are defined</span>\n<span class=\"token comment\">// directly on the constructor function.</span>\nBook<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTitles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>books</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">book</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Instance methods are defined</span>\n<span class=\"token comment\">// on the constructor function's `prototype` property.</span>\n<span class=\"token class-name\">Book</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInformation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fellowshipOfTheRing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fellowship of the Ring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> theTwoTowers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Two Towers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Lord of the Rings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.R.R. Tolkien'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Fellowship of the Ring by J.R.R. Tolkien</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>theTwoTowers<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Two Towers by J.R.R. Tolkien</span>\n\n<span class=\"token comment\">// Call the static `Book.getTitles()` method</span>\n<span class=\"token comment\">// to get an array of the book titles.</span>\n<span class=\"token keyword\">const</span> bookTitles <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span><span class=\"token function\">getTitles</span><span class=\"token punctuation\">(</span>fellowshipOfTheRing<span class=\"token punctuation\">,</span> theTwoTowers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bookTitles<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Fellowship of the Ring, The Two Towers</span></code></pre></div>\n<p><strong>Comparing Classes to Constructor Functions</strong></p>\n<blockquote>\n<p>ES2015 Classes are essentially syntactic sugar over traditional constructor functions and prototypes.</p>\n</blockquote>\n<hr>\n<h2><strong>Javascript Inheritance</strong></h2>\n<ul>\n<li><strong><code class=\"language-text\">Child Class</code></strong> : Class that is based upon another class and inherits properties and methods from that other class.</li>\n<li><strong><code class=\"language-text\">Parent Class</code></strong> : Class that is being inherited downwards.</li>\n<li><strong><code class=\"language-text\">Inheritance</code></strong> : The process of basing a class upon another class.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogItem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series <span class=\"token operator\">=</span> series<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>series<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CatalogItem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CatalogItem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> director</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>director <span class=\"token operator\">=</span> director<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> theGrapesOfWrath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Grapes of Wrath'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John Steinbeck'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> aNewHope <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Episode 4: A New Hope'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Star Wars'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'George Lucas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>theGrapesOfWrath<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Grapes of Wrath</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aNewHope<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Episode 4: A New Hope (Star Wars)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Catalogitem <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p>A <strong><code class=\"language-text\">prototype chain</code></strong> defines a series of prototype objects that are delegated to one by one, when a property or method can't be found on an instance object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>theGrapesOfWrath<span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The Grapes of Wrath</span></code></pre></div>\n<p>When the <code class=\"language-text\">getInformation()</code> method is invoked:</p>\n<ul>\n<li>JS looks for get() on the current object.</li>\n<li>If it isn't found, the method call is delegated to the object's prototype.</li>\n<li>It continues up the prototype chain until the method is found.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Overriding a method in a parent class</strong></p>\n<ul>\n<li><strong><code class=\"language-text\">Method Overriding</code></strong> : when a child class provides an implementation of a method that's already defined in a parent class.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CatalogItem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">,</span> director</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> series<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>director <span class=\"token operator\">=</span> director<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>director<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> [directed by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>director<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>We can simply declare our own method of the same name in our child class to override our parent's version of <code class=\"language-text\">getInformation()</code></li>\n</ul>\n<hr>\n<h2><strong>Javascript Modules</strong></h2>\n<p><strong>Introducing Node.js modules</strong></p>\n<ul>\n<li>In Node.js, each JS file in a project defines a <strong><code class=\"language-text\">module</code></strong>.</li>\n<li>Module's contents are private by default.</li>\n<li><strong><code class=\"language-text\">Local Modules</code></strong> : Modules defined within your project.</li>\n<li><strong><code class=\"language-text\">Core Modules</code></strong> : Native modules contained within Node.js that you can use to perform tasks or to add functionality to your application.</li>\n<li><strong><code class=\"language-text\">CommonJS</code></strong> : A legacy module system.</li>\n<li><strong><code class=\"language-text\">ES Modules</code></strong> : Newer module sysem that will eventually replace CommonJS.</li>\n<li><strong><code class=\"language-text\">Entry Point</code></strong> : JS File that is passed to Node for access to the entire application.</li>\n<li>\n<p>Syntax for exporting modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>Book <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>Movie <span class=\"token operator\">=</span> Movie<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Book<span class=\"token punctuation\">,</span>\n    Movie\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Syntax for importing modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./classes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Book<span class=\"token punctuation\">,</span> Movie <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./classes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Using Single Item Modules</strong></p>\n<blockquote>\n<p>Following the convention of a single exported item per module helps to keep modules focused and less likely to become bloted with too much code.</p>\n</blockquote>\n<p><strong>Understanding Module Loading</strong></p>\n<ul>\n<li>\n<p>When loading a module, Node will examine the identifier passed to the require() function to determine if our module is local, core, or third-party:</p>\n<ul>\n<li><strong><code class=\"language-text\">Local Module</code></strong>: identifier starts with ./ ../ or /</li>\n<li><strong><code class=\"language-text\">Node.js Core</code></strong>: identifier matches name</li>\n<li><strong><code class=\"language-text\">Third-Party</code></strong>: identifier matches a module in the node modules folder (installed package)</li>\n</ul>\n</li>\n</ul>\n<hr>\n</li>\n</ul>"}