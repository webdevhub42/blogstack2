{"expireTime":9007200911870456000,"key":"transformer-remark-markdown-html-1a328cd781aca971afaf6370302463b3-gatsby-remark-prismjs-","val":"<h1>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</h1>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*yjlSk3T9c2_14in1.png\"></p>\n<iframe style=\"resize:both; overflow:scroll;\"  sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    frameborder=\"0\" width=\"100%\" height=\"500px\" src=\"https://replit.com/@bgoonz/Medium-article-comp-complex?lite=true\">\n</iframe>\n<br>\n<ul>\n<li>Why is looking at runtime not a reliable method of calculating time complexity?</li>\n<li>Not all computers are made equal( some may be stronger and therefore boost our runtime speed )</li>\n<li>How many background processes ran concurrently with our program that was being tested?</li>\n<li>We also need to ask if our code remains performant if we increase the size of the input.</li>\n<li>\n<p>The real question we need to answering is: <code class=\"language-text\">How does our performance scale?</code>.</p>\n<iframe style=\"resize:both; overflow:scroll;\"  sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://codepen.io/bgoonz/embed/preview/RwKYRoo?height=600&amp;slug-hash=RwKYRoo&amp;default-tabs=js,result&amp;host=https://codepen.io\" width=\"100%\" height=\"500px\"  frameborder=\"0\" scrolling=\"no\">\n</iframe>\n<br>\n</li>\n</ul>\n<h3>big 'O' notation</h3>\n<ul>\n<li>Big O Notation is a tool for describing the efficiency of algorithms with respect to the size of the input arguments.</li>\n<li>Since we use mathematical functions in Big-O, there are a few big picture ideas that we'll want to keep in mind:</li>\n<li>The function should be defined by the size of the input.</li>\n<li><code class=\"language-text\">Smaller</code> Big O is better (lower time complexity)</li>\n<li>Big O is used to describe the worst case scenario.</li>\n<li>Big O is simplified to show only its most dominant mathematical term.</li>\n</ul>\n<h3>Simplifying Math Terms</h3>\n<ul>\n<li>We can use the following rules to simplify the our Big O functions:</li>\n<li><code class=\"language-text\">Simplify Products</code> : If the function is a product of many terms, we drop the terms that don't depend on n.</li>\n<li><code class=\"language-text\">Simplify Sums</code> : If the function is a sum of many terms, we drop the non-dominant terms.</li>\n<li><code class=\"language-text\">n</code> : size of the input</li>\n<li><code class=\"language-text\">T(f)</code> : unsimplified math function</li>\n<li><code class=\"language-text\">O(f)</code> : simplified math function.</li>\n</ul>\n<p><code class=\"language-text\">Putting it all together</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TT8uuv1x3nmGUw5rvtoZ8A.png\"></p>\n<ul>\n<li>First we apply the product rule to drop all constants.</li>\n<li>Then we apply the sum rule to select the single most dominant term.</li>\n</ul>\n<hr>\n<h3>Complexity Classes</h3>\n<p>Common Complexity Classes</p>\n<h4>There are 7 major classes in Time Complexity</h4>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6zKhmJoHkvDbrd8jfUDf3A.png\"></p>\n<h4><code class=\"language-text\">O(1) Constant</code></h4>\n<blockquote>\n<p><strong>The algorithm takes roughly the same number of steps for any input size.</strong></p>\n</blockquote>\n<h4><code class=\"language-text\">O(log(n)) Logarithmic</code></h4>\n<blockquote>\n<p><strong>In most cases our hidden base of Logarithmic time is 2, log complexity algorithm's will typically display 'halving' the size of the input (like binary search!)</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/a1e6dec81f0639818db7f9a8e76b3992/raw/ee8d492025cc76e76c91cb15c3c2ec29b3ffb616/logorithmic.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/a1e6dec81f0639818db7f9a8e76b3992#file-logorithmic-js\">logorithmic.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h4><code class=\"language-text\">O(n) Linear</code></h4>\n<blockquote>\n<p><strong>Linear algorithm's will access each item of the input \"once\".</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(n), where n is the length of the array</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">linear3</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/cc953ba2bd6e1d6f524a6d8b297aad5b/raw/f3b470ce20d77e52bf25d0749149c5a724099ff2/linear.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/cc953ba2bd6e1d6f524a6d8b297aad5b#file-linear-js\">linear.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3><code class=\"language-text\">O(nlog(n)) Log Linear Time</code></h3>\n<blockquote>\n<p><strong>Combination of linear and logarithmic behavior, we will see features from both classes.</strong></p>\n</blockquote>\n<blockquote>\n<p>Algorithm's that are log-linear will use** both recursion AND iteration.**</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// O(n * log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/e9bd6337c17f1623a4da088574ed0d8e/raw/7680dadbfd6dd058f4ecde2085d160019b782282/loglin.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/e9bd6337c17f1623a4da088574ed0d8e#file-loglin-js\">loglin.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3><code class=\"language-text\">O(nc) Polynomial</code></h3>\n<blockquote>\n<p><strong>C is a fixed constant.</strong>\n`</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// O(n^2)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">quadratic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Example of Quadratic and Cubic runtime.</span>\n<span class=\"token comment\">// O(n^3)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cubic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/3e6096e66bac80b962435b7d873cdbe9/raw/255fae18df5ce42945ba19f9b83f122b83a4738b/poly.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/3e6096e66bac80b962435b7d873cdbe9#file-poly-js\">poly.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3><code class=\"language-text\">O(c^n) Exponential</code></h3>\n<blockquote>\n<p><strong>C is now the number of recursive calls made in each stack frame.</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>Algorithm's with exponential time are VERY SLOW.</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// O(2^n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exponential2n</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exponential_2n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exponential_2n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(3^n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exponential_3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exponential_3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exponential_3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/5dec7e3736d7b5e28a5f1c85b5b50705/raw/68270be48d6a30bb5d889ca83ee6810813018601/exponential.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/5dec7e3736d7b5e28a5f1c85b5b50705#file-exponential-js\">exponential.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<hr>\n<h3>Memoization</h3>\n<ul>\n<li>Memoization : a design pattern used to reduce the overall number of calculations that can occur in algorithms that use recursive strategies to solve.</li>\n<li>MZ stores the results of the sub-problems in some other data structure, so that we can avoid duplicate calculations and only 'solve' each problem once.</li>\n<li>Two features that comprise memoization:</li>\n<li>FUNCTION MUST BE RECURSIVE.</li>\n<li>Our additional Data Structure is usually an object (we refer to it as our memo... or sometimes cache!)</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4U79jBMjU2wKE_tyYcD_3A.png\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Qh42KZgcCxmVt6WrTasCVw.png\"></p>\n<h3>Memoizing Factorial</h3>\n<p>Our memo object is <em>mapping</em> out our arguments of factorial to it's return value.</p>\n<ul>\n<li>Keep in mind we didn't improve the speed of our algorithm.</li>\n</ul>\n<h3>Memoizing Fibonacci</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*2XaPj7UGKZYFjYhb\"></p>\n<ul>\n<li>Our time complexity for Fibonacci goes from O(2^n) to O(n) after applying memoization.</li>\n</ul>\n<h3>The Memoization Formula</h3>\n<blockquote>\n<p><em>Rules:</em></p>\n</blockquote>\n<ol>\n<li><em>Write the unoptimized brute force recursion (make sure it works);</em></li>\n<li><em>Add memo object as an additional argument .</em></li>\n<li><em>Add a base case condition that returns the stored value if the function's argument is in the memo.</em></li>\n<li><em>Before returning the result of the recursive case, store it in the memo as a value and make the function's argument it's key.</em></li>\n</ol>\n<h4>Things to remember</h4>\n<ol>\n<li><em>When solving DP problems with Memoization, it is helpful to draw out the visual tree first.</em></li>\n<li><em>When you notice duplicate sub-tree's that means we can memoize.</em></li>\n</ol>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 8</span>\n<span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 12586269025 |</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/c15feb228a51a3543625009c8fd0b6de/raw/2c3d2998221f0b375bcece6dab8916c598ff9e03/fastfib.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/c15feb228a51a3543625009c8fd0b6de#file-fastfib-js\">fastfib.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<hr>\n<h3>Tabulation</h3>\n<h4>Tabulation Strategy</h4>\n<blockquote>\n<p>Use When:</p>\n</blockquote>\n<ul>\n<li><strong>The function is iterative and not recursive.</strong></li>\n<li><em>The accompanying DS is usually an array.</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> mostRecentCalcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mostRecentCalcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>secondLast<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mostRecentCalcs<span class=\"token punctuation\">;</span>\n   mostRecentCalcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">,</span> secondLast <span class=\"token operator\">+</span> last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> mostRecentCalcs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/a57bf449f5a8b16eedd1aa9fd71707e2/raw/9c6cff4bb301bc4f9a87ebb9c0399a8c56ccb083/tabfib.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/a57bf449f5a8b16eedd1aa9fd71707e2#file-tabfib-js\">tabfib.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h4>Steps for tabulation</h4>\n<ul>\n<li><em>Create a table array based off the size of the input.</em></li>\n<li><em>Initialize some values in the table to 'answer' the trivially small subproblem.</em></li>\n<li><em>Iterate through the array and fill in the remaining entries.</em></li>\n<li><em>Your final answer is usually the last entry in the table.</em></li>\n</ul>\n<hr>\n<h3>Memo and Tab Demo with Fibonacci</h3>\n<blockquote>\n<p><em>Normal Recursive Fibonacci</em></p>\n</blockquote>\n<p>function fibonacci(n) {<br>\nif (n &#x3C;= 2) return 1;<br>\nreturn fibonacci(n - 1) + fibonacci(n - 2);<br>\n}</p>\n<blockquote>\n<p><em>Memoization Fibonacci 1</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">fibMemo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibMemo</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibMemo</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/504a9120ca40bbb4a246549937c43a12/raw/5cb9cd921642d16ca1c86231c2387646dfad8daa/fib-memo.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/504a9120ca40bbb4a246549937c43a12#file-fib-memo-js\">fib-memo.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<blockquote>\n<p><em>Memoization Fibonacci 2</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   memo <span class=\"token operator\">=</span> memo <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/07d315d92b3458a8640cee31bce9c236/raw/3425643262eb8389ce6fe4366c4ca7803dce2968/memo-fib2.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/07d315d92b3458a8640cee31bce9c236#file-memo-fib2-js\">memo-fib2.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<blockquote>\n<p><em>Tabulated Fibonacci</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">tabFib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   table<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   table<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   table<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/b1b1f7e259193ecdc432350b6199f2d3/raw/dbaa48acf583535b11204569b7a0054bef5fe72e/tabfib.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/b1b1f7e259193ecdc432350b6199f2d3#file-tabfib-js\">tabfib.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3>Example of Linear Search</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> term</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/e98354b287ce2f80da4ab943399eb555/raw/fed7adac0a75d080573e20e62d64080c4880c867/linsearch.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/e98354b287ce2f80da4ab943399eb555#file-linsearch-js\">linsearch.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li><em>Worst Case Scenario: The term does not even exist in the array.</em></li>\n<li><em>Meaning: If it doesn't exist then our for loop would run until the end therefore making our time complexity O(n).</em></li>\n</ul>\n<hr>\n<h3>Sorting Algorithms</h3>\n<h3>Bubble Sort</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Quadratic O(n^2)</p>\n<ul>\n<li>The inner for-loop contributes to O(n), however in a worst case scenario the while loop will need to run n times before bringing all n elements to their final resting spot.</li>\n</ul>\n<p><code class=\"language-text\">Space Complexity</code>: O(1)</p>\n<ul>\n<li>Bubble Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Ck9aeGY-d5tbz7dT\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> idx1<span class=\"token punctuation\">,</span> idx2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//Alt SLN-------------------------------------------------</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> sorted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sorted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   sorted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n   sorted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6/raw/f0005f56a012a38607e194c89ff796aaad217788/bub2.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6#file-bub2-js\">bub2.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li>The first major sorting algorithm one learns in introductory programming courses.</li>\n<li>Gives an intro on how to convert unsorted data into sorted data.</li>\n</ul>\n<blockquote>\n<p>It's almost never used in production code because:</p>\n</blockquote>\n<ul>\n<li><em>It's not efficient</em></li>\n<li><em>It's not commonly used</em></li>\n<li><em>There is stigma attached to it</em></li>\n<li><code class=\"language-text\">*Bubbling Up*</code>_ : Term that infers that an item is in motion, moving in some direction, and has some final resting destination._</li>\n<li><em>Bubble sort, sorts an array of integers by bubbling the largest integer to the top.</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token comment\">// Bubble Sort</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bubble</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> sorted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\n   sorted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">bubble</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053/raw/14b00dabe615cdfaf39dce21b99edf038c345d94/bub.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053#file-bub-js\">bub.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> items<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   items<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   items<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54/raw/b99e87081b1f89fd363805bb3dee7195046b758d/bubble.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54#file-bubble-js\">bubble.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li><em>Worst Case &#x26; Best Case are always the same because it makes nested loops.</em></li>\n<li><em>Double for loops are polynomial time complexity or more specifically in this case Quadratic (Big O) of: O(n²)</em></li>\n</ul>\n<h3>Selection Sort</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p><code class=\"language-text\">Space Complexity</code>: O(1)</p>\n<ul>\n<li>Selection Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*AByxtBjFrPVVYmyu\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> idx1<span class=\"token punctuation\">,</span> idx2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> lowest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   lowest <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>place <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> lowest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//Alt Solution----------------------------------------------------</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> lowest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   lowest <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowest <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402/raw/2199dc275f3d5b7f6b56b103201fee492044aa0b/selectionsort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402#file-selectionsort-js\">selectionsort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li>Selection sort organizes the smallest elements to the start of the array.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*GeYNxlRcbt2cf0rY\"></p>\n<blockquote>\n<p>Summary of how Selection Sort should work:</p>\n</blockquote>\n<ol>\n<li><em>Set MIN to location 0</em></li>\n<li><em>Search the minimum element in the list.</em></li>\n<li><em>Swap with value at location Min</em></li>\n<li><em>Increment Min to point to next element.</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">selectionSort</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   min <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0/raw/84be7efce4a0362fe9f6e34738c61769159f26f4/selectsort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0#file-selectsort-js\">selectsort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3>Insertion Sort</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p><code class=\"language-text\">Space Complexity</code>: O(n)</p>\n<ul>\n<li>Because we are creating a subArray for each element in the original input, our Space Comlexity becomes linear.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*gbNU6wrszGPrfAZG\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> hole <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>hole <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token punctuation\">[</span>hole <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   list<span class=\"token punctuation\">[</span>hole<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>hole <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   hole<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   list<span class=\"token punctuation\">[</span>hole<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//Alt Solution--------------------------------------------</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> current <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c/raw/d8abcdb6ccc32e53120ec3a97a397cf4a032e225/insertionsort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c#file-insertionsort-js\">insertionsort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3>Merge Sort</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Log Linear O(nlog(n))</p>\n<ul>\n<li>Since our array gets split in half every single time we contribute O(log(n)). The while loop contained in our helper merge function contributes O(n) therefore our time complexity is O(nlog(n)); <code class=\"language-text\">Space Complexity</code>: O(n)</li>\n<li>We are linear O(n) time because we are creating subArrays.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*GeU8YwwCoK8GiSTD\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*IxqGb72XDVDeeiMl\"></p>\n<h3>Example of Merge Sort</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">leftArray<span class=\"token punctuation\">,</span> rightArray</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> sorted <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>letArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> rightArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> leftItem <span class=\"token operator\">=</span> leftArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> rightItem <span class=\"token operator\">=</span> rightArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftItem <span class=\"token operator\">></span> rightItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   sorted<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>rightItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   rightArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   sorted<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>leftItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   leftArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> leftArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   sorted<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rightArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> rightArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   sorted<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> sorted<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">const</span> middleIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> leftArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middleIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> rightArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>middleIndex<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   leftArray <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>leftArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   rightArray <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>rightArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>leftArray<span class=\"token punctuation\">,</span> rightArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48/raw/9e9157edcd1c4c2a795666eeff038bac405a9ff6/mergesort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48#file-mergesort-js\">mergesort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64/raw/8e1b1d82bcc6ef7a8350632740ad1bf38e660ec4/merge2.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64#file-merge2-js\">merge2.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*HMCR--9niDt5zY6M\"></p>\n<ul>\n<li><strong>Merge sort is O(nlog(n)) time.</strong></li>\n<li><em>We need a function for merging and a function for sorting.</em></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If there is only one element in the list, it is already sorted; return the array.</em></li>\n<li><em>Otherwise, divide the list recursively into two halves until it can no longer be divided.</em></li>\n<li><em>Merge the smallest lists into new list in a sorted order.</em></li>\n</ol>\n<h3>Quick Sort</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Quadratic O(n^2)</p>\n<ul>\n<li>Even though the average time complexity O(nLog(n)), the worst case scenario is always quadratic.</li>\n</ul>\n<p><code class=\"language-text\">Space Complexity</code>: O(n)</p>\n<ul>\n<li>Our space complexity is linear O(n) because of the partition arrays we create.</li>\n<li>QS is another Divide and Conquer strategy.</li>\n<li>Some key ideas to keep in mind:</li>\n<li>It is easy to sort elements of an array relative to a particular target value.</li>\n<li>An array of 0 or 1 elements is already trivially sorted.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*WLl_HpdBGXYx284T\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*-LyHJXGPTYsWLDZf\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">>=</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> sortedLeft <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> sortedRight <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>sortedLeft<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sortedRight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e/raw/3a1022625e327a8f4ce2da191179532124a0fb2a/quicksort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e#file-quicksort-js\">quicksort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3>Binary Search</h3>\n<p><code class=\"language-text\">Time Complexity</code>: Log Time O(log(n))</p>\n<p><code class=\"language-text\">Space Complexity</code>: O(1)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*-naVYGTXzE2Yoali\"></p>\n<blockquote>\n<p><em>Recursive Solution</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> midPt <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>midPt<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>midPt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>midPt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c/raw/860f27bc6288ec672055b2d1becf3079b36486de/recur-bin-search.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c#file-recur-bin-search-js\">recur-bin-search.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<blockquote>\n<p><em>Min Max Solution</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> midpoint <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> array<span class=\"token punctuation\">[</span>midpoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> midpoint<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>midpoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   start <span class=\"token operator\">=</span> midpoint <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>midpoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   end <span class=\"token operator\">=</span> midpoint <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751/raw/25f8dd3250bf27dff4215f23e5f693b4ab54ebb7/minmaxbinsearch.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751#file-minmaxbinsearch-js\">minmaxbinsearch.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a/raw/341aedf69e77cde5a7ca8de3d80c4422ce0185b1/binsearch.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a#file-binsearch-js\">binsearch.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li><em>Must be conducted on a sorted array.</em></li>\n<li><em>Binary search is logarithmic time, not exponential b/c n is cut down by two, not growing.</em></li>\n<li><em>Binary Search is part of Divide and Conquer.</em></li>\n</ul>\n<h3>Insertion Sort</h3>\n<ul>\n<li><strong>Works by building a larger and larger sorted region at the left-most end of the array.</strong></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If it is the first element, and it is already sorted; return 1.</em></li>\n<li><em>Pick next element.</em></li>\n<li><em>Compare with all elements in the sorted sub list</em></li>\n<li><em>Shift all the elements in the sorted sub list that is greater than the value to be sorted.</em></li>\n<li><em>Insert the value</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">insertionSort</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputArr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> inputArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> inputArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> inputArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   inputArr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inputArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   j <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   inputArr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> inputArr<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">|</span></code></pre></div>\n<p><a href=\"https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617/raw/1838b4ddb05f78930479f71a6d64e239b71f63c1/insertionsort.js\">view raw</a><a href=\"https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617#file-insertionsort-js\">insertionsort.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz's gists</strong><br>\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |...</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" title=\"https://github.com/bgoonz\"><strong>bgoonz --- Overview</strong><br>\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize...</em>github.com</a><a href=\"https://github.com/bgoonz\"></a></p>\n<h3>Or Checkout my personal Resource Site:</h3>\n<p><a href=\"https://stackbit-clone.netlify.app/\" title=\"https://stackbit-clone.netlify.app/\"><strong>Web-Dev-Hub</strong><br>\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of...</em>bgoonz-blog.netlify.app</a><a href=\"https://stackbit-clone.netlify.app/\"></a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VCmj_H9AHs41oC9Yx1hZFQ.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**************************************BIG-O***********************************/</span>\n<span class=\"token comment\">/***********************Common Algorithms for Analysis********************/</span>\n<span class=\"token comment\">//mdn Object;</span>\n<span class=\"token comment\">//-**************-recursive factorial:*********************/</span>\n<span class=\"token comment\">/* \n   Factorial: the product of a given positive integer multiplied by all lesser positive integers: \n   The quantity four factorial (4!) = 4 ⋅ 3 ⋅ 2 ⋅ 1 = 24. \n   Symbol:n!, where n is the given integer. \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//* Base Case ... 1 * 1 = 1</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//* n! = n * (n-1) * (n-2) * (n-3) * ... * 1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*5 * 4 * 3 * 2 * 1 = 120 &lt;----expected</span>\n<span class=\"token comment\">//console.log( \"factorial(5): \", factorial( 5 ) ); //- factorial(5): 120</span>\n<span class=\"token comment\">/* \n   Fibonacci numbers are the numbers such that every number in the series after the first two is the sum of the two preceding ones. \n   The series starts with 1, 1. Example -1, 1, 2, 3, 5, 8, 13, 21, 34, .... \n   Mathematical Expression: fib(n) = fib(n-1) + fib(n-2) \n   ! fib-tree-structure-diagram.png \n   https://miro.medium.com/max/700/1*svQ784qk1hvBE3iz7VGGgQ.jpeg \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"fib(5): \", fibonacci(5)); //- fib(5): 5</span>\n<span class=\"token comment\">/* \n   the major differences between tabulation and memoization are: \n   1.) tabulation has to look through the entire search space; memoization does not \n   2.) tabulation requires careful ordering of the subproblems is; memoization doesn't care much about the order of recursive calls. \n   */</span>\n<span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fib</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"fib(50): \", fib(20)); //- fib(50): 4181</span>\n<span class=\"token comment\">/******************End of Common Algorithms for Analysis*****************/</span>\n<span class=\"token comment\">/***********Comparing two functions that calculate the sum of all numbers from 1 up to n**********************/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//! Number of operations will grow with input n.</span>\n        total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"addUpTo( 4 ): \", addUpTo(4)); //- addUpTo( 4 ): 10</span>\n<span class=\"token comment\">//! Would be O(n) or Linear Time.</span>\n<span class=\"token comment\">//----------------------------------------------------------------</span>\n<span class=\"token comment\">/* \n   The infinite series whose terms are the natural numbers 1 + 2 + 3 + 4 + ⋯ is a divergent series. \n   The nth partial sum of the series is the triangular number( https://en.wikipedia.org/wiki/Triangular_number ) \n   addUpTo(n)=(n * (n + 1)) / 2 \n   https://wikimedia.org/api/rest_v1/media/math/render/svg/99476e25466549387c585cb4de44e90f6cbe4cf2 \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constantAddUpTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constantAddUpTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//- constantAddUpTo(4): 10</span>\n<span class=\"token comment\">//console.log(\"constantAddUpTo(4): \", constantAddUpTo(4));</span>\n<span class=\"token comment\">//! Has three simple operations: 1 Multiplication 1 Addition 1 Division.</span>\n<span class=\"token comment\">//!(Regardless of n) Would be O(1) or Constant Time.</span>\n<span class=\"token comment\">/***********End of Comparing two functions that calculate the sum of all numbers from 1 up to n*******************/</span>\n<span class=\"token comment\">/* \n   !Simplifying Math Terms \n   We want our Big-O notation to describe the performance of our algorithm with respect to the input size and nothing else. \n   !Use the following rules to simplify our Big-O functions using the following rules: \n   1.) Simplify Products: if the function is a product of many terms, we drop the terms that don't depend on the size of the input. \n   2.) Simplify Sums: if the function is a sum of many terms, we keep the term with the largest growth rate and drop the other terms. \n   * n is the size of the input \n   * T(f) refers to an un-simplified mathematical function \n   * O(f) refers to the Big-O simplified mathematical function \n   * Simplifying a Product \n   If a function consists of a product of many factors, \n   !we drop the factors that don't depend on the size of the input, n. \n   The factors that we drop are called constant factors because their size remains consistent as we increase the size of the input. \n   examples-of-big-O-simplification.png \n   simplifying-a-sum.png \n   simp-examples.png \n   */</span>\n<span class=\"token comment\">/***********Comparing two functions with nested for loops*********************/</span>\n<span class=\"token comment\">// function countUpAndDown(n) {</span>\n<span class=\"token comment\">// console.log(\"going up!\");</span>\n<span class=\"token comment\">// for (let i = 0; i &lt; n; i++) {</span>\n<span class=\"token comment\">// console.log(i);</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// console.log(\"at the top, going down!\");</span>\n<span class=\"token comment\">// for (let j = n - 1; j >= 0; j--) {</span>\n<span class=\"token comment\">// console.log(j);</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// console.log(\"Back down, bye!\");</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// countUpAndDown(5);</span>\n<span class=\"token comment\">// console.log(\"countUpAndDown(5): \", countUpAndDown(5));</span>\n<span class=\"token comment\">/* \n   going up! \n   0 1 2 3 4 \n   at the top, going down! \n   4 3 2 1 0 \n   Back down, bye! \n   countUpAndDown(5): undefined //- because there was no return statment... only console.log \n   */</span>\n<span class=\"token comment\">//------------------------------------------------</span>\n<span class=\"token comment\">//!Both loops are O(n) but since we just want the big picture, O(n);</span>\n<span class=\"token comment\">//-----------------------------------------------</span>\n<span class=\"token comment\">// function printAllPairs(n) {</span>\n<span class=\"token comment\">// for (let i = 0; i &lt; n; i++) {</span>\n<span class=\"token comment\">// for (let j = 0; j &lt; n; j++) {</span>\n<span class=\"token comment\">// console.log(i, j);</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// printAllPairs(4);</span>\n<span class=\"token comment\">/* \n   0 0 0 1 0 2 0 3 1 0 1 1 1 2 1 3 2 0 2 1 2 2 2 3 3 0 3 1 3 2 3 3 \n   */</span>\n<span class=\"token comment\">//!Nested loops who's number of iterations depend on the size of the input are never a good thing when trying to write fast code.</span>\n<span class=\"token comment\">//!O(n^2) or Quadratic Time.</span>\n<span class=\"token comment\">/***********END of Comparing two functions with nested for loops**********************/</span>\n<span class=\"token comment\">/**************************Big-O-Operations**********************/</span>\n<span class=\"token comment\">//! Arithmetic Operations are Constant</span>\n<span class=\"token comment\">//! Variable assignment is constant</span>\n<span class=\"token comment\">//! Accessing elements in an array (by index) or by object (by key) is constant.</span>\n<span class=\"token comment\">//! In a loop, the complexity is the length of the loop times the complexity of whatever is inside of the loop.</span>\n<span class=\"token comment\">/**************************More Examples**********************/</span>\n<span class=\"token comment\">//---------------------logAtLeast5---------------------------------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logAtLeast5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//! O(n) Linear Time</span>\n<span class=\"token comment\">//logAtLeast5(2);</span>\n<span class=\"token comment\">/* \n   1 2 3 4 5 \n   ---------------------------- \n   */</span>\n<span class=\"token comment\">//logAtLeast5(6);</span>\n<span class=\"token comment\">/* \n   ---------------------------- \n   1 2 3 4 5 6 \n   */</span>\n<span class=\"token comment\">//---------------------logAtMost5---------------------------------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logAtMost5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">logAtMost5</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//! O(1) Constant Time.</span>\n<span class=\"token comment\">/* \n   1 2 3 4 5 \n   */</span>\n<span class=\"token comment\">//***********************Big-O Complexity Classes*************************** */</span>\n<span class=\"token comment\">/* \n   //! O(1) Constant \n   The algorithm takes roughly the same number of steps for any input size. \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constant1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constant1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//constant1(5): 11</span>\n<span class=\"token comment\">//console.log(\"constant1(5): \", constant1(5));</span>\n<span class=\"token comment\">//--------</span>\n<span class=\"token comment\">//! O(1)</span>\n<span class=\"token comment\">//--------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constant2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//constant2(5);</span>\n<span class=\"token comment\">////console.log(\"constant2(5): \", constant2(5));</span>\n<span class=\"token comment\">//1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/* \n   O(log(n)) Logarithmic \n   In most cases our hidden base of Logarithmic time is 2, \n   log complexity algo's will typically display 'halving' the size of the input ?? \n   ? (like binary search!) \n   */</span>\n<span class=\"token comment\">// O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'base case'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*Recursive call on **half** the input</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//! O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">////console.log(\"logarithmic1(5): \", logarithmic1(5)); //logarithmic1(5): base case</span>\n<span class=\"token function\">logarithmic2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">////console.log(\"logarithmic2(6): \", logarithmic2(6)); //logarithmic2(6): 3</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/* \n   * O(n) Linear \n   Linear algo's will access each item of the input \"once\". \n   */</span>\n<span class=\"token comment\">// O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(\"linear1\", i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">linear1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n   linear1 1 \n   linear1 2 \n   linear1 3 \n   */</span>\n<span class=\"token comment\">// O(n), where n is the length of the array</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(\"linear2\", i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">linear2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n   linear2 0 \n   linear2 1 \n   linear2 2 \n   */</span>\n<span class=\"token comment\">//! O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(`linear3(${n})--->`, linear3(n - 1));</span>\n        <span class=\"token comment\">/*\n         */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//!linear3(6);</span>\n<span class=\"token comment\">//linear3(2)---> 1 linear3(3)---> undefined linear3(4)---> undefined</span>\n<span class=\"token comment\">//linear3(5)---> undefined linear3(6)---> undefined</span>\n<span class=\"token comment\">//!linear3(5);</span>\n<span class=\"token comment\">// linear3(2)---> 1 linear3(3)---> undefined linear3(4)---> undefined</span>\n<span class=\"token comment\">//linear3(5)---> undefined</span>\n<span class=\"token comment\">//// in the two function calls above we can see that size of output corresponds to a proportional change in the size of the input</span>\n<span class=\"token comment\">//console.log(\"linear3(4): \", linear3(4)); //// linear3(4): undefined</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/* \n   * O(nlog(n)) Log Linear Time \n   Combination of linear and logarithmic behavior, \n   we will see features from both classes. \n   !Algorithm's that are log-linear will use both recursion AND iteration. \n   */</span>\n<span class=\"token comment\">// O(n * log(n))</span>\n<span class=\"token comment\">// function loglinear(n) {</span>\n<span class=\"token comment\">// if (n &lt;= 1) return; // base case</span>\n<span class=\"token comment\">// for (let i = 1; i &lt;= n; i++) {</span>\n<span class=\"token comment\">// console.log(</span>\n<span class=\"token comment\">// `for an input (n=${n}):`,</span>\n<span class=\"token comment\">// `we are on the ${i}'th itteration where i = ${i}`</span>\n<span class=\"token comment\">// );</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// console.log(\" first call n('old n'):\", n);</span>\n<span class=\"token comment\">// loglinear(n / 2);</span>\n<span class=\"token comment\">// console.log(` new n is = (${n})`);</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// loglinear(4);</span>\n<span class=\"token comment\">/* \n   for an input (n=4): we are on the 1'th itteration where i = 1 \n   for an input (n=4): we are on the 2'th itteration where i = 2 \n   for an input (n=4): we are on the 3'th itteration where i = 3 \n   for an input (n=4): we are on the 4'th itteration where i = 4 \n   first call n('old n'): 4 \n   for an input (n=2): we are on the 1'th itteration where i = 1 \n   for an input (n=2): we are on the 2'th itteration where i = 2 \n   first call n('old n'): 2 \n   new n is = (2) \n   new n is = (4) \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// base case</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">for an input (n=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">):</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">we are on the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'th itteration where i = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" first call n('old n'):\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> Second Call : new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//loglinear(4);</span>\n<span class=\"token comment\">/* \n   for an input (n=4): we are on the 1'th itteration where i = 1 \n   for an input (n=4): we are on the 2'th itteration where i = 2 \n   for an input (n=4): we are on the 3'th itteration where i = 3 \n   for an input (n=4): we are on the 4'th itteration where i = 4 \n   first call n('old n'): 4 new n is = (2) \n   for an input (n=2): we are on the 1'th itteration where i = 1 \n   for an input (n=2): we are on the 2'th itteration where i = 2 \n   first call n('old n'): 2 new n is = (1) \n   new n is = (2) \n   Second Call : new n is = (2) \n   new n is = (4) \n   for an input (n=2): we are on the 1'th itteration where i = 1 \n   for an input (n=2): we are on the 2'th itteration where i = 2 \n   first call n('old n'): 2 new n is = (1) \n   new n is = (2) \n   Second Call : new n is = (2) \n   Second Call : new n is = (4) \n   */</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/* \n   O(nc) Polynomial \n   C is a fixed constant. \n   */</span>\n<span class=\"token comment\">// O(n^3)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cubic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(`i is ${i}`, \"count:\", count);</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//console.log(` for i: ${i} j is:${j}`);</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// console.log( ` itteration #${count}: i: is ${i}, j: is ${j}, k:is ${k}`);</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">cubic</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n   i is 1 count: 0 \n   for i: 1 j is:1 \n   itteration #1: i: is 1, j: is 1, k: is 1 \n   itteration #2: i: is 1, j: is 1, k: is 2 \n   itteration #3: i: is 1, j: is 1, k: is 3 \n   for i: 1 j is:2 \n   itteration #4: i: is 1, j: is 2, k: is 1 \n   itteration #5: i: is 1, j: is 2, k: is 2 \n   itteration #6: i: is 1, j: is 2, k: is 3 \n   for i: 1 j is:3 \n   itteration #7: i: is 1, j: is 3, k: is 1 \n   itteration #8: i: is 1, j: is 3, k: is 2 \n   itteration #9: i: is 1, j: is 3, k: is 3 \n   i is 2 count: 9 \n   for i: 2 j is:1 \n   itteration #10: i: is 2, j: is 1, k: is 1 \n   itteration #11: i: is 2, j: is 1, k: is 2 \n   itteration #12: i: is 2, j: is 1, k: is 3 \n   for i: 2 j is:2 \n   itteration #13: i: is 2, j: is 2, k: is 1 \n   itteration #14: i: is 2, j: is 2, k: is 2 \n   itteration #15: i: is 2, j: is 2, k: is 3 \n   for i: 2 j is:3 \n   itteration #16: i: is 2, j: is 3, k: is 1 \n   itteration #17: i: is 2, j: is 3, k: is 2 \n   itteration #18: i: is 2, j: is 3, k: is 3 \n   i is 3 count: 18 \n   for i: 3 j is:1 \n   itteration #19: i: is 3, j: is 1, k: is 1 \n   itteration #20: i: is 3, j: is 1, k: is 2 \n   itteration #21: i: is 3, j: is 1, k: is 3 \n   for i: 3 j is:2 \n   itteration #22: i: is 3, j: is 2, k: is 1 \n   itteration #23: i: is 3, j: is 2, k: is 2 \n   itteration #24: i: is 3, j: is 2, k: is 3 \n   for i: 3 j is:3 \n   itteration #25: i: is 3, j: is 3, k: is 1 \n   itteration #26: i: is 3, j: is 3, k: is 2 \n   itteration #27: i: is 3, j: is 3, k: is 3 \n   */</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/* \n   Example of Quadratic and Cubic runtime. \n   !O(c^n) Exponential \n   C is now the number of recursive calls made in each stack frame. \n   -Algo's with exponential time are VERY SLOW. \n   */</span>\n<span class=\"token comment\">// O(3^n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//console.log(\"1.) first call n('old n'):\", n, `....new n is = (${n - 1})`);</span>\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// console.log(\"---------------------(__1__)---------------------------\", \"\\n\");</span>\n    <span class=\"token comment\">// console.log(</span>\n    <span class=\"token comment\">// \"2.) after first call ('old n'):\",</span>\n    <span class=\"token comment\">// n,</span>\n    <span class=\"token comment\">// `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">// );</span>\n\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//console.log(\"-------------------------(__2__)---------------------\", \"\\n\");</span>\n    <span class=\"token comment\">//console.log(</span>\n    <span class=\"token comment\">// \"3.) after second call ('old n'):\",</span>\n    <span class=\"token comment\">// n,</span>\n    <span class=\"token comment\">// `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">// );</span>\n\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//console.log(\"-----------------------(__3__)-------------------------\", \"\\n\");</span>\n    <span class=\"token comment\">//console.log(</span>\n    <span class=\"token comment\">// \"4.) after third call ('old n'):\",</span>\n    <span class=\"token comment\">// n,</span>\n    <span class=\"token comment\">// `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">//);</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//***********************__Memoization__*************************** */</span>\n<span class=\"token comment\">/* \n   Memoization : a design pattern used to reduce the overall number of calculations that can occur \n   in algorithms that use recursive strategies to solve. \n   MZ stores the results of the sub-problems in some other data structure, so that we can avoid \n   duplicate calculations and only 'solve' each problem once. \n   Two features that comprise memoization: \n   1\\. FUNCTION MUST BE RECURSIVE. \n   2\\. Our additional DS is usually an object (we refer to it as our memo!) \n   */</span>\n\n<span class=\"token comment\">//! _____Memoizing Factorial_____</span>\n\n<span class=\"token comment\">// function fib(n, memo = {}) {</span>\n<span class=\"token comment\">// if (n in memo) return memo[n]; // If we already calculated this value, return it</span>\n<span class=\"token comment\">// if (n === 1 || n === 2) return 1;</span>\n\n<span class=\"token comment\">// // Store the result in the memo first before returning</span>\n<span class=\"token comment\">// // Make sure to pass the memo in to your calls to fib!</span>\n<span class=\"token comment\">// memo[n] = fib(n - 1, memo) + fib(n - 2, memo);</span>\n<span class=\"token comment\">// return memo[n];</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> memo2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//console.log(\"this is memo\", memo2);</span>\n    <span class=\"token keyword\">return</span> memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//console.log(memo2);</span>\n<span class=\"token comment\">// //factorial(6); // => 720, requires 6 calls</span>\n<span class=\"token comment\">//console.log(\"factorial(6): \", factorial(6));</span>\n<span class=\"token comment\">// //factorial(6); // => 720, requires 1 call</span>\n<span class=\"token comment\">// //factorial(5); // => 120, requires 1 call</span>\n<span class=\"token comment\">// console.log(\"factorial(5): \", factorial(5));</span>\n<span class=\"token comment\">//factorial(7); // => 5040, requires 2 calls</span>\n<span class=\"token comment\">//console.log(\"factorial(7): \", factorial(7));</span>\n<span class=\"token comment\">//console.log(\"factorial(20): \", factorial(20)); // 2432902008176640000</span>\n<span class=\"token comment\">/* \n   this is memo { '2': 2 } \n   this is memo { '2': 2, '3': 6 } \n   this is memo { '2': 2, '3': 6, '4': 24 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120 } \n   this is memo { '2': 2 } \n   this is memo { '2': 2, '3': 6 } \n   this is memo { '2': 2, '3': 6, '4': 24 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720 } \n   factorial(6): 720 \n   this is memo { '2': 2 } \n   this is memo { '2': 2, '3': 6 } \n   this is memo { '2': 2, '3': 6, '4': 24 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720 } \n   this is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720, '7': 5040 } \n   factorial(7): 5040 \n   */</span>\n\n<span class=\"token comment\">/* \n   The Memoization Formula \n   Rules \n   1\\. Write the unoptimized brute force recursion (make sure it works); \n   2\\. Add memo object as an additional arugmnt . \n   3\\. Add a base case condition that returns the stored value if the function's argument is in the memo. \n   4\\. Before returning the result of the recursive case, store it in the memo as a value and make the \n   function's argument it's key. \n    \n   !Things to remember \n   *1. When solving DP problems with Memoization, it is helpful to draw out the visual tree first. \n   *2. When you notice duplicate sub-tree's that means we can memoize. \n    \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//fastFib(6); // => 8</span>\n<span class=\"token comment\">//console.log(\"fastFib(6): \", fastFib(6)); //fastFib(6): 8</span>\n<span class=\"token comment\">//fastFib(50); // => 12586269025</span>\n<span class=\"token comment\">//console.log(\"fastFib(50): \", fastFib(50)); //fastFib(50): 12586269025</span>\n\n<span class=\"token comment\">//***********************__Tabulation__*************************** */</span>\n<span class=\"token comment\">/* \n   Tabulation Strategy \n   //Use When: \n   -The function is iterative and not recursive. \n   -The accompanying Data Structure is usually an array. \n   */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if(n === 0 || n === 1){</span>\n    <span class=\"token comment\">// return 1;</span>\n    <span class=\"token comment\">// }</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//12586269025 |</span></code></pre></div>\n<p><a href=\"https://gist.github.com/bgoonz/af844eda5a20b0fdc0b813304401602b/raw/a5bd8a34d26c2b6cff9232c7f6218463122ff7ef/algo-time-complexity-by-example.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/af844eda5a20b0fdc0b813304401602b#file-algo-time-complexity-by-example-js\">algo-time-complexity-by-example.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<details>\n<summary> Big O Examples In JavaScript  </summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**************************************BIG-O***********************************/</span>\n<span class=\"token comment\">/***********************Common Algorithms for Analysis********************/</span>\n<span class=\"token comment\">//mdn Object;</span>\n<span class=\"token comment\">//-**************-recursive factorial:*********************/</span>\n<span class=\"token comment\">/*\nFactorial: the product of a given positive integer multiplied by all lesser positive integers:\nThe quantity four factorial (4!) = 4 ⋅ 3 ⋅ 2 ⋅ 1 = 24.\nSymbol:n!, where n is the given integer.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//* Base Case ... 1 * 1 = 1</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*  n! = n * (n-1) *  (n-2) * (n-3) * ... * 1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*5 * 4 * 3 * 2 * 1 = 120 &lt;----expected</span>\n<span class=\"token comment\">//console.log( \"factorial(5): \", factorial( 5 ) ); //-  factorial(5):  120</span>\n<span class=\"token comment\">/*\nFibonacci numbers are the numbers such that every number in the series after the first two is the sum of the two preceding ones.\nThe series starts with 1, 1. Example −1, 1, 2, 3, 5, 8, 13, 21, 34, ….\nMathematical Expression: fib(n) = fib(n−1) + fib(n−2)\n! fib-tree-structure-diagram.png\nhttps://miro.medium.com/max/700/1*svQ784qk1hvBE3iz7VGGgQ.jpeg\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"fib(5): \", fibonacci(5)); //-  fib(5):  5</span>\n<span class=\"token comment\">/*\nthe major differences between tabulation and memoization are:\n1.)     tabulation has to look through the entire search space; memoization does not\n2.)     tabulation requires careful ordering of the subproblems is; memoization doesn't care much about the order of recursive calls.\n*/</span>\n<span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fib</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"fib(50): \", fib(20));      //-  fib(50):  4181</span>\n<span class=\"token comment\">/******************End of Common Algorithms for Analysis*****************/</span>\n<span class=\"token comment\">/***********Comparing two functions that calculate the sum of all numbers from 1 up to n**********************/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//! Number of operations will grow with input n.</span>\n        total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(\"addUpTo( 4 ): \", addUpTo(4)); //-  addUpTo( 4 ):  10</span>\n<span class=\"token comment\">//! Would be O(n) or Linear Time.</span>\n<span class=\"token comment\">//----------------------------------------------------------------</span>\n<span class=\"token comment\">/*\nThe infinite series whose terms are the natural numbers 1 + 2 + 3 + 4 + ⋯ is a divergent series.\nThe nth partial sum of the series is the triangular number( https://en.wikipedia.org/wiki/Triangular_number )\naddUpTo(n)=(n * (n + 1)) / 2\nhttps://wikimedia.org/api/rest_v1/media/math/render/svg/99476e25466549387c585cb4de44e90f6cbe4cf2\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constantAddUpTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constantAddUpTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-  constantAddUpTo(4):  10</span>\n<span class=\"token comment\">//console.log(\"constantAddUpTo(4): \", constantAddUpTo(4));</span>\n<span class=\"token comment\">//! Has three simple operations: 1 Multiplication 1 Addition 1 Division.</span>\n<span class=\"token comment\">//!(Regardless of n) Would be O(1) or Constant Time.</span>\n<span class=\"token comment\">/***********End of Comparing two functions that calculate the sum of all numbers from 1 up to n*******************/</span>\n<span class=\"token comment\">/*\n!Simplifying Math Terms\nWe want our Big-O notation to describe the performance of our algorithm with respect to the input size and nothing else.\n !Use the following rules to simplify our Big-O functions using the following rules:\n1.)   Simplify Products: if the function is a product of many terms, we drop the terms that don't depend on the size of the input.\n2.)   Simplify Sums: if the function is a sum of many terms, we keep the term with the largest growth rate and drop the other terms.\n*   n is the size of the input\n*   T(f) refers to an un-simplified mathematical function\n*   O(f) refers to the Big-O simplified mathematical function\n*   Simplifying a Product\nIf a function consists of a product of many factors,\n!we drop the factors that don't depend on the size of the input, n.\nThe factors that we drop are called constant factors because their size remains consistent as we increase the size of the input.\nexamples-of-big-O-simplification.png\nsimplifying-a-sum.png\nsimp-examples.png\n*/</span>\n<span class=\"token comment\">/***********Comparing two functions with nested for loops*********************/</span>\n<span class=\"token comment\">// function countUpAndDown(n) {</span>\n<span class=\"token comment\">//   console.log(\"going up!\");</span>\n<span class=\"token comment\">//   for (let i = 0; i &lt; n; i++) {</span>\n<span class=\"token comment\">//     console.log(i);</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">//   console.log(\"at the top, going down!\");</span>\n<span class=\"token comment\">//   for (let j = n - 1; j >= 0; j--) {</span>\n<span class=\"token comment\">//     console.log(j);</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">//   console.log(\"Back down, bye!\");</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// countUpAndDown(5);</span>\n<span class=\"token comment\">// console.log(\"countUpAndDown(5): \", countUpAndDown(5));</span>\n<span class=\"token comment\">/*\ngoing up!\n0 1\t2\t3\t4\nat the top, going down!\n4\t3\t2\t1\t0\nBack down, bye!\ncountUpAndDown(5):  undefined //- because there was no return statment... only console.log\n*/</span>\n<span class=\"token comment\">//------------------------------------------------</span>\n<span class=\"token comment\">//!Both loops are O(n) but since we just want the big picture, O(n);</span>\n<span class=\"token comment\">//-----------------------------------------------</span>\n<span class=\"token comment\">// function printAllPairs(n) {</span>\n<span class=\"token comment\">//   for (let i = 0; i &lt; n; i++) {</span>\n<span class=\"token comment\">//     for (let j = 0; j &lt; n; j++) {</span>\n<span class=\"token comment\">//       console.log(i, j);</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// printAllPairs(4);</span>\n<span class=\"token comment\">/*\n0 0\t0 1\t0 2\t0 3\t1 0\t1 1\t1 2\t1 3\t2 0\t2 1\t2 2\t2 3\t3 0\t3 1\t3 2\t3 3\n*/</span>\n<span class=\"token comment\">//!Nested loops who's number of iterations depend on the size of the input are never a good thing when trying to write fast code.</span>\n<span class=\"token comment\">//!O(n^2) or Quadratic Time.</span>\n<span class=\"token comment\">/***********END of Comparing two functions with nested for loops**********************/</span>\n<span class=\"token comment\">/**************************Big-O-Operations**********************/</span>\n<span class=\"token comment\">//! Arithmetic Operations are Constant</span>\n<span class=\"token comment\">//! Variable assignment is constant</span>\n<span class=\"token comment\">//! Accessing elements in an array (by index) or by object (by key) is constant.</span>\n<span class=\"token comment\">//! In a loop, the complexity is the length of the loop times the complexity of whatever is inside of the loop.</span>\n<span class=\"token comment\">/**************************More Examples**********************/</span>\n<span class=\"token comment\">//---------------------logAtLeast5---------------------------------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logAtLeast5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//!   O(n) Linear Time</span>\n<span class=\"token comment\">//logAtLeast5(2);</span>\n<span class=\"token comment\">/*\n1\t2\t3\t4\t5\n----------------------------\n*/</span>\n<span class=\"token comment\">//logAtLeast5(6);</span>\n<span class=\"token comment\">/*\n----------------------------\n1\t2\t3\t4\t5\t6\n*/</span>\n<span class=\"token comment\">//---------------------logAtMost5---------------------------------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logAtMost5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">logAtMost5</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//! O(1) Constant Time.</span>\n<span class=\"token comment\">/*\n1\t2\t3\t4\t5\n*/</span>\n<span class=\"token comment\">//***********************Big-O Complexity Classes*************************** */</span>\n<span class=\"token comment\">/*\n//! O(1) Constant\nThe algorithm takes roughly the same number of steps for any input size.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constant1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constant1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//constant1(5):  11</span>\n<span class=\"token comment\">//console.log(\"constant1(5): \", constant1(5));</span>\n<span class=\"token comment\">//--------</span>\n<span class=\"token comment\">//! O(1)</span>\n<span class=\"token comment\">//--------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">constant2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//constant2(5);</span>\n<span class=\"token comment\">////console.log(\"constant2(5): \", constant2(5));</span>\n<span class=\"token comment\">//1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15\t16\t17\t18\t19\t20\t21\t22\t23\t24\t25\t26\t27\t28\t29\t30\t31\t32\t33\t34\t35\t36\t37\t38\t39\t40\t41\t42\t43\t44\t45\t46\t47\t48\t49\t50\t51\t52\t53\t54\t55\t56\t57\t58\t59\t60\t61\t62\t63\t64\t65\t66\t67\t68\t69\t70\t71\t72\t73\t74\t75\t76\t77\t78\t79\t80\t81\t82\t83\t84\t85\t86\t87\t88\t89\t90\t91\t92\t93\t94\t95\t96\t97\t98\t99\t100</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/*\nO(log(n)) Logarithmic\nIn most cases our hidden base of Logarithmic time is 2,\nlog complexity algo's will typically display 'halving' the size of the input ??\n? (like binary search!)\n*/</span>\n<span class=\"token comment\">// O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'base case'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*Recursive call on **half** the input</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//! O(log(n))</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">logarithmic2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">logarithmic1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">////console.log(\"logarithmic1(5): \", logarithmic1(5)); //logarithmic1(5):  base case</span>\n<span class=\"token function\">logarithmic2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">////console.log(\"logarithmic2(6): \", logarithmic2(6)); //logarithmic2(6):  3</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/*\n*  O(n) Linear\nLinear algo's will access each item of the input \"once\".\n */</span>\n<span class=\"token comment\">// O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(\"linear1\", i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">linear1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nlinear1 1\nlinear1 2\nlinear1 3\n*/</span>\n<span class=\"token comment\">// O(n), where n is the length of the array</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(\"linear2\", i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">linear2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nlinear2 0\nlinear2 1\nlinear2 2\n*/</span>\n<span class=\"token comment\">//!  O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">linear3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(`linear3(${n})--->`, linear3(n - 1));</span>\n        <span class=\"token comment\">/*\n         */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//!linear3(6);</span>\n<span class=\"token comment\">//linear3(2)---> 1\tlinear3(3)---> undefined\tlinear3(4)---> undefined</span>\n<span class=\"token comment\">//linear3(5)---> undefined\tlinear3(6)---> undefined</span>\n<span class=\"token comment\">//!linear3(5);</span>\n<span class=\"token comment\">// linear3(2)---> 1\tlinear3(3)---> undefined\tlinear3(4)---> undefined</span>\n<span class=\"token comment\">//linear3(5)---> undefined</span>\n<span class=\"token comment\">//// in the two function calls above we can see that size of output corresponds to a proportional change in the size of the input</span>\n<span class=\"token comment\">//console.log(\"linear3(4): \", linear3(4)); //// linear3(4):  undefined</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/*\n* O(nlog(n)) Log Linear Time\nCombination of linear and logarithmic behavior,\nwe will see features from both classes.\n!Algorithm's that are log-linear will use both recursion AND iteration.\n */</span>\n<span class=\"token comment\">// O(n * log(n))</span>\n<span class=\"token comment\">// function loglinear(n) {</span>\n<span class=\"token comment\">//   if (n &lt;= 1) return; // base case</span>\n<span class=\"token comment\">//   for (let i = 1; i &lt;= n; i++) {</span>\n<span class=\"token comment\">//     console.log(</span>\n<span class=\"token comment\">//       `for an input (n=${n}):`,</span>\n<span class=\"token comment\">//       `we are on the ${i}'th itteration where i = ${i}`</span>\n<span class=\"token comment\">//     );</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">//   console.log(\" first call n('old n'):\", n);</span>\n<span class=\"token comment\">//   loglinear(n / 2);</span>\n<span class=\"token comment\">//   console.log(`   new n is = (${n})`);</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// loglinear(4);</span>\n<span class=\"token comment\">/*\nfor an input (n=4): we are on the 1'th itteration where i = 1\nfor an input (n=4): we are on the 2'th itteration where i = 2\nfor an input (n=4): we are on the 3'th itteration where i = 3\nfor an input (n=4): we are on the 4'th itteration where i = 4\n first call n('old n'): 4\nfor an input (n=2): we are on the 1'th itteration where i = 1\nfor an input (n=2): we are on the 2'th itteration where i = 2\n first call n('old n'): 2\n   new n is = (2)\n   new n is = (4)\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// base case</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">for an input (n=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">):</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">we are on the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'th itteration where i = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" first call n('old n'):\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">   new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loglinear</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">   Second Call : new n is = (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//loglinear(4);</span>\n<span class=\"token comment\">/*\nfor an input (n=4): we are on the 1'th itteration where i = 1\nfor an input (n=4): we are on the 2'th itteration where i = 2\nfor an input (n=4): we are on the 3'th itteration where i = 3\nfor an input (n=4): we are on the 4'th itteration where i = 4\n first call n('old n'): 4 new n is = (2)\nfor an input (n=2): we are on the 1'th itteration where i = 1\nfor an input (n=2): we are on the 2'th itteration where i = 2\n first call n('old n'): 2 new n is = (1)\n   new n is = (2)\n   Second Call : new n is = (2)\n   new n is = (4)\nfor an input (n=2): we are on the 1'th itteration where i = 1\nfor an input (n=2): we are on the 2'th itteration where i = 2\n first call n('old n'): 2 new n is = (1)\n   new n is = (2)\n   Second Call : new n is = (2)\n   Second Call : new n is = (4)\n*/</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/*\nO(nc) Polynomial\nC is a fixed constant.\n */</span>\n<span class=\"token comment\">// O(n^3)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cubic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//console.log(`i is ${i}`, \"count:\", count);</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//console.log(`  for i:    ${i}      j is:${j}`);</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// console.log(  `     itteration #${count}:       i: is  ${i},   j: is  ${j},     k:is   ${k}`);</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">cubic</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\ni is 1 count: 0\n  for i:    1      j is:1\n     itteration #1:       i: is  1,   j: is  1,     k: is   1\n     itteration #2:       i: is  1,   j: is  1,     k: is   2\n     itteration #3:       i: is  1,   j: is  1,     k: is   3\n  for i:    1      j is:2\n     itteration #4:       i: is  1,   j: is  2,     k: is   1\n     itteration #5:       i: is  1,   j: is  2,     k: is   2\n     itteration #6:       i: is  1,   j: is  2,     k: is   3\n  for i:    1      j is:3\n     itteration #7:       i: is  1,   j: is  3,     k: is   1\n     itteration #8:       i: is  1,   j: is  3,     k: is   2\n     itteration #9:       i: is  1,   j: is  3,     k: is   3\ni is 2 count: 9\n  for i:    2      j is:1\n     itteration #10:       i: is  2,   j: is  1,     k: is   1\n     itteration #11:       i: is  2,   j: is  1,     k: is   2\n     itteration #12:       i: is  2,   j: is  1,     k: is   3\n  for i:    2      j is:2\n     itteration #13:       i: is  2,   j: is  2,     k: is   1\n     itteration #14:       i: is  2,   j: is  2,     k: is   2\n     itteration #15:       i: is  2,   j: is  2,     k: is   3\n  for i:    2      j is:3\n     itteration #16:       i: is  2,   j: is  3,     k: is   1\n     itteration #17:       i: is  2,   j: is  3,     k: is   2\n     itteration #18:       i: is  2,   j: is  3,     k: is   3\ni is 3 count: 18\n  for i:    3      j is:1\n     itteration #19:       i: is  3,   j: is  1,     k: is   1\n     itteration #20:       i: is  3,   j: is  1,     k: is   2\n     itteration #21:       i: is  3,   j: is  1,     k: is   3\n  for i:    3      j is:2\n     itteration #22:       i: is  3,   j: is  2,     k: is   1\n     itteration #23:       i: is  3,   j: is  2,     k: is   2\n     itteration #24:       i: is  3,   j: is  2,     k: is   3\n  for i:    3      j is:3\n     itteration #25:       i: is  3,   j: is  3,     k: is   1\n     itteration #26:       i: is  3,   j: is  3,     k: is   2\n     itteration #27:       i: is  3,   j: is  3,     k: is   3\n*/</span>\n<span class=\"token comment\">//------------------------------------------</span>\n<span class=\"token comment\">/*\nExample of Quadratic and Cubic runtime.\n!O(c^n) Exponential\nC is now the number of recursive calls made in each stack frame.\n-Algo's with exponential time are VERY SLOW.\n*/</span>\n<span class=\"token comment\">// O(3^n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//console.log(\"1.)  first call n('old n'):\", n, `....new n is = (${n - 1})`);</span>\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// console.log(\"---------------------(__1__)---------------------------\", \"\\n\");</span>\n    <span class=\"token comment\">// console.log(</span>\n    <span class=\"token comment\">//   \"2.)  after first call ('old n'):\",</span>\n    <span class=\"token comment\">//   n,</span>\n    <span class=\"token comment\">//   `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">// );</span>\n\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//console.log(\"-------------------------(__2__)---------------------\", \"\\n\");</span>\n    <span class=\"token comment\">//console.log(</span>\n    <span class=\"token comment\">//   \"3.)  after second call ('old n'):\",</span>\n    <span class=\"token comment\">//   n,</span>\n    <span class=\"token comment\">//   `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">// );</span>\n\n    <span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//console.log(\"-----------------------(__3__)-------------------------\", \"\\n\");</span>\n    <span class=\"token comment\">//console.log(</span>\n    <span class=\"token comment\">//  \"4.)   after third call ('old n'):\",</span>\n    <span class=\"token comment\">//  n,</span>\n    <span class=\"token comment\">// `....new n is = (${n - 1})`</span>\n    <span class=\"token comment\">//);</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">exponential3n</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//***********************__Memoization__*************************** */</span>\n<span class=\"token comment\">/*\nMemoization : a design pattern used to reduce the overall number of calculations that can occur\nin algorithms that use recursive strategies to solve.\nMZ stores the results of the sub-problems in some other data structure, so that we can avoid\nduplicate calculations and only 'solve' each problem once.\nTwo features that comprise memoization:\n1. FUNCTION MUST BE RECURSIVE.\n2. Our additional DS is usually an object (we refer to it as our memo!)\n*/</span>\n\n<span class=\"token comment\">//!    _____Memoizing Factorial_____</span>\n\n<span class=\"token comment\">// function fib(n, memo = {}) {</span>\n<span class=\"token comment\">//   if (n in memo) return memo[n]; // If we already calculated this value, return it</span>\n<span class=\"token comment\">//   if (n === 1 || n === 2) return 1;</span>\n\n<span class=\"token comment\">//   // Store the result in the memo first before returning</span>\n<span class=\"token comment\">//   // Make sure to pass the memo in to your calls to fib!</span>\n<span class=\"token comment\">//   memo[n] = fib(n - 1, memo) + fib(n - 2, memo);</span>\n<span class=\"token comment\">//   return memo[n];</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> memo2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//console.log(\"this is memo\", memo2);</span>\n    <span class=\"token keyword\">return</span> memo2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//console.log(memo2);</span>\n<span class=\"token comment\">// //factorial(6); // => 720, requires 6 calls</span>\n<span class=\"token comment\">//console.log(\"factorial(6): \", factorial(6));</span>\n<span class=\"token comment\">// //factorial(6); // => 720, requires 1 call</span>\n<span class=\"token comment\">// //factorial(5); // => 120, requires 1 call</span>\n<span class=\"token comment\">// console.log(\"factorial(5): \", factorial(5));</span>\n<span class=\"token comment\">//factorial(7); // => 5040, requires 2 calls</span>\n<span class=\"token comment\">//console.log(\"factorial(7): \", factorial(7));</span>\n<span class=\"token comment\">//console.log(\"factorial(20): \", factorial(20)); // 2432902008176640000</span>\n<span class=\"token comment\">/*\nthis is memo { '2': 2 }\nthis is memo { '2': 2, '3': 6 }\nthis is memo { '2': 2, '3': 6, '4': 24 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120 }\nthis is memo { '2': 2 }\nthis is memo { '2': 2, '3': 6 }\nthis is memo { '2': 2, '3': 6, '4': 24 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720 }\nfactorial(6):  720\nthis is memo { '2': 2 }\nthis is memo { '2': 2, '3': 6 }\nthis is memo { '2': 2, '3': 6, '4': 24 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720 }\nthis is memo { '2': 2, '3': 6, '4': 24, '5': 120, '6': 720, '7': 5040 }\nfactorial(7):  5040\n*/</span>\n\n<span class=\"token comment\">/*\nThe Memoization Formula\nRules\n1. Write the unoptimized brute force recursion (make sure it works);\n2. Add memo object as an additional arugmnt .\n3. Add a base case condition that returns the stored value if the function's argument is in the memo.\n4. Before returning the result of the recursive case, store it in the memo as a value and make the\nfunction's argument it's key.\n!Things to remember\n*1. When solving DP problems with Memoization, it is helpful to draw out the visual tree first.\n*2. When you notice duplicate sub-tree's that means we can memoize.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fastFib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//fastFib(6); // => 8</span>\n<span class=\"token comment\">//console.log(\"fastFib(6): \", fastFib(6)); //fastFib(6):  8</span>\n<span class=\"token comment\">//fastFib(50); // => 12586269025</span>\n<span class=\"token comment\">//console.log(\"fastFib(50): \", fastFib(50)); //fastFib(50):  12586269025</span>\n\n<span class=\"token comment\">//***********************__Tabulation__*************************** */</span>\n<span class=\"token comment\">/*\nTabulation Strategy\n//Use When:\n-The function is iterative and not recursive.\n-The accompanying Data Structure is usually an array.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if(n === 0 || n === 1){</span>\n    <span class=\"token comment\">//    return 1;</span>\n    <span class=\"token comment\">// }</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibTab</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//12586269025</span></code></pre></div>\n</details>"}