{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-ea348bb6c39fca37671b94e12411af01-gatsby-remark-prismjs-","val":"<h1>await</h1>\n<p>The <code class=\"language-text\">await</code> operator is used to wait for a <a href=\"../global_objects/promise\"><code class=\"language-text\">Promise</code></a>. It can only be used inside an <a href=\"../statements/async_function\"><code class=\"language-text\">async function</code></a> within regular JavaScript code; however it can be used on its own with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules.</a></p>\n<h2>Syntax</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[rv] = await expression;</code></pre></div>\n<p><code class=\"language-text\">expression</code><br>\nA <a href=\"../global_objects/promise\"><code class=\"language-text\">Promise</code></a> or any value to wait for.</p>\n<p><code class=\"language-text\">rv</code><br>\nReturns the fulfilled value of the promise, or the value itself if it's not a <code class=\"language-text\">Promise</code>.</p>\n<h2>Description</h2>\n<p>The <code class=\"language-text\">await</code> expression causes <code class=\"language-text\">async</code> function execution to pause until a <code class=\"language-text\">Promise</code> is settled (that is, fulfilled or rejected), and to resume execution of the <code class=\"language-text\">async</code> function after fulfillment. When resumed, the value of the <code class=\"language-text\">await</code> expression is that of the fulfilled <code class=\"language-text\">Promise</code>.</p>\n<p>If the <code class=\"language-text\">Promise</code> is rejected, the <code class=\"language-text\">await</code> expression throws the rejected value.</p>\n<p>If the value of the <em>expression</em> following the <code class=\"language-text\">await</code> operator is not a <code class=\"language-text\">Promise</code>, it's converted to a <a href=\"../global_objects/promise/resolve\">resolved Promise</a>.</p>\n<p>An <code class=\"language-text\">await</code> splits execution flow, allowing the caller of the async function to resume execution. After the <code class=\"language-text\">await</code> defers the continuation of the async function, execution of subsequent statements ensues. If this <code class=\"language-text\">await</code> is the last expression executed by its function, execution continues by returning to the function's caller a pending <code class=\"language-text\">Promise</code> for completion of the <code class=\"language-text\">await</code>'s function and resuming execution of that caller.</p>\n<h2>Examples</h2>\n<h3>Awaiting a promise to be fulfilled</h3>\n<p>If a <code class=\"language-text\">Promise</code> is passed to an <code class=\"language-text\">await</code> expression, it waits for the <code class=\"language-text\">Promise</code> to be fulfilled and returns the fulfilled value.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();</code></pre></div>\n<h3>Thenable objects</h3>\n<p><a href=\"../global_objects/promise/then\"><code class=\"language-text\">Thenable objects</code></a> will be fulfilled just the same.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">async function f2() {\n  const thenable = {\n    then: function(resolve, _reject) {\n      resolve('resolved!')\n    }\n  };\n  console.log(await thenable); // resolved!\n}\n\nf2();</code></pre></div>\n<h3>Conversion to promise</h3>\n<p>If the value is not a <code class=\"language-text\">Promise</code>, it converts the value to a resolved <code class=\"language-text\">Promise</code>, and waits for it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">async function f3() {\n  var y = await 20;\n  console.log(y); // 20\n}\n\nf3();</code></pre></div>\n<h3>Promise rejection</h3>\n<p>If the <code class=\"language-text\">Promise</code> is rejected, the rejected value is thrown.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">async function f4() {\n  try {\n    var z = await Promise.reject(30);\n  } catch(e) {\n    console.error(e); // 30\n  }\n}\n\nf4();</code></pre></div>\n<h3>Handling rejected promises</h3>\n<p>Handle rejected <code class=\"language-text\">Promise</code> without try block.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var response = await promisedFunction().catch((err) => { console.error(err); });\n// response will be undefined if the promise is rejected</code></pre></div>\n<h3>Top level await</h3>\n<p>You can use the <code class=\"language-text\">await</code> keyword on its own (outside of an async function) within a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript module</a>. This means modules, with child modules that use <code class=\"language-text\">await</code>, wait for the child module to execute before they themselves run. All while not blocking other child modules from loading.</p>\n<p>Here is an example of a simple module using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> and specifying await within the <code class=\"language-text\">export statement</code>. Any modules that include this will wait for the fetch to resolve before running any code.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// fetch request\nconst colors = fetch('../data/colors.json')\n  .then(response => response.json());\n\nexport default await colors;</code></pre></div>"}