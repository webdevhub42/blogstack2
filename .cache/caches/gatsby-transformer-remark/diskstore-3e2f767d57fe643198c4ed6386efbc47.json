{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-db5103620885e2b57ec0d8678eb9599b-gatsby-remark-prismjs-","val":"<h3>Rotate (Array) Problem Walkthrough</h3>\n<h3>Explanation for Rotate Right</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/1200/0*3_vbGvHeWOgSTxk7.png\"></p>\n<h3>Question</h3>\n<p>Write a function <code class=\"language-text\">rotateRight(array, num)</code> that takes in an array and a number as arguments.</p>\n<blockquote>\n<p>The function should return a new array where the elements of the array are rotated to the right number times. The function should not mutate the original array and instead return a new array.</p>\n</blockquote>\n<blockquote>\n<p>Define this function using <code class=\"language-text\">[*function expression syntax*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">.</a></p>\n</blockquote>\n<p><strong>HINT:</strong> you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array#slice</a> to create a copy of an array</p>\n<hr>\n<blockquote>\n<p>JavaScript gives us four methods to add or remove items from the beginning or end of arrays:</p>\n</blockquote>\n<h3>pop(): Remove an item from the end of an array</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cats = ['Bob', 'Willy', 'Mini'];</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.pop(); // ['Bob', 'Willy']</code></pre></div>\n<blockquote>\n<p>pop() returns the removed item.</p>\n</blockquote>\n<h3>push(): Add items to the end of an array</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cats = ['Bob'];</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.push('Willy'); // ['Bob', 'Willy']</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.push('Puff', 'George'); // ['Bob', 'Willy', 'Puff', 'George']</code></pre></div>\n<blockquote>\n<p>push() returns the new array length.</p>\n</blockquote>\n<h3>shift(): Remove an item from the beginning of an array</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cats = ['Bob', 'Willy', 'Mini'];</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.shift(); // ['Willy', 'Mini']</code></pre></div>\n<blockquote>\n<p>shift() returns the removed item.</p>\n</blockquote>\n<h3>unshift(): Add items to the beginning of an array</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cats = ['Bob'];</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.unshift('Willy'); // ['Willy', 'Bob']</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cats.unshift('Puff', 'George'); // ['Puff', 'George', 'Willy', 'Bob']</code></pre></div>\n<blockquote>\n<p>unshift() returns the new array length.</p>\n</blockquote>\n<p><strong>We are being asked for two things:</strong></p>\n<ol>\n<li>To return an array with all the elements shifted over 'num ' times.</li>\n<li>To <code class=\"language-text\">NOT</code> mutate the original array</li>\n</ol>\n<p><strong>Step 1.</strong><br>\nWe need to start the function and create a variable to hold a COPY of our input array.</p>\n<p>let rotateRight = function (array, num) {\nlet result = array.slice(0);\n};</p>\n<p><a href=\"https://gist.github.com/bgoonz/ca7a48c316345f6f7acd9383e13fb23e/raw/ec4c2296e563c005a0091d35cf4299c17944b826/copy-arr.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/ca7a48c316345f6f7acd9383e13fb23e#file-copy-arr-js\">copy-arr.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" title=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><strong>Array.prototype.slice()</strong><br>\n<em>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end...</em>developer.mozilla.org</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"></a></p>\n<ul>\n<li>We assign array.slice(0) to a variable called result.</li>\n<li>Slicing our input array simply creates a sliced copy of the data.</li>\n<li>Remember that by excluding a second argument in our slice parameter allows us to slice from the first argument all the way to the end.</li>\n</ul>\n<p><strong>Step 2.</strong><br>\nWe need to create a for loop to tell our function how many times we want to rotate.</p>\n<p>let rotateRight = function (array, num) {\nlet result = array.slice(0);\nfor (var i = 0; i &#x3C; num; i++) {\n// some code here\n}\n};</p>\n<p><a href=\"https://gist.github.com/bgoonz/b2a934289a677f337a72bcd7751a55df/raw/7e76928d94617e115e3f894d1557caf1f8549590/for-loop-rotate.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/b2a934289a677f337a72bcd7751a55df#file-for-loop-rotate-js\">for-loop-rotate.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li>By setting our second delimiter to i &#x3C; num we will ask our loops to run num times.</li>\n<li>Running num times is the same as executing the code block within num times.</li>\n</ul>\n<p><strong>Step 3.</strong><br>\nWe need to put some executable code within our for loop to be run during every cycle.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">rotateRight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> ele <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://gist.github.com/bgoonz/44e66960ba5cc0ffe04ea0499f7c3134/raw/8427e5139b96194f78552f10af07e6309ea2135a/rot.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/44e66960ba5cc0ffe04ea0499f7c3134#file-rot-js\">rot.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li>Since we are rotating to the right, every change to our result array under the hood will look like this (if we ref. our first test case):</li>\n<li><code class=\"language-text\">['a', 'b', 'c', 'd', 'e'];</code> (how it looks like at the start)</li>\n<li><code class=\"language-text\">['e', 'a', 'b', 'c', 'd'];</code> (after one run of the for loop)</li>\n<li><code class=\"language-text\">['d', 'e', 'a', 'b', 'c'];</code> (after second/last run of the for loop)</li>\n<li>To accomplish this we first need to '<code class=\"language-text\">pop</code>' off or remove our last element.</li>\n<li>Two things happen when we use this built-in function.</li>\n<li>Our copied array is mutated to lose it''s last ele.</li>\n<li>The removed element is stored in the variable we assigned to the function.</li>\n<li>Our second step is to add it to the start of our array, to do this we can use <code class=\"language-text\">unshift</code>.</li>\n<li>By inputting the variable we are using to hold our removed element into the parameter of unshift we are adding our element to the front of the array.</li>\n</ul>\n<p><strong>Step 4.</strong></p>\n<p>Now that our for loop has ended and our copied array looks just like how the answer looks, we need to output the answer.</p>\n<p>let rotateRight = function (array, num) {\nlet result = array.slice(0);\nfor (var i = 0; i &#x3C; num; i++) {\nlet ele = result.pop();\nresult.unshift(ele);\n}\nreturn result;\n};</p>\n<p><a href=\"https://gist.github.com/bgoonz/b033f820c35869af0869ce712af68bda/raw/41176af3dce167556337e74744c3156756f470b1/rot2.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/b033f820c35869af0869ce712af68bda#file-rot2-js\">rot2.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<ul>\n<li>We accomplish this by creating a <code class=\"language-text\">return</code> line AFTER the for loop.</li>\n</ul>\n<h3>End Result</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">rotateRight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> ele <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//let arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[\"d\", \"e\", \"a\", \"b\", \"c\"];</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"wombat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"koala\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"opossum\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kangaroo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[\"koala\", \"opossum\", \"kangaroo\", \"wombat\"];</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[\"wombat\", \"koala\", \"opossum\", \"kangaroo\"];</span></code></pre></div>\n<p><a href=\"https://gist.github.com/bgoonz/4e2a040cd94006bb887a77a68f4287b9/raw/83bafeb8c66bf5a3653b88a2215fdf67efd9c24a/rotate.js\">view raw</a><a href=\"https://gist.github.com/bgoonz/4e2a040cd94006bb887a77a68f4287b9#file-rotate-js\">rotate.js </a>hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>"}