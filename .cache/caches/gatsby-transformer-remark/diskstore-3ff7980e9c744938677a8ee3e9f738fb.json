{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-0cd8e3fda048fb23350066a70b3713ae-gatsby-remark-prismjs-","val":"<p>Regular expressions are patterns used to match character combinations in strings. In JavaScript, regular expressions are also objects. These patterns are used with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code class=\"language-text\">exec()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code class=\"language-text\">test()</code></a>methods of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code class=\"language-text\">RegExp</code></a>, and with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">match()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code class=\"language-text\">matchAll()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code class=\"language-text\">replace()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code class=\"language-text\">replaceAll()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code class=\"language-text\">search()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code class=\"language-text\">split()</code></a> methods of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code class=\"language-text\">String</code></a>. This chapter describes JavaScript regular expressions.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#creating_a_regular_expression\" title=\"Permalink to Creating a regular expression\">Creating a regular expression</a></h2>\n<p>You construct a regular expression in one of two ways:</p>\n<ul>\n<li>\n<p>Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>Regular expression literals provide compilation of the regular expression when the script is loaded. If the regular expression remains constant, using this can improve performance.</p>\n</li>\n<li>\n<p>Or calling the constructor function of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code class=\"language-text\">RegExp</code></a> object, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>Using the constructor function provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</p>\n</li>\n</ul>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#writing_a_regular_expression_pattern\" title=\"Permalink to Writing a regular expression pattern\">Writing a regular expression pattern</a></h2>\n<p>A regular expression pattern is composed of simple characters, such as <code class=\"language-text\">/abc/</code>, or a combination of simple and special characters, such as <code class=\"language-text\">/ab*c/</code> or <code class=\"language-text\">/Chapter (\\d+)\\.\\d*/</code>. The last example includes parentheses, which are used as a memory device. The match made with this part of the pattern is remembered for later use, as described in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#using_groups\">Using groups</a>.</p>\n<p><strong>Note:</strong> If you are already familiar with the forms of a regular expression, you may also read <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\">the cheatsheet</a> for a quick lookup for a specific pattern/construct.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_simple_patterns\" title=\"Permalink to Using simple patterns\">Using simple patterns</a></h3>\n<p>Simple patterns are constructed of characters for which you want to find a direct match. For example, the pattern <code class=\"language-text\">/abc/</code> matches character combinations in strings only when the exact sequence <code class=\"language-text\">\"abc\"</code> occurs (all characters together and in that order). Such a match would succeed in the strings <code class=\"language-text\">\"Hi, do you know your abc's?\"</code> and <code class=\"language-text\">\"The latest airplane designs evolved from slabcraft.\"</code>. In both cases the match is with the substring <code class=\"language-text\">\"abc\"</code>. There is no match in the string <code class=\"language-text\">\"Grab crab\"</code> because while it contains the substring <code class=\"language-text\">\"ab c\"</code>, it does not contain the exact substring <code class=\"language-text\">\"abc\"</code>.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_special_characters\" title=\"Permalink to Using special characters\">Using special characters</a></h3>\n<p>When the search for a match requires something more than a direct match, such as finding one or more b's, or finding white space, you can include special characters in the pattern. For example, to match <em>a single <code class=\"language-text\">\"a\"</code> followed by zero or more <code class=\"language-text\">\"b\"</code>s followed by <code class=\"language-text\">\"c\"</code></em>, you'd use the pattern <code class=\"language-text\">/ab*c/</code>: the <code class=\"language-text\">*</code> after <code class=\"language-text\">\"b\"</code> means \"0 or more occurrences of the preceding item.\" In the string <code class=\"language-text\">\"cbbabbbbcdebc\"</code>, this pattern will match the substring <code class=\"language-text\">\"abbbbc\"</code>.</p>\n<p>The following pages provide lists of the different special characters that fit into each category, along with descriptions and examples.</p>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">Assertions</a></p>\n<p>Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\">Character classes</a></p>\n<p>Distinguish different types of characters. For example, distinguishing between letters and digits.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">Groups and ranges</a></p>\n<p>Indicate groups and ranges of expression characters.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\">Quantifiers</a></p>\n<p>Indicate numbers of characters or expressions to match.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode property escapes</a></p>\n<p>Distinguish based on unicode character properties, for example, upper- and lower-case letters, math symbols, and punctuation.</p>\n</li>\n</ul>\n<p>If you want to look at all the special characters that can be used in regular expressions in a single table, see the following:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">\\</code>, <code class=\"language-text\">.</code>, <code class=\"language-text\">\\cX</code>, <code class=\"language-text\">\\d</code>, <code class=\"language-text\">\\D</code>, <code class=\"language-text\">\\f</code>, <code class=\"language-text\">\\n</code>, <code class=\"language-text\">\\r</code>, <code class=\"language-text\">\\s</code>, <code class=\"language-text\">\\S</code>, <code class=\"language-text\">\\t</code>, <code class=\"language-text\">\\v</code>, <code class=\"language-text\">\\w</code>, <code class=\"language-text\">\\W</code>, <code class=\"language-text\">\\0</code>, <code class=\"language-text\">\\xhh</code>, <code class=\"language-text\">\\uhhhh</code>, <code class=\"language-text\">\\uhhhhh</code>, <code class=\"language-text\">[\\b]</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">^</code>, <code class=\"language-text\">$</code>, <code class=\"language-text\">x(?=y)</code>, <code class=\"language-text\">x(?!y)</code>, <code class=\"language-text\">(?&lt;=y)x</code>,<code class=\"language-text\">(?&lt;!y)x</code>, <code class=\"language-text\">\\b</code>, <code class=\"language-text\">\\B</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">(x)</code>, <code class=\"language-text\">(?:x)</code>, <code class=\"language-text\">(?&lt;Name>x)</code>, <code class=\"language-text\">x|y</code>, <code class=\"language-text\">[xyz]</code>, <code class=\"language-text\">[^xyz]</code>, <code class=\"language-text\">\\Number</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*</code>, <code class=\"language-text\">+</code>, <code class=\"language-text\">?</code>, <code class=\"language-text\">x{n}</code>, <code class=\"language-text\">x{n,}</code>, <code class=\"language-text\">x{n,m}</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\p{UnicodeProperty}</code>,<code class=\"language-text\">\\P{UnicodeProperty}</code></td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode property escapes</a></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\">A larger cheatsheet is also available</a> (only aggregating parts of those individual articles).</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\" title=\"Permalink to Escaping\">Escaping</a></h3>\n<p>If you need to use any of the special characters literally (actually searching for a <code class=\"language-text\">\"*\"</code>, for instance), you must escape it by putting a backslash in front of it. For instance, to search for <code class=\"language-text\">\"a\"</code> followed by <code class=\"language-text\">\"*\"</code> followed by <code class=\"language-text\">\"b\"</code>, you'd use <code class=\"language-text\">/a\\*b/</code> — the backslash \"escapes\" the <code class=\"language-text\">\"*\"</code>, making it literal instead of special.</p>\n<p>Similarly, if you're writing a regular expression literal and need to match a slash (\"/\"), you need to escape that (otherwise, it terminates the pattern). For instance, to search for the string \"/example/\" followed by one or more alphabetic characters, you'd use <code class=\"language-text\">/\\/example\\/[a-z]+/i</code>—the backslashes before each slash make them literal.</p>\n<p>To match a literal backslash, you need to escape the backslash. For instance, to match the string \"C:\" where \"C\" can be any letter, you'd use <code class=\"language-text\">/[A-Z]:\\\\/</code> — the first backslash escapes the one after it, so the expression searches for a single literal backslash.</p>\n<p>If using the <code class=\"language-text\">RegExp</code> constructor with a string literal, remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level. <code class=\"language-text\">/a\\*b/</code> and <code class=\"language-text\">new RegExp(\"a\\\\*b\")</code>create the same expression, which searches for \"a\" followed by a literal \"*\" followed by \"b\".</p>\n<p>If escape strings are not already part of your pattern you can add them using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code class=\"language-text\">String.replace</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>The \"g\" after the regular expression is an option or flag that performs a global search, looking in the whole string and returning all matches. It is explained in detail below in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\">Advanced Searching With Flags</a>.</p>\n<p><em>Why isn't this built into JavaScript?</em> There is a <a href=\"https://github.com/tc39/proposal-regex-escaping\">proposal</a> to add such a function to RegExp.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_parentheses\" title=\"Permalink to Using parentheses\">Using parentheses</a></h3>\n<p>Parentheses around any part of the regular expression pattern causes that part of the matched substring to be remembered. Once remembered, the substring can be recalled for other use. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#using_groups\">Groups and ranges</a> for more details.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_regular_expressions_in_javascript\" title=\"Permalink to Using regular expressions in JavaScript\">Using regular expressions in JavaScript</a></h2>\n<p>Regular expressions are used with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code class=\"language-text\">RegExp</code></a>methods <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code class=\"language-text\">test()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code class=\"language-text\">exec()</code></a> and with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code class=\"language-text\">String</code></a>methods <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">match()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code class=\"language-text\">replace()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code class=\"language-text\">search()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code class=\"language-text\">split()</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code class=\"language-text\">exec()</code></a></td>\n<td>Executes a search for a match in a string. It returns an array of information or <code class=\"language-text\">null</code>on a mismatch.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code class=\"language-text\">test()</code></a></td>\n<td>Tests for a match in a string. It returns <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">match()</code></a></td>\n<td>Returns an array containing all of the matches, including capturing groups, or <code class=\"language-text\">null</code> if no match is found.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code class=\"language-text\">matchAll()</code></a></td>\n<td>Returns an iterator containing all of the matches, including capturing groups.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code class=\"language-text\">search()</code></a></td>\n<td>Tests for a match in a string. It returns the index of the match, or <code class=\"language-text\">-1</code> if the search fails.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code class=\"language-text\">replace()</code></a></td>\n<td>Executes a search for a match in a string, and replaces the matched substring with a replacement substring.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code class=\"language-text\">replaceAll()</code></a></td>\n<td>Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring.</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code class=\"language-text\">split()</code></a></td>\n<td>Uses a regular expression or a fixed string to break a string into an array of substrings.</td>\n</tr>\n</tbody>\n</table>\n<p>When you want to know whether a pattern is found in a string, use the <code class=\"language-text\">test()</code> or <code class=\"language-text\">search()</code>methods; for more information (but slower execution) use the <code class=\"language-text\">exec()</code> or <code class=\"language-text\">match()</code> methods. If you use <code class=\"language-text\">exec()</code> or <code class=\"language-text\">match()</code> and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, <code class=\"language-text\">RegExp</code>. If the match fails, the <code class=\"language-text\">exec()</code> method returns <code class=\"language-text\">null</code> (which coerces to <code class=\"language-text\">false</code>).</p>\n<p>In the following example, the script uses the <code class=\"language-text\">exec()</code> method to find a match in a string.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>If you do not need to access the properties of the regular expression, an alternative way of creating <code class=\"language-text\">myArray</code> is with this script:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>(See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_the_global_search_flag_with_exec\">Using the global search flag with <code class=\"language-text\">exec()</code></a> for further info about the different behaviors.)</p>\n<p>If you want to construct the regular expression from a string, yet another alternative is this script:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>With these scripts, the match succeeds and returns the array and updates the properties shown in the following table.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">myArray</code></td>\n<td></td>\n<td>The matched string and all remembered substrings.</td>\n<td><code class=\"language-text\">['dbbd', 'bb', index: 1, input: 'cdbbdbsbz']</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">index</code></td>\n<td>The 0-based index of the match in the input string.</td>\n<td><code class=\"language-text\">1</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">input</code></td>\n<td>The original string.</td>\n<td><code class=\"language-text\">'cdbbdbsbz'</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[0]</code></td>\n<td>The last matched characters.</td>\n<td><code class=\"language-text\">'dbbd'</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">myRe</code></td>\n<td><code class=\"language-text\">lastIndex</code></td>\n<td>The index at which to start the next match. (This property is set only if the regular expression uses the g option, described in<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\">Advanced Searching With Flags</a>.)</td>\n<td><code class=\"language-text\">5</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">source</code></td>\n<td>The text of the pattern. Updated at the time that the regular expression is created, not executed.</td>\n<td><code class=\"language-text\">'d(b+)d'</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>As shown in the second form of this example, you can use a regular expression created with an object initializer without assigning it to a variable. If you do, however, every occurrence is a new regular expression. For this reason, if you use this form without assigning it to a variable, you cannot subsequently access the properties of that regular expression. For example, assume you have this script:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>However, if you have this script:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>The occurrences of <code class=\"language-text\">/d(b+)d/g</code> in the two statements are different regular expression objects and hence have different values for their <code class=\"language-text\">lastIndex</code> property. If you need to access the properties of a regular expression created with an object initializer, you should first assign it to a variable.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\" title=\"Permalink to Advanced searching with flags\">Advanced searching with flags</a></h3>\n<p>Regular expressions have optional flags that allow for functionality like global searching and case-insensitive searching. These flags can be used separately or together in any order, and are included as part of the regular expression.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">d</code></td>\n<td>Generate indices for substring matches.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code class=\"language-text\">RegExp.prototype.hasIndices</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">g</code></td>\n<td>Global search.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code class=\"language-text\">RegExp.prototype.global</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">i</code></td>\n<td>Case-insensitive search.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code class=\"language-text\">RegExp.prototype.ignoreCase</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">m</code></td>\n<td>Multi-line search.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code class=\"language-text\">RegExp.prototype.multiline</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">s</code></td>\n<td>Allows <code class=\"language-text\">.</code>to match newline characters.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code class=\"language-text\">RegExp.prototype.dotAll</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">u</code></td>\n<td>\"unicode\"; treat a pattern as a sequence of unicode code points.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code class=\"language-text\">RegExp.prototype.unicode</code></a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">y</code></td>\n<td>Perform a \"sticky\" search that matches starting at the current position in the target string. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code class=\"language-text\">sticky</code></a>.</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code class=\"language-text\">RegExp.prototype.sticky</code></a></td>\n</tr>\n</tbody>\n</table>\n<p>To include a flag with the regular expression, use this syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>Note that the flags are an integral part of a regular expression. They cannot be added or removed later.</p>\n<p>For example, <code class=\"language-text\">re = /\\w+\\s/g</code> creates a regular expression that looks for one or more characters followed by a space, and it looks for this combination throughout the string.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>You could replace the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>and get the same result.</p>\n<p>The <code class=\"language-text\">m</code> flag is used to specify that a multiline input string should be treated as multiple lines. If the <code class=\"language-text\">m</code>flag is used, <code class=\"language-text\">^</code> and <code class=\"language-text\">$</code> match at the start or end of any line within the input string instead of the start or end of the entire string.</p>\n<h4>Using the global search flag with exec()</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code class=\"language-text\">RegExp.prototype.exec()</code></a> method with the <code class=\"language-text\">g</code> flag returns each match and its position iteratively.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>In contrast, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">String.prototype.match()</code></a> method returns all matches at once, but without their position.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<h4>Using unicode regular expressions</h4>\n<p>The \"u\" flag is used to create \"unicode\" regular expressions; that is, regular expressions which support matching against unicode text. This is mainly accomplished through the use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode property escapes</a>, which are supported only within \"unicode\" regular expressions.</p>\n<p>For example, the following regular expression might be used to match against an arbitrary unicode \"word\":</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<p>There are a number of other differences between unicode and non-unicode regular expressions that one should be aware of:</p>\n<ul>\n<li>Unicode regular expressions do not support so-called \"identity escapes\"; that is, patterns where an escaping backslash is not needed and effectively ignored. For example, <code class=\"language-text\">/\\a/</code> is a valid regular expression matching the letter 'a', but <code class=\"language-text\">/\\a/u</code> is not.</li>\n<li>Curly brackets need to be escaped when not used as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\">quantifiers</a>. For example, <code class=\"language-text\">/{/</code> is a valid regular expression matching the curly bracket '{', but <code class=\"language-text\">/{/u</code> is not -- instead, the bracket should be escaped and <code class=\"language-text\">/\\{/u</code> should be used instead.</li>\n<li>The <code class=\"language-text\">-</code> character is interpreted differently within character classes. In particular, for unicode regular expressions, <code class=\"language-text\">-</code> is interpreted as a literal <code class=\"language-text\">-</code> (and not as part of a range) only if it appears at the start or end of a pattern. For example, <code class=\"language-text\">/[\\w-:]/</code> is a valid regular expression matching a word character, a <code class=\"language-text\">-</code>, or <code class=\"language-text\">:</code>, but <code class=\"language-text\">/\\w-:/u</code> is an invalid regular expression, as <code class=\"language-text\">\\w</code> to <code class=\"language-text\">:</code> is not a well-defined range of characters.</li>\n</ul>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#examples\" title=\"Permalink to Examples\">Examples</a></h2>\n<p><strong>Note:</strong> Several examples are also available in:</p>\n<ul>\n<li>The reference pages for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code class=\"language-text\">exec()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code class=\"language-text\">test()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">match()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code class=\"language-text\">matchAll()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code class=\"language-text\">search()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code class=\"language-text\">replace()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code class=\"language-text\">split()</code></a></li>\n<li>This guide articles': <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\">character classes</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">assertions</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">groups and ranges</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\">quantifiers</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode property escapes</a></li>\n</ul>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#using_special_characters_to_verify_input\" title=\"Permalink to Using special characters to verify input\">Using special characters to verify input</a></h3>\n<p>In the following example, the user is expected to enter a phone number. When the user presses the \"Check\" button, the script checks the validity of the number. If the number is valid (matches the character sequence specified by the regular expression), the script shows a message thanking the user and confirming the number. If the number is invalid, the script informs the user that the phone number is not valid.</p>\n<p>The regular expression looks for:</p>\n<ol>\n<li>the beginning of the line of data: <code class=\"language-text\">^</code></li>\n<li>followed by three numeric characters <code class=\"language-text\">\\d{3}</code>OR <code class=\"language-text\">|</code> a left parenthesis <code class=\"language-text\">\\(</code>, followed by three digits <code class=\"language-text\">\\d{3}</code>, followed by a close parenthesis <code class=\"language-text\">\\)</code>, in a non-capturing group <code class=\"language-text\">(?:)</code></li>\n<li>followed by one dash, forward slash, or decimal point in a capturing group <code class=\"language-text\">()</code></li>\n<li>followed by three digits <code class=\"language-text\">\\d{3}</code></li>\n<li>followed by the match remembered in the (first) captured group <code class=\"language-text\">\\1</code></li>\n<li>followed by four digits <code class=\"language-text\">\\d{4}</code></li>\n<li>followed by the end of the line of data: <code class=\"language-text\">$</code></li>\n</ol>\n<h4>HTML</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<h4>JavaScript</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>Copy to Clipboard</p>\n<h4>Result</h4>\n<p><a href=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/_sample_.using_special_characters_to_verify_input.html\">Using special characters to verify input sample</a></p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#tools\" title=\"Permalink to Tools\">Tools</a></h2>\n<ul>\n<li>\n<p><a href=\"https://regexr.com/\">RegExr</a></p>\n<p>An online tool to learn, build, &#x26; test Regular Expressions.</p>\n</li>\n<li>\n<p><a href=\"https://regex101.com/\">Regex tester</a></p>\n<p>An online regex builder/debugger</p>\n</li>\n<li>\n<p><a href=\"https://regexlearn.com/\">Regex interactive tutorial</a></p>\n<p>An online interactive tutorials, Cheatsheet, &#x26; Playground.</p>\n</li>\n<li>\n<p><a href=\"https://extendsclass.com/regex-tester.html\">Regex visualizer</a></p>\n<p>An online visual regex tester.</p>\n</li>\n</ul>"}