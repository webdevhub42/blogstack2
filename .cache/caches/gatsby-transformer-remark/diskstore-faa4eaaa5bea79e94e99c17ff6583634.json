{"expireTime":9007200911870449000,"key":"transformer-remark-markdown-ast-fe3969ac5bf4509e83f93238ac753621-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"https://leetcode.com/problems/generate-parentheses/description/","children":[{"type":"text","value":"22. Generate Parentheses","position":{"start":{"line":3,"column":5,"offset":6},"end":{"line":3,"column":29,"offset":30},"indent":[]}}],"position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":95,"offset":96},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":95,"offset":96},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Problem:","position":{"start":{"line":5,"column":5,"offset":102},"end":{"line":5,"column":13,"offset":110},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":98},"end":{"line":5,"column":13,"offset":110},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.","position":{"start":{"line":7,"column":1,"offset":112},"end":{"line":7,"column":104,"offset":215},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":112},"end":{"line":7,"column":104,"offset":215},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, given n = 3, a solution set is:","position":{"start":{"line":9,"column":1,"offset":217},"end":{"line":9,"column":45,"offset":261},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":217},"end":{"line":9,"column":45,"offset":261},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]</code></pre></div>","position":{"start":{"line":11,"column":1,"offset":263},"end":{"line":19,"column":4,"offset":333},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Solution:","position":{"start":{"line":21,"column":5,"offset":339},"end":{"line":21,"column":14,"offset":348},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":335},"end":{"line":21,"column":14,"offset":348},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"ONE","position":{"start":{"line":23,"column":6,"offset":355},"end":{"line":23,"column":9,"offset":358},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":350},"end":{"line":23,"column":9,"offset":358},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Recursive DFS backtracking.","position":{"start":{"line":25,"column":1,"offset":360},"end":{"line":25,"column":28,"offset":387},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":360},"end":{"line":25,"column":28,"offset":387},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number} n\n * @return {string[]}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">generateParenthesis</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> nopen<span class=\"token punctuation\">,</span> nclose<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nopen <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nopen <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nclose<span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nclose <span class=\"token operator\">&lt;</span> nopen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nopen<span class=\"token punctuation\">,</span> nclose <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":27,"column":1,"offset":389},"end":{"line":55,"column":4,"offset":898},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"TWO","position":{"start":{"line":57,"column":6,"offset":905},"end":{"line":57,"column":9,"offset":908},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":900},"end":{"line":57,"column":9,"offset":908},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BFS.","position":{"start":{"line":59,"column":1,"offset":910},"end":{"line":59,"column":5,"offset":914},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":910},"end":{"line":59,"column":5,"offset":914},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number} n\n * @return {string[]}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">generateParenthesis</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">close</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> close <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>open <span class=\"token operator\">+</span> close <span class=\"token operator\">===</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> close <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>open <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path <span class=\"token operator\">+</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> open <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                close\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>close <span class=\"token operator\">&lt;</span> open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n                open<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">close</span><span class=\"token operator\">:</span> close <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":916},"end":{"line":106,"column":4,"offset":1746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":108,"column":1,"offset":1748},"end":{"line":108,"column":4,"offset":1751},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"☆","position":{"start":{"line":110,"column":1,"offset":1753},"end":{"line":110,"column":2,"offset":1754},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":3,"offset":1755},"end":{"line":110,"column":21,"offset":1773},"indent":[]}}],"position":{"start":{"line":110,"column":2,"offset":1754},"end":{"line":110,"column":22,"offset":1774},"indent":[]}},{"type":"text","value":"☆☆","position":{"start":{"line":110,"column":22,"offset":1774},"end":{"line":110,"column":24,"offset":1776},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":25,"offset":1777},"end":{"line":110,"column":43,"offset":1795},"indent":[]}}],"position":{"start":{"line":110,"column":24,"offset":1776},"end":{"line":110,"column":44,"offset":1796},"indent":[]}},{"type":"text","value":"☆☆","position":{"start":{"line":110,"column":44,"offset":1796},"end":{"line":110,"column":46,"offset":1798},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":47,"offset":1799},"end":{"line":110,"column":65,"offset":1817},"indent":[]}}],"position":{"start":{"line":110,"column":46,"offset":1798},"end":{"line":110,"column":66,"offset":1818},"indent":[]}},{"type":"text","value":"☆","position":{"start":{"line":110,"column":66,"offset":1818},"end":{"line":110,"column":67,"offset":1819},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":1753},"end":{"line":110,"column":67,"offset":1819},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":112,"column":1,"offset":1821},"end":{"line":112,"column":4,"offset":1824},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":114,"column":1,"offset":1826},"end":{"line":114,"column":4,"offset":1829},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"☆","position":{"start":{"line":116,"column":1,"offset":1831},"end":{"line":116,"column":2,"offset":1832},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":116,"column":3,"offset":1833},"end":{"line":116,"column":21,"offset":1851},"indent":[]}}],"position":{"start":{"line":116,"column":2,"offset":1832},"end":{"line":116,"column":22,"offset":1852},"indent":[]}},{"type":"text","value":"☆☆","position":{"start":{"line":116,"column":22,"offset":1852},"end":{"line":116,"column":24,"offset":1854},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":116,"column":25,"offset":1855},"end":{"line":116,"column":43,"offset":1873},"indent":[]}}],"position":{"start":{"line":116,"column":24,"offset":1854},"end":{"line":116,"column":44,"offset":1874},"indent":[]}},{"type":"text","value":"☆","position":{"start":{"line":116,"column":44,"offset":1874},"end":{"line":116,"column":45,"offset":1875},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":1831},"end":{"line":116,"column":45,"offset":1875},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":118,"column":1,"offset":1877},"end":{"line":118,"column":4,"offset":1880},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":119,"column":1,"offset":1881}}}}