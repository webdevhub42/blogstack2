{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-2778478ecca7be29bdd0d2495a415487-gatsby-remark-prismjs-","val":"<h1>Array</h1>\n<p>Arrays are everywhere in JavaScript and with the new <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread operators</a> introduced in ECMAScript 6, you can do awesome things with them. In this post I will show you 3 useful tricks you can use when programming.</p>\n<h3>1. Iterating through an empty array</h3>\n<p>JavaScript arrays are sparse in nature in that there are a lot of holes in them. Try creating an array using the Array's constructor and you will see what I mean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You may find that iterating over a sparse array to apply a certain transformation is hard.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>To solve this, you can use <code class=\"language-text\">Array.apply</code> when creating the array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>2. Passing an empty parameter to a method</h3>\n<p>If you want to call a method and ignore one of its parameters, then JavaScript will complain if you keep it empty.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parameter1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'parameter3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nUncaught SyntaxError<span class=\"token operator\">:</span> Unexpected token <span class=\"token punctuation\">,</span></code></pre></div>\n<p>A workaround that people usually resort to is to pass either <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parameter1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'parameter3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parameter1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'parameter3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I personally don't like using <code class=\"language-text\">null</code> since JavaScript treats it as an object and that's just weird. With the introduction of spread operators in ES6, there is a neater way of passing empty parameters to a method. As previously mentioned, arrays are sparse in nature and so passing empty values to it is totally okay. We'll use this to our advantage.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token string\">'parameter1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'parameter3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// works!</span></code></pre></div>\n<h3>3. Unique array values</h3>\n<p>I always wonder why the Array constructor does not have a designated method to facilitate the use of unique array values. Spread operators are here for the rescue. Use spread operators with the <code class=\"language-text\">Set</code> constructor to generate unique array values.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The JavaScript <code class=\"language-text\">Array</code> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.</p>\n<h2>Description</h2>\n<p>Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations. Neither the length of a JavaScript array nor the types of its elements are fixed. Since an array's length can change at any time, and data can be stored at non-contiguous locations in the array, JavaScript arrays are not guaranteed to be dense; this depends on how the programmer chooses to use them. In general, these are convenient characteristics; but if these features are not desirable for your particular use, you might consider using typed arrays.</p>\n<p>Arrays cannot use strings as element indexes (as in an <a href=\"https://en.wikipedia.org/wiki/Associative_array\">associative array</a>) but must use integers. Setting or accessing via non-integers using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties\">bracket notation</a> (or <a href=\"../operators/property_accessors\">dot notation</a>) will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties\">object property collection</a>. The array's object properties and list of array elements are separate, and the array's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#array_methods\">traversal and mutation operations</a> cannot be applied to these named properties.</p>\n<h3>Common operations</h3>\n<p><strong>Create an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let fruits = ['Apple', 'Banana']\n\nconsole.log(fruits.length)\n// 2</code></pre></div>\n<p><strong>Access an Array item using the index position</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let first = fruits[0]\n// Apple\n\nlet last = fruits[fruits.length - 1]\n// Banana</code></pre></div>\n<p><strong>Loop over an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fruits.forEach(function(item, index, array) {\n  console.log(item, index)\n})\n// Apple 0\n// Banana 1</code></pre></div>\n<p><strong>Add an item to the end of an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let newLength = fruits.push('Orange')\n// [\"Apple\", \"Banana\", \"Orange\"]</code></pre></div>\n<p><strong>Remove an item from the end of an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let last = fruits.pop() // remove Orange (from the end)\n// [\"Apple\", \"Banana\"]</code></pre></div>\n<p><strong>Remove an item from the beginning of an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let first = fruits.shift() // remove Apple from the front\n// [\"Banana\"]</code></pre></div>\n<p><strong>Add an item to the beginning of an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let newLength = fruits.unshift('Strawberry') // add to the front\n// [\"Strawberry\", \"Banana\"]</code></pre></div>\n<p><strong>Find the index of an item in the Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fruits.push('Mango')\n// [\"Strawberry\", \"Banana\", \"Mango\"]\n\nlet pos = fruits.indexOf('Banana')\n// 1</code></pre></div>\n<p><strong>Remove an item by index position</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let removedItem = fruits.splice(pos, 1) // this is how to remove an item\n\n// [\"Strawberry\", \"Mango\"]</code></pre></div>\n<p><strong>Remove items from an index position</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot']\nconsole.log(vegetables)\n// [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"]\n\nlet pos = 1\nlet n = 2\n\nlet removedItems = vegetables.splice(pos, n)\n// this is how to remove items, n defines the number of items to be removed,\n// starting at the index position specified by pos and progressing toward the end of array.\n\nconsole.log(vegetables)\n// [\"Cabbage\", \"Carrot\"] (the original array is changed)\n\nconsole.log(removedItems)\n// [\"Turnip\", \"Radish\"]</code></pre></div>\n<p><strong>Copy an Array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let shallowCopy = fruits.slice() // this is how to make a copy\n// [\"Strawberry\", \"Mango\"]</code></pre></div>\n<h3>Accessing array elements</h3>\n<p>JavaScript arrays are zero-indexed. The first element of an array is at index <code class=\"language-text\">0</code>, and the last element is at the index value equal to the value of the array's <a href=\"array/length\"><code class=\"language-text\">length</code></a> property minus <code class=\"language-text\">1</code>.</p>\n<p>Using an invalid index number returns <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let arr = ['this is the first element', 'this is the second element', 'this is the last element']\nconsole.log(arr[0])              // logs 'this is the first element'\nconsole.log(arr[1])              // logs 'this is the second element'\nconsole.log(arr[arr.length - 1]) // logs 'this is the last element'</code></pre></div>\n<p>Array elements are object properties in the same way that <code class=\"language-text\">toString</code> is a property (to be specific, however, <code class=\"language-text\">toString()</code> is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(arr.0) // a syntax error</code></pre></div>\n<p>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation and must be accessed using bracket notation.</p>\n<p>For example, if you had an object with a property named <code class=\"language-text\">3d</code>, it can only be referenced using bracket notation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nconsole.log(years.0)   // a syntax error\nconsole.log(years[0])  // works properly\n\nrenderer.3d.setTexture(model, 'character.png')     // a syntax error\nrenderer['3d'].setTexture(model, 'character.png')  // works properly</code></pre></div>\n<p>In the <code class=\"language-text\">3d</code> example, <code class=\"language-text\">'3d'</code> <em>had</em> to be quoted (because it begins with a digit). But it's also possible to quote the array indexes as well (e.g., <code class=\"language-text\">years['2']</code> instead of <code class=\"language-text\">years[2]</code>), although it's not necessary.</p>\n<p>The <code class=\"language-text\">2</code> in <code class=\"language-text\">years[2]</code> is coerced into a string by the JavaScript engine through an implicit <code class=\"language-text\">toString</code> conversion. As a result, <code class=\"language-text\">'2'</code> and <code class=\"language-text\">'02'</code> would refer to two different slots on the <code class=\"language-text\">years</code> object, and the following example could be <code class=\"language-text\">true</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(years['2'] != years['02'])</code></pre></div>\n<h3>Relationship between length and numerical properties</h3>\n<p>A JavaScript array's <a href=\"array/length\"><code class=\"language-text\">length</code></a> property and numerical properties are connected.</p>\n<p>Several of the built-in array methods (e.g., <a href=\"array/join\"><code class=\"language-text\">join()</code></a>, <a href=\"array/slice\"><code class=\"language-text\">slice()</code></a>, <a href=\"array/indexof\"><code class=\"language-text\">indexOf()</code></a>, etc.) take into account the value of an array's <a href=\"array/length\"><code class=\"language-text\">length</code></a> property when they're called.</p>\n<p>Other methods (e.g., <a href=\"array/push\"><code class=\"language-text\">push()</code></a>, <a href=\"array/splice\"><code class=\"language-text\">splice()</code></a>, etc.) also result in updates to an array's <a href=\"array/length\"><code class=\"language-text\">length</code></a> property.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fruits = []\nfruits.push('banana', 'apple', 'peach')\n\nconsole.log(fruits.length) // 3</code></pre></div>\n<p>When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's <a href=\"array/length\"><code class=\"language-text\">length</code></a> property accordingly:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fruits[5] = 'mango'\nconsole.log(fruits[5])            // 'mango'\nconsole.log(Object.keys(fruits))  // ['0', '1', '2', '5']\nconsole.log(fruits.length)        // 6</code></pre></div>\n<p>Increasing the <a href=\"array/length\"><code class=\"language-text\">length</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fruits.length = 10\nconsole.log(fruits)              // ['banana', 'apple', 'peach', empty x 2, 'mango', empty x 4]\nconsole.log(Object.keys(fruits)) // ['0', '1', '2', '5']\nconsole.log(fruits.length)       // 10\nconsole.log(fruits[8])           // undefined</code></pre></div>\n<p>Decreasing the <a href=\"array/length\"><code class=\"language-text\">length</code></a> property does, however, delete elements.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fruits.length = 2\nconsole.log(Object.keys(fruits)) // ['0', '1']\nconsole.log(fruits.length)       // 2</code></pre></div>\n<p>This is explained further on the <a href=\"array/length\"><code class=\"language-text\">Array.length</code></a> page.</p>\n<h3>Creating an array using the result of a match</h3>\n<p>The result of a match between a <a href=\"regexp\"><code class=\"language-text\">RegExp</code></a> and a string can create a JavaScript array. This array has properties and elements which provide information about the match. Such an array is returned by <a href=\"regexp/exec\"><code class=\"language-text\">RegExp.exec()</code></a>, <a href=\"string/match\"><code class=\"language-text\">String.match()</code></a>, and <a href=\"string/replace\"><code class=\"language-text\">String.replace()</code></a>.</p>\n<p>To help explain these properties and elements, see this example and then refer to the table below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Match one d followed by one or more b's followed by one d\n// Remember matched b's and the following d\n// Ignore case\n\nconst myRe = /d(b+)(d)/i\nconst myArray = myRe.exec('cdbBdbsbz')</code></pre></div>\n<p>The properties and elements returned from this match are as follows:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Property/Element</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\n<code>input</code>\n<br/>\n<p><span class=\"badge inline readonly\">Read only </span></p>\n</td>\n<td>The original string against which the regular expression was matched.</td>\n<td>\n<code>\"cdbBdbsbz\"</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>index</code>\n<br/>\n<p><span class=\"badge inline readonly\">Read only </span></p>\n</td>\n<td>The zero-based index of the match in the string.</td>\n<td>\n<code>1</code>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>[0]</code>\n<br/>\n<p><span class=\"badge inline readonly\">Read only </span></p>\n</td>\n<td>The last matched characters.</td>\n<td>\n<code>\"dbBd\"</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>[1], ...[n]</code>\n<br/>\n<p><span class=\"badge inline readonly\">Read only </span></p>\n</td>\n<td>Elements that specify the parenthesized substring matches (if included) in the regular expression. The number of possible parenthesized substrings is unlimited.</td>\n<td>\n<code>[1]: \"bB\" [2]: \"d\"</code>\n</td>\n</tr>\n</tbody>\n</table>\n<h2>Constructor</h2>\n<p><a href=\"array/array\"><code class=\"language-text\">Array()</code></a>\nCreates a new <code class=\"language-text\">Array</code> object.</p>\n<h2>Static properties</h2>\n<p><a href=\"array/@@species\"><code class=\"language-text\">get Array[@@species]</code></a>\nThe constructor function is used to create derived objects.</p>\n<h2>Static methods</h2>\n<p><a href=\"array/from\"><code class=\"language-text\">Array.from()</code></a>\nCreates a new <code class=\"language-text\">Array</code> instance from an array-like or iterable object.</p>\n<p><a href=\"array/isarray\"><code class=\"language-text\">Array.isArray()</code></a>\nReturns <code class=\"language-text\">true</code> if the argument is an array, or <code class=\"language-text\">false</code> otherwise.</p>\n<p><a href=\"array/of\"><code class=\"language-text\">Array.of()</code></a>\nCreates a new <code class=\"language-text\">Array</code> instance with a variable number of arguments, regardless of number or type of the arguments.</p>\n<h2>Instance properties</h2>\n<p><a href=\"array/length\"><code class=\"language-text\">Array.prototype.length</code></a>\nReflects the number of elements in an array.</p>\n<p><a href=\"array/@@unscopables\"><code class=\"language-text\">Array.prototype[@@unscopables]</code></a>\nA symbol containing property names to exclude from a <a href=\"../statements/with\"><code class=\"language-text\">with</code></a> binding scope.</p>\n<h2>Instance methods</h2>\n<p><a href=\"array/at\"><code class=\"language-text\">Array.prototype.at()</code></a><span class=\"icon experimental\" viewbox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\"> This is an experimental API that should not be used in production code. </span>\nReturns the array item at the given index. Accepts negative integers, which count back from the last item.</p>\n<p><a href=\"array/concat\"><code class=\"language-text\">Array.prototype.concat()</code></a>\nReturns a new array that is this array joined with other array(s) and/or value(s).</p>\n<p><a href=\"array/copywithin\"><code class=\"language-text\">Array.prototype.copyWithin()</code></a>\nCopies a sequence of array elements within the array.</p>\n<p><a href=\"array/entries\"><code class=\"language-text\">Array.prototype.entries()</code></a>\nReturns a new <code class=\"language-text\">Array Iterator</code> object that contains the key/value pairs for each index in the array.</p>\n<p><a href=\"array/every\"><code class=\"language-text\">Array.prototype.every()</code></a>\nReturns <code class=\"language-text\">true</code> if every element in this array satisfies the testing function.</p>\n<p><a href=\"array/fill\"><code class=\"language-text\">Array.prototype.fill()</code></a>\nFills all the elements of an array from a start index to an end index with a static value.</p>\n<p><a href=\"array/filter\"><code class=\"language-text\">Array.prototype.filter()</code></a>\nReturns a new array containing all elements of the calling array for which the provided filtering function returns <code class=\"language-text\">true</code>.</p>\n<p><a href=\"array/find\"><code class=\"language-text\">Array.prototype.find()</code></a>\nReturns the found <code class=\"language-text\">element</code> in the array, if some element in the array satisfies the testing function, or <code class=\"language-text\">undefined</code> if not found.</p>\n<p><a href=\"array/findindex\"><code class=\"language-text\">Array.prototype.findIndex()</code></a>\nReturns the found index in the array, if an element in the array satisfies the testing function, or <code class=\"language-text\">-1</code> if not found.</p>\n<p><a href=\"array/foreach\"><code class=\"language-text\">Array.prototype.forEach()</code></a>\nCalls a function for each element in the array.</p>\n<p><a href=\"array/includes\"><code class=\"language-text\">Array.prototype.includes()</code></a>\nDetermines whether the array contains a value, returning <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> as appropriate.</p>\n<p><a href=\"array/indexof\"><code class=\"language-text\">Array.prototype.indexOf()</code></a>\nReturns the first (least) index of an element within the array equal to an element, or <code class=\"language-text\">-1</code> if none is found.</p>\n<p><a href=\"array/join\"><code class=\"language-text\">Array.prototype.join()</code></a>\nJoins all elements of an array into a string.</p>\n<p><a href=\"array/keys\"><code class=\"language-text\">Array.prototype.keys()</code></a>\nReturns a new <code class=\"language-text\">Array Iterator</code> that contains the keys for each index in the array.</p>\n<p><a href=\"array/lastindexof\"><code class=\"language-text\">Array.prototype.lastIndexOf()</code></a>\nReturns the last (greatest) index of an element within the array equal to an element, or <code class=\"language-text\">-1</code> if none is found.</p>\n<p><a href=\"array/map\"><code class=\"language-text\">Array.prototype.map()</code></a>\nReturns a new array containing the results of calling a function on every element in this array.</p>\n<p><a href=\"array/pop\"><code class=\"language-text\">Array.prototype.pop()</code></a>\nRemoves the last element from an array and returns that element.</p>\n<p><a href=\"array/push\"><code class=\"language-text\">Array.prototype.push()</code></a>\nAdds one or more elements to the end of an array, and returns the new <code class=\"language-text\">length</code> of the array.</p>\n<p><a href=\"array/reduce\"><code class=\"language-text\">Array.prototype.reduce()</code></a>\nApply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.</p>\n<p><a href=\"array/reduceright\"><code class=\"language-text\">Array.prototype.reduceRight()</code></a>\nApply a function against an accumulator> and each value of the array (from right-to-left) as to reduce it to a single value.</p>\n<p><a href=\"array/reverse\"><code class=\"language-text\">Array.prototype.reverse()</code></a>\nReverses the order of the elements of an array <em>in place</em>. (First becomes the last, last becomes first.)</p>\n<p><a href=\"array/shift\"><code class=\"language-text\">Array.prototype.shift()</code></a>\nRemoves the first element from an array and returns that element.</p>\n<p><a href=\"array/slice\"><code class=\"language-text\">Array.prototype.slice()</code></a>\nExtracts a section of the calling array and returns a new array.</p>\n<p><a href=\"array/some\"><code class=\"language-text\">Array.prototype.some()</code></a>\nReturns <code class=\"language-text\">true</code> if at least one element in this array satisfies the provided testing function.</p>\n<p><a href=\"array/sort\"><code class=\"language-text\">Array.prototype.sort()</code></a>\nSorts the elements of an array in place and returns the array.</p>\n<p><a href=\"array/splice\"><code class=\"language-text\">Array.prototype.splice()</code></a>\nAdds and/or removes elements from an array.</p>\n<p><a href=\"array/tolocalestring\"><code class=\"language-text\">Array.prototype.toLocaleString()</code></a>\nReturns a localized string representing the array and its elements. Overrides the <a href=\"object/tolocalestring\"><code class=\"language-text\">Object.prototype.toLocaleString()</code></a> method.</p>\n<p><a href=\"array/tostring\"><code class=\"language-text\">Array.prototype.toString()</code></a>\nReturns a string representing the array and its elements. Overrides the <a href=\"object/tostring\"><code class=\"language-text\">Object.prototype.toString()</code></a> method.</p>\n<p><a href=\"array/unshift\"><code class=\"language-text\">Array.prototype.unshift()</code></a>\nAdds one or more elements to the front of an array, and returns the new <code class=\"language-text\">length</code> of the array.</p>\n<p><a href=\"array/values\"><code class=\"language-text\">Array.prototype.values()</code></a>\nReturns a new <code class=\"language-text\">Array Iterator</code> object that contains the values for each index in the array.</p>\n<p><a href=\"array/@@iterator\"><code class=\"language-text\">Array.prototype[@@iterator]()</code></a>\nReturns a new <code class=\"language-text\">Array Iterator</code> object that contains the values for each index in the array.</p>\n<h2>Examples</h2>\n<h3>Creating an array</h3>\n<p>The following example creates an array, <code class=\"language-text\">msgArray</code>, with a length of <code class=\"language-text\">0</code>, then assigns values to <code class=\"language-text\">msgArray[0]</code> and <code class=\"language-text\">msgArray[99]</code>, changing the <code class=\"language-text\">length</code> of the array to <code class=\"language-text\">100</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let msgArray = []\nmsgArray[0] = 'Hello'\nmsgArray[99] = 'world'\n\nif (msgArray.length === 100) {\n  console.log('The length is 100.')\n}</code></pre></div>\n<h3>Creating a two-dimensional array</h3>\n<p>The following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the <code class=\"language-text\">'p'</code> in <code class=\"language-text\">board[6][4]</code> to <code class=\"language-text\">board[4][4]</code>. The old position at <code class=\"language-text\">[6][4]</code> is made blank.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let board = [\n  ['R','N','B','Q','K','B','N','R'],\n  ['P','P','P','P','P','P','P','P'],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  ['p','p','p','p','p','p','p','p'],\n  ['r','n','b','q','k','b','n','r'] ]\n\nconsole.log(board.join('\\n') + '\\n\\n')\n\n// Move King's Pawn forward 2\nboard[4][4] = board[6][4]\nboard[6][4] = ' '\nconsole.log(board.join('\\n'))</code></pre></div>\n<p>Here is the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">R,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r</code></pre></div>\n<h3>Using an array to tabulate a set of values</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">values = []\nfor (let x = 0; x &lt; 10; x++){\n values.push([\n  2 ** x,\n  2 * x ** 2\n ])\n}\nconsole.table(values)</code></pre></div>\n<p>Results in</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// The first column is the index\n0   1   0\n1   2   2\n2   4   8\n3   8   18\n4   16  32\n5   32  50\n6   64  72\n7   128 98\n8   256 128\n9   512 162</code></pre></div>"}