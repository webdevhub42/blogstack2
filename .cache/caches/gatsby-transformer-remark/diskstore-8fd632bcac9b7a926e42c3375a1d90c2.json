{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-e73aaacf31d86950b711b667effc03df-gatsby-remark-prismjs-","val":"<iframe style=\"resize:both; overflow:scroll;\"  sandbox=\"allow-scripts\"  src=\"https://testing-playground.com/embed/27ea36b9aa7868d05a38787a6bd21518/99c765c3a2ac8895c8dd1b866b663186e1700093?panes=query,result\" height=\"450\" width=\"100%\" scrolling=\"yes\" frameBorder=\"0\"  title=\"Testing Playground\" style=\"display: block; width: 100%\">\n</iframe>\n<br>\n<h1>🧪 React Testing Library</h1>\n<h2>About Queries | Testing Library</h2>\n<blockquote>\n<h4>Excerpt</h4>\n<p>Overview</p>\n</blockquote>\n<hr>\n<h3>Overview</h3>\n<p>Queries are the methods that Testing Library gives you to find elements on the page. There are several <a href=\"https://testing-library.com/docs/queries/about/#types-of-queries\">types of queries</a> (\"get\", \"find\", \"query\"); the difference between them is whether the query will throw an error if no element is found or if it will return a Promise and retry. Depending on what page content you are selecting, different queries may be more or less appropriate. See the <a href=\"https://testing-library.com/docs/queries/about/#priority\">priority guide</a> for recommendations on how to make use of semantic queries to test your page in the most accessible way.</p>\n<p>After selecting an element, you can use the <a href=\"https://testing-library.com/docs/dom-testing-library/api-events\">Events API</a> or <a href=\"https://testing-library.com/docs/ecosystem-user-event\">user-event</a> to fire events and simulate user interactions with the page, or use Jest and <a href=\"https://testing-library.com/docs/ecosystem-jest-dom\">jest-dom</a> to make assertions about the element.</p>\n<p>There are Testing Library helper methods that work with queries. As elements appear and disappear in response to actions, <a href=\"https://testing-library.com/docs/dom-testing-library/api-async\">Async APIs</a> like <a href=\"https://testing-library.com/docs/dom-testing-library/api-async#waitfor\"><code class=\"language-text\">waitFor</code></a> or <a href=\"https://testing-library.com/docs/dom-testing-library/api-async#findby-queries\"><code class=\"language-text\">findBy</code> queries</a> can be used to await the changes in the DOM. To find only elements that are children of a specific element, you can use <a href=\"https://testing-library.com/docs/dom-testing-library/api-within\"><code class=\"language-text\">within</code></a>. If necessary, there are also a few options you can <a href=\"https://testing-library.com/docs/dom-testing-library/api-configuration\">configure</a>, like the timeout for retries and the default testID attribute.</p>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// (or /dom, /vue, ...)test('should show login form', () => {  render(&lt;Login />)</span>\n\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Events and assertions...})</span></code></pre></div>\n<h3>Types of Queries</h3>\n<ul>\n<li>\n<p>Single Elements</p>\n<ul>\n<li><code class=\"language-text\">getBy...</code>: Returns the matching node for a query, and throw a descriptive error if no elements match <em>or</em> if more than one match is found (use <code class=\"language-text\">getAllBy</code> instead if more than one element is expected).</li>\n<li><code class=\"language-text\">queryBy...</code>: Returns the matching node for a query, and return <code class=\"language-text\">null</code> if no elements match. This is useful for asserting an element that is not present. Throws an error if more than one match is found (use <code class=\"language-text\">queryAllBy</code> instead if this is OK).</li>\n<li><code class=\"language-text\">findBy...</code>: Returns a Promise which resolves when an element is found which matches the given query. The promise is rejected if no element is found or if more than one element is found after a default timeout of 1000ms. If you need to find more than one element, use <code class=\"language-text\">findAllBy</code>.</li>\n</ul>\n</li>\n<li>\n<p>Multiple Elements</p>\n<ul>\n<li><code class=\"language-text\">getAllBy...</code>: Returns an array of all matching nodes for a query, and throws an error if no elements match.</li>\n<li><code class=\"language-text\">queryAllBy...</code>: Returns an array of all matching nodes for a query, and return an empty array (<code class=\"language-text\">[]</code>) if no elements match.</li>\n<li>\n<p><code class=\"language-text\">findAllBy...</code>: Returns a promise which resolves to an array of elements when any elements are found which match the given query. The promise is rejected if no elements are found after a default timeout of <code class=\"language-text\">1000</code>ms.</p>\n<ul>\n<li><code class=\"language-text\">findBy</code> methods are a combination of <code class=\"language-text\">getBy*</code> queries and <a href=\"https://testing-library.com/docs/dom-testing-library/api-async#waitfor\"><code class=\"language-text\">waitFor</code></a>. They accept the <code class=\"language-text\">waitFor</code> options as the last argument (i.e. <code class=\"language-text\">await screen.findByText('text', queryOptions, waitForOptions)</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Summary Table</p>\n<table>\n<thead>\n<tr>\n<th>Type of Query</th>\n<th>0 Matches</th>\n<th>1 Match</th>\n<th>>1 Matches</th>\n<th>Retry (Async/Await)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Single Element</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">getBy...</code></td>\n<td>Throw error</td>\n<td>Return element</td>\n<td>Throw error</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">queryBy...</code></td>\n<td>Return <code class=\"language-text\">null</code></td>\n<td>Return element</td>\n<td>Throw error</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">findBy...</code></td>\n<td>Throw error</td>\n<td>Return element</td>\n<td>Throw error</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><strong>Multiple Elements</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">getAllBy...</code></td>\n<td>Throw error</td>\n<td>Return array</td>\n<td>Return array</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">queryAllBy...</code></td>\n<td>Return <code class=\"language-text\">[]</code></td>\n<td>Return array</td>\n<td>Return array</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">findAllBy...</code></td>\n<td>Throw error</td>\n<td>Return array</td>\n<td>Return array</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<h3>Priority</h3>\n<p>Based on <a href=\"https://testing-library.com/docs/guiding-principles\">the Guiding Principles</a>, your test should resemble how users interact with your code (component, page, etc.) as much as possible. With this in mind, we recommend this order of priority:</p>\n<ol>\n<li>\n<p><strong>Queries Accessible to Everyone</strong> Queries that reflect the experience of visual/mouse users as well as those that use assistive technology.</p>\n<ol>\n<li><code class=\"language-text\">getByRole</code>: This can be used to query every element that is exposed in the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/AOM\">accessibility tree</a>. With the <code class=\"language-text\">name</code> option you can filter the returned elements by their <a href=\"https://www.w3.org/TR/accname-1.1/\">accessible name</a>. This should be your top preference for just about everything. There's not much you can't get with this (if you can't, it's possible your UI is inaccessible). Most often, this will be used with the <code class=\"language-text\">name</code> option like so: <code class=\"language-text\">getByRole('button', {name: /submit/i})</code>. Check the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#Roles\">list of roles</a>.</li>\n<li><code class=\"language-text\">getByLabelText</code>: This method is really good for form fields. When navigating through a website form, users find elements using label text. This method emulates that behavior, so it should be your top preference.</li>\n<li><code class=\"language-text\">getByPlaceholderText</code>: <a href=\"https://www.nngroup.com/articles/form-design-placeholders/\">A placeholder is not a substitute for a label</a>. But if that's all you have, then it's better than alternatives.</li>\n<li><code class=\"language-text\">getByText</code>: Outside of forms, text content is the main way users find elements. This method can be used to find non-interactive elements (like divs, spans, and paragraphs).</li>\n<li><code class=\"language-text\">getByDisplayValue</code>: The current value of a form element can be useful when navigating a page with filled-in values.</li>\n</ol>\n</li>\n<li>\n<p><strong>Semantic Queries</strong> HTML5 and ARIA compliant selectors. Note that the user experience of interacting with these attributes varies greatly across browsers and assistive technology.</p>\n<ol>\n<li><code class=\"language-text\">getByAltText</code>: If your element is one which supports <code class=\"language-text\">alt</code> text (<code class=\"language-text\">img</code>, <code class=\"language-text\">area</code>, <code class=\"language-text\">input</code>, and any custom element), then you can use this to find that element.</li>\n<li><code class=\"language-text\">getByTitle</code>: The title attribute is not consistently read by screenreaders, and is not visible by default for sighted users</li>\n</ol>\n</li>\n<li>\n<p><strong>Test IDs</strong></p>\n<ol>\n<li><code class=\"language-text\">getByTestId</code>: The user cannot see (or hear) these, so this is only recommended for cases where you can't match by role or text or it doesn't make sense (e.g. the text is dynamic).</li>\n</ol>\n</li>\n</ol>\n<h3>Using Queries</h3>\n<p>The base queries from DOM Testing Library require you to pass a <code class=\"language-text\">container</code> as the first argument. Most framework-implementations of Testing Library provide a pre-bound version of these queries when you render your components with them which means you <em>do not have to provide a container</em>. In addition, if you just want to query <code class=\"language-text\">document.body</code> then you can use the <a href=\"https://testing-library.com/docs/queries/about/#screen\"><code class=\"language-text\">screen</code></a> export as demonstrated below (using <code class=\"language-text\">screen</code> is recommended).</p>\n<p>The primary argument to a query can be a <em>string</em>, <em>regular expression</em>, or <em>function</em>. There are also options to adjust how node text is parsed. See <a href=\"https://testing-library.com/docs/queries/about/#textmatch\">TextMatch</a> for documentation on what can be passed to a query.</p>\n<p>Given the following DOM elements (which can be rendered by React, Vue, Angular, or plain HTML code):</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username-input<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username-input<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can use a query to find an element (byLabelText, in this case):</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen<span class=\"token punctuation\">,</span> getByLabelText <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// With screen:</span>\n\n<span class=\"token keyword\">const</span> inputNode1 <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Without screen, you need to provide a container:</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> inputNode2 <span class=\"token operator\">=</span> <span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> <span class=\"token string\">'Username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4><code class=\"language-text\">screen</code></h4>\n<p>All of the queries exported by DOM Testing Library accept a <code class=\"language-text\">container</code> as the first argument. Because querying the entire <code class=\"language-text\">document.body</code> is very common, DOM Testing Library also exports a <code class=\"language-text\">screen</code> object which has every query that is pre-bound to <code class=\"language-text\">document.body</code> (using the <a href=\"https://testing-library.com/docs/dom-testing-library/api-within\"><code class=\"language-text\">within</code></a> functionality). Wrappers such as React Testing Library re-export <code class=\"language-text\">screen</code> so you can use it the same way.</p>\n<p>Here's how you use it:</p>\n<ul>\n<li>Native</li>\n<li>React</li>\n<li>Cypress</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/dom'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  &lt;label for=\"example\">Example&lt;/label>  &lt;input id=\"example\" /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> exampleInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>You need a global DOM environment to use <code class=\"language-text\">screen</code>. If you're using jest, with the <a href=\"https://jestjs.io/docs/en/configuration#testenvironment-string\">testEnvironment</a> set to <code class=\"language-text\">jsdom</code>, a global DOM environment will be available for you.</p>\n<p>If you're loading your test with a <code class=\"language-text\">script</code> tag, make sure it comes after the <code class=\"language-text\">body</code>. An example can be seen <a href=\"https://github.com/testing-library/dom-testing-library/issues/700#issuecomment-692218886\">here</a>.</p>\n</blockquote>\n<h3><code class=\"language-text\">TextMatch</code></h3>\n<p>Most of the query APIs take a <code class=\"language-text\">TextMatch</code> as an argument, which means the argument can be either a <em>string</em>, <em>regex</em>, or a <em>function</em> which returns <code class=\"language-text\">true</code> for a match and <code class=\"language-text\">false</code> for a mismatch.</p>\n<h4>TextMatch Examples</h4>\n<p>Given the following HTML:</p>\n<p><em><strong>Will</strong></em>** find the div:**</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Matching a string:screen.getByText('Hello World')</span>\n<span class=\"token comment\">// full string matchscreen.getByText('llo Worl', {exact: false})</span>\n<span class=\"token comment\">// substring matchscreen.getByText('hello world', {exact: false})</span>\n<span class=\"token comment\">// ignore case</span>\n<span class=\"token comment\">// Matching a regex:screen.getByText(/World/)</span>\n<span class=\"token comment\">// substring matchscreen.getByText(/world/i)</span>\n<span class=\"token comment\">// substring match, ignore casescreen.getByText(/^hello world$/i)</span>\n<span class=\"token comment\">// full string match, ignore casescreen.getByText(/Hello W?oRlD/i)</span>\n<span class=\"token comment\">// substring match, ignore case, searches for \"hello world\" or \"hello orld\"</span>\n<span class=\"token comment\">// Matching with a custom function:screen.getByText((content, element) => content.startsWith('Hello'))</span></code></pre></div>\n<p><em><strong>Will not</strong></em>** find the div:**</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// full string does not matchscreen.getByText('Goodbye World')</span>\n<span class=\"token comment\">// case-sensitive regex with different casescreen.getByText(/hello world/)</span>\n<span class=\"token comment\">// function looking for a span when it's actually a div:screen.getByText((content, element) => {  return element.tagName.toLowerCase() === 'span' &amp;&amp; content.startsWith('Hello')})</span></code></pre></div>\n<h4>Precision</h4>\n<p>Queries that take a <code class=\"language-text\">TextMatch</code> also accept an object as the final argument that can contain options that affect the precision of string matching:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">exact</code>: Defaults to <code class=\"language-text\">true</code>; matches full strings, case-sensitive. When false, matches substrings and is not case-sensitive.</p>\n<ul>\n<li><code class=\"language-text\">exact</code> has no effect on <code class=\"language-text\">regex</code> or <code class=\"language-text\">function</code> arguments.</li>\n<li>In most cases using a regex instead of a string gives you more control over fuzzy matching and should be preferred over <code class=\"language-text\">{ exact: false }</code>.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">normalizer</code>: An optional function which overrides normalization behavior. See <a href=\"https://testing-library.com/docs/queries/about/#normalization\"><code class=\"language-text\">Normalization</code></a>.</li>\n</ul>\n<h4>Normalization</h4>\n<p>Before running any matching logic against text in the DOM, <code class=\"language-text\">DOM Testing Library</code> automatically normalizes that text. By default, normalization consists of trimming whitespace from the start and end of text, and collapsing multiple adjacent whitespace characters into a single space.</p>\n<p>If you want to prevent that normalization, or provide alternative normalization (e.g. to remove Unicode control characters), you can provide a <code class=\"language-text\">normalizer</code> function in the options object. This function will be given a string and is expected to return a normalized version of that string.</p>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>Specifying a value for <code class=\"language-text\">normalizer</code> <em>replaces</em> the built-in normalization, but you can call <code class=\"language-text\">getDefaultNormalizer</code> to obtain a built-in normalizer, either to adjust that normalization or to call it from your own normalizer.</p>\n</blockquote>\n<p><code class=\"language-text\">getDefaultNormalizer</code> takes an options object which allows the selection of behaviour:</p>\n<ul>\n<li><code class=\"language-text\">trim</code>: Defaults to <code class=\"language-text\">true</code>. Trims leading and trailing whitespace</li>\n<li><code class=\"language-text\">collapseWhitespace</code>: Defaults to <code class=\"language-text\">true</code>. Collapses inner whitespace (newlines, tabs, repeated spaces) into a single space.</li>\n</ul>\n<hr>\n<h4>Normalization Examples</h4>\n<p>To perform a match against text without trimming:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> normalizer<span class=\"token operator\">:</span> <span class=\"token function\">getDefaultNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> trim<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To override normalization to remove some Unicode characters whilst keeping some (but not all) of the built-in normalization behavior:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">normalizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getDefaultNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> trim<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u200E-\\u200F]*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Debugging</h3>\n<h4><code class=\"language-text\">screen.debug()</code></h4>\n<p>For convenience screen also exposes a <code class=\"language-text\">debug</code> method in addition to the queries. This method is essentially a shortcut for <code class=\"language-text\">console.log(prettyDOM())</code>. It supports debugging the document, a single element, or an array of elements.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/dom'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  &lt;button>test&lt;/button>  &lt;span>multi-test&lt;/span>  &lt;div>multi-test&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// debug documentscreen.debug()</span>\n<span class=\"token comment\">// debug single elementscreen.debug(screen.getByText('test'))</span>\n<span class=\"token comment\">// debug multiple elementsscreen.debug(screen.getAllByText('multi-test'))</span></code></pre></div>\n<h4><code class=\"language-text\">screen.logTestingPlaygroundURL()</code></h4>\n<p>For debugging using <a href=\"https://testing-playground.com\">testing-playground</a>, screen exposes this convenient method which logs a URL that can be opened in a browser.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span>  <span class=\"token punctuation\">{</span>screen<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/dom'</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  &lt;button>test&lt;/button>  &lt;span>multi-test&lt;/span>  &lt;div>multi-test&lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// log entire document to testing-playgroundscreen.logTestingPlaygroundURL()</span>\n<span class=\"token comment\">// log a single elementscreen.logTestingPlaygroundURL(screen.getByText('test'))</span></code></pre></div>\n<h3>Manual Queries</h3>\n<p>On top of the queries provided by the testing library, you can use the regular <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"><code class=\"language-text\">querySelector</code> DOM API</a> to query elements. Note that using this as an escape hatch to query by class or id is not recommended because they are invisible to the user. Use a testid if you have to, to make your intention to fall back to non-semantic queries clear and establish a stable API contract in the HTML.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// @testing-library/react</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-foo=\"bar\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Browser extension</h3>\n<p>Do you still have problems knowing how to use Testing Library queries?</p>\n<p>There is a very cool Browser extension for <a href=\"https://chrome.google.com/webstore/detail/testing-playground/hejbmebodbijjdhflfknehhcgaklhano/related\">Chrome</a> and <a href=\"https://addons.mozilla.org/en/firefox/addon/testing-playground/\">Firefox</a> named Testing Playground, and it helps you find the best queries to select elements. It allows you to inspect the element hierarchies in the Browser's Developer Tools, and provides you with suggestions on how to select them, while encouraging good testing practices.</p>\n<h3>Playground</h3>\n<p>If you want to get more familiar with these queries, you can try them out on <a href=\"https://testing-playground.com\">testing-playground.com</a>. Testing Playground is an interactive sandbox where you can run different queries against your own html, and get visual feedback matching the rules mentioned above.</p>\n<h1>🕚 React Testing Library (events)</h1>\n<h2>Firing Events | Testing Library</h2>\n<blockquote>\n<p><strong>Excerpt</strong></p>\n<p>Note</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>Most projects have a few use cases for <code class=\"language-text\">fireEvent</code>, but the majority of the time you should probably use [<code class=\"language-text\">@testing-library/user-event</code>](https: //testing-library.com/docs/ecosystem-user-event).</p>\n</blockquote>\n<h3><code class=\"language-text\">fireEvent</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">fireEvent</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Fire DOM events.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// &lt;button>Submit&lt;/button>fireEvent(  getByText(container, 'Submit'),  new MouseEvent('click', {    bubbles: true,    cancelable: true,  }),)</span></code></pre></div>\n<h3><code class=\"language-text\">fireEvent[eventName]</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">fireEvent<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> eventProperties<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Convenience methods for firing DOM events. Check out [src/event-map.js](https: //github.com/testing-library/dom-testing-library/blob/master/src/event-map.js) for a full list as well as default <code class=\"language-text\">eventProperties</code>.</p>\n<p><strong>target</strong>: When an event is dispatched on an element, the event has the subjected element on a property called <code class=\"language-text\">target</code>. As a convenience, if you provide a <code class=\"language-text\">target</code> property in the <code class=\"language-text\">eventProperties</code> (second argument), then those properties will be assigned to the node which is receiving the event.</p>\n<p>This is particularly useful for a change event:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">username</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// note: attempting to manually set the files property of an HTMLInputElement</span>\n<span class=\"token comment\">// results in an error as the files property is read-only.</span>\n<span class=\"token comment\">// this feature works around that by using Object.defineProperty.fireEvent.change(getByLabelText(/picture/i), {  target: {    files: [new File(['(⌐□_□)'], 'chucknorris.png', {type: 'image/png'})],  },})</span>\n<span class=\"token comment\">// Note: The 'value' attribute must use ISO 8601 format when firing a</span>\n<span class=\"token comment\">// change event on an input of type \"date\". Otherwise the element will not</span>\n<span class=\"token comment\">// reflect the changed value.</span>\n<span class=\"token comment\">// Invalid:fireEvent.change(input, {target: {value: '24/05/2020'}})</span>\n<span class=\"token comment\">// Valid:fireEvent.change(input, {target: {value: '2020-05-24'}})</span></code></pre></div>\n<p><strong>dataTransfer</strong>: Drag events have a <code class=\"language-text\">dataTransfer</code> property that contains data transferred during the operation. As a convenience, if you provide a <code class=\"language-text\">dataTransfer</code> property in the <code class=\"language-text\">eventProperties</code> (second argument), then those properties will be added to the event.</p>\n<p>This should predominantly be used for testing drag and drop interactions.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">drop files here</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    dataTransfer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'(⌐□_□)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chucknorris.png'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'image/png'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Keyboard events</strong>: There are three event types related to keyboard input - <code class=\"language-text\">keyPress</code>, <code class=\"language-text\">keyDown</code>, and <code class=\"language-text\">keyUp</code>. When firing these you need to reference an element in the DOM and the key you want to fire.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>domNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">,</span> code<span class=\"token operator\">:</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">,</span> charCode<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>domNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> code<span class=\"token operator\">:</span> <span class=\"token string\">'KeyA'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can find out which key code to use at [https: //keycode.info/](https: //keycode.info).</p>\n<h3><code class=\"language-text\">createEvent[eventName]</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">createEvent<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> eventProperties<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Convenience methods for creating DOM events that can then be fired by <code class=\"language-text\">fireEvent</code>, allowing you to have a reference to the event created: this might be useful if you need to access event properties that cannot be initiated programmatically (such as <code class=\"language-text\">timeStamp</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myEvent <span class=\"token operator\">=</span> createEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>button<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token function\">fireEvent</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> myEvent<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// myEvent.timeStamp can be accessed just like any other properties from myEvent</span>\n<span class=\"token comment\">// note: The access to the events created by `createEvent` is based on the native event API,</span>\n<span class=\"token comment\">// Therefore, native properties of HTMLEvent object (e.g. `timeStamp`, `cancelable`, `type`) should be set using Object.defineProperty</span>\n<span class=\"token comment\">// For more info see: https:</span>\n<span class=\"token comment\">//developer.mozilla.org/en-US/docs/Web/API/Event</span></code></pre></div>\n<p>You can also create generic events:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// simulate the 'input' event on a file inputfireEvent(  input,  createEvent('input', input, {    target: {files: inputFiles},    ...init,  }),)</span></code></pre></div>\n<h3>Using Jest Function Mocks</h3>\n<p>[Jest's Mock functions](https: //jestjs.io/docs/en/mock-functions) can be used to test that a callback passed to the function was called, or what it was called when the event that <strong>should</strong> trigger the callback function does trigger the bound callback.</p>\n<ul>\n<li>React</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span>  <span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calls onClick prop when clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">click me</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>"}