{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-ed067dc721671b90bae8a2403d57c897-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/divide-two-integers/description/\">29. Divide Two Integers</a></h2>\n<h3>Problem:</h3>\n<p>Given two integers <code class=\"language-text\">dividend</code> and <code class=\"language-text\">divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\n<p>Return the quotient after dividing <code class=\"language-text\">dividend</code> by <code class=\"language-text\">divisor</code>.</p>\n<p>The integer division should truncate toward zero.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: dividend = 10, divisor = 3\nOutput: 3</code></pre></div>\n<p><strong>Example 2:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">Input: dividend = 7, divisor = -3\nOutput: -2</code></pre></div>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Both dividend and divisor will be 32-bit signed integers.</li>\n<li>The divisor will never be 0.</li>\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li>\n</ul>\n<h3>Solution:</h3>\n<p>Every decimal number can be represented as <code class=\"language-text\">a0*2^0 + a1*2^1 + a2*2^2 + ... + an*2^n</code>.</p>\n<p>Replace multiplication and division with binary shifting.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">divide</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dividend<span class=\"token punctuation\">,</span> divisor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> dividend <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> dividend <span class=\"token operator\">></span> <span class=\"token number\">2147483647</span> <span class=\"token operator\">||</span> dividend <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> isNegative <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pDividend <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>dividend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pDivisor <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pDividend <span class=\"token operator\">&lt;</span> pDivisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> doubling <span class=\"token operator\">=</span> pDivisor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>doubling <span class=\"token operator\">&lt;</span> pDividend <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>doubling <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        doubling <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doubling <span class=\"token operator\">></span> pDividend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        doubling <span class=\"token operator\">>>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">>>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>pDividend <span class=\"token operator\">-</span> doubling<span class=\"token punctuation\">,</span> pDivisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> isNegative <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>result <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}