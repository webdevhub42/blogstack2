{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-9753b948b25ace4c978cef1bfade7625-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/description/\">4. Median of Two Sorted Arrays</a></h2>\n<h3>Problem:</h3>\n<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0</code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5</code></pre></div>\n<h3>Solution:</h3>\n<p>O(log (m+n)) means half of the sequence is ruled out on each loop. So obviously we need binary search.</p>\n<p>To do it on two sorted arrays, we need a formula to guide division.</p>\n<p>Let <code class=\"language-text\">nums3</code> be the sorted array combining all the items in <code class=\"language-text\">nums1</code> and <code class=\"language-text\">nums2</code>.</p>\n<p>If <code class=\"language-text\">nums2[j-1] &lt;= nums1[i] &lt;= nums2[j]</code>, then we know <code class=\"language-text\">nums1[i]</code> is at <code class=\"language-text\">num3[i+j]</code>. Same goes <code class=\"language-text\">nums1[i-1] &lt;= nums2[j] &lt;= nums1[i]</code>.</p>\n<p>Let <code class=\"language-text\">k</code> be <code class=\"language-text\">⌊(m+n-1)/2⌋</code>. We need to find <code class=\"language-text\">nums3[k]</code> (and also <code class=\"language-text\">nums3[k+1]</code> if m+n is even).</p>\n<p>Let <code class=\"language-text\">i + j = k</code>, if we find <code class=\"language-text\">nums2[j-1] &lt;= nums1[i] &lt;= nums2[j]</code> or <code class=\"language-text\">nums1[i-1] &lt;= nums2[j] &lt;= nums1[i]</code>, then we got <code class=\"language-text\">k</code>.</p>\n<p>Otherwise, if <code class=\"language-text\">nums1[i] &lt;= nums2[j]</code> then we know <code class=\"language-text\">nums1[i] &lt; nums2[j-1]</code> (because we did not find <code class=\"language-text\">k</code>).</p>\n<ul>\n<li>There are <code class=\"language-text\">i</code> items before <code class=\"language-text\">nums1[i]</code>, and <code class=\"language-text\">j-1</code> items brefor <code class=\"language-text\">nums2[j-1]</code>, which means <code class=\"language-text\">nums1[0...i]</code> are before <code class=\"language-text\">nums3[i+j-1]</code>. So we now know <code class=\"language-text\">nums1[0...i] &lt; nums3[k]</code>. They can be safely discarded.</li>\n<li></li>\n<li>We Also have <code class=\"language-text\">nums1[i] &lt; nums2[j]</code>, which means <code class=\"language-text\">nums2[j...n)</code> are after <code class=\"language-text\">nums3[i+j]</code>. So <code class=\"language-text\">nums2[j...n) > nums3[k]</code>.</li>\n</ul>\n<p>Same goes <code class=\"language-text\">nums1[i-1] &lt;= nums2[j] &lt;= nums1[i]</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">findMedianSortedArrays</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums1<span class=\"token punctuation\">,</span> nums2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> nums2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_find</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">_find</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_find</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// So that the `i` below is always smalller than k,</span>\n        <span class=\"token comment\">// which makes `j` always non-negative</span>\n        <span class=\"token punctuation\">[</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nums2<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> e1 <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> e2 <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">&lt;</span> e1 <span class=\"token operator\">||</span> s2 <span class=\"token operator\">&lt;</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e1 <span class=\"token operator\">-</span> s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> j <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ni <span class=\"token operator\">=</span> i <span class=\"token operator\">>=</span> e1 <span class=\"token operator\">?</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nj <span class=\"token operator\">=</span> j <span class=\"token operator\">>=</span> e2 <span class=\"token operator\">?</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ni_1 <span class=\"token operator\">=</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nj_1 <span class=\"token operator\">=</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nj_1 <span class=\"token operator\">&lt;=</span> ni <span class=\"token operator\">&amp;&amp;</span> ni <span class=\"token operator\">&lt;=</span> nj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ni<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ni_1 <span class=\"token operator\">&lt;=</span> nj <span class=\"token operator\">&amp;&amp;</span> nj <span class=\"token operator\">&lt;=</span> ni<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nj<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ni <span class=\"token operator\">&lt;=</span> nj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            e2 <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            s2 <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            e1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}