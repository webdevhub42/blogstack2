{"expireTime":9007200911206588000,"key":"transformer-remark-markdown-html-01ad708301057a2d7b3e2d481d6e83d0-gatsby-remark-prismjs-","val":"<h1>Python Snippets</h1>\n<hr>\n<hr>\n<h3>Calculates the date of <code class=\"language-text\">n</code> days from the given date</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.timedelta</code> and the <code class=\"language-text\">+</code> operator to calculate the new <code class=\"language-text\">datetime.datetime</code> value after adding <code class=\"language-text\">n</code> days to <code class=\"language-text\">d</code>.</li>\n<li>Omit the second argument, <code class=\"language-text\">d</code>, to use a default value of <code class=\"language-text\">datetime.today()</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_days</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> d <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\nadd_days<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># date(2020, 10, 30)</span>\nadd_days<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># date(2020, 10, 20)</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if all elements in a list are equal</h3>\n<ul>\n<li>Use <code class=\"language-text\">set()</code> to eliminate duplicate elements and then use <code class=\"language-text\">len()</code> to check if length is <code class=\"language-text\">1</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">all_equal</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">all_equal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\nall_equal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if all the values in a list are unique</h3>\n<ul>\n<li>Use <code class=\"language-text\">set()</code> on the given list to keep only unique occurrences.</li>\n<li>Use <code class=\"language-text\">len()</code> to compare the length of the unique values to the original list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">all_unique</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nall_unique<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nall_unique<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Generates a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit</h3>\n<ul>\n<li>Use <code class=\"language-text\">range()</code> and <code class=\"language-text\">list()</code> with the appropriate start, step and end values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">arithmetic_progression</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> lim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> lim <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">arithmetic_progression<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [5, 10, 15, 20, 25]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the average of two or more numbers</h3>\n<ul>\n<li>Use <code class=\"language-text\">sum()</code> to sum all of the <code class=\"language-text\">args</code> provided, divide by <code class=\"language-text\">len()</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">average<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.0</span>\naverage<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the average of a list, after mapping each element to a value using the provided function</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> to map each element to the value returned by <code class=\"language-text\">fn</code>.</li>\n<li>Use <code class=\"language-text\">sum()</code> to sum all of the mapped values, divide by <code class=\"language-text\">len(lst)</code>.</li>\n<li>Omit the last argument, <code class=\"language-text\">fn</code>, to use the default identity function.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">average_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">average_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Splits values into two groups, based on the result of the given <code class=\"language-text\">filter</code> list</h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">zip()</code> to add elements to groups, based on <code class=\"language-text\">filter</code>.</li>\n<li>If <code class=\"language-text\">filter</code> has a truthy value for any element, add it to the first group, otherwise add it to the second group.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">bifurcate</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> flag <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> flag <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> flag<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">bifurcate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'beep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ ['beep', 'boop', 'bar'], ['foo'] ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Splits values into two groups, based on the result of the given filtering function</h3>\n<ul>\n<li>Use a list comprehension to add elements to groups, based on the value returned by <code class=\"language-text\">fn</code> for each element.</li>\n<li>If <code class=\"language-text\">fn</code> returns a truthy value for any element, add it to the first group, otherwise add it to the second group.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">bifurcate_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">bifurcate_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'beep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ ['beep', 'boop', 'bar'], ['foo'] ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the number of ways to choose <code class=\"language-text\">k</code> items from <code class=\"language-text\">n</code> items without repetition and without order</h3>\n<ul>\n<li>Use <code class=\"language-text\">math.comb()</code> to calculate the binomial coefficient.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> comb\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">binomial_coefficient</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> comb<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">binomial_coefficient<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the length of a string in bytes</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.encode('utf-8')</code> to encode the given string and return its length.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">byte_size</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">byte_size<span class=\"token punctuation\">(</span><span class=\"token string\">'😀'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4</span>\nbyte_size<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 11</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a string to camelcase</h3>\n<ul>\n<li>Use <code class=\"language-text\">re.sub()</code> to replace any <code class=\"language-text\">-</code> or <code class=\"language-text\">_</code> with a space, using the regexp <code class=\"language-text\">r\"(_|-)+\"</code>.</li>\n<li>Use <code class=\"language-text\">str.title()</code> to capitalize the first letter of each word and convert the rest to lowercase.</li>\n<li>Finally, use <code class=\"language-text\">str.replace()</code> to remove spaces between words.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> re <span class=\"token keyword\">import</span> sub\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">camel</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  s <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\"(_|-)+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">camel<span class=\"token punctuation\">(</span><span class=\"token string\">'some_database_field_name'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'someDatabaseFieldName'</span>\ncamel<span class=\"token punctuation\">(</span><span class=\"token string\">'Some label that needs to be camelized'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'someLabelThatNeedsToBeCamelized'</span>\ncamel<span class=\"token punctuation\">(</span><span class=\"token string\">'some-javascript-property'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'someJavascriptProperty'</span>\ncamel<span class=\"token punctuation\">(</span><span class=\"token string\">'some-mixed_string with spaces_underscores-and-hyphens'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'someMixedStringWithSpacesUnderscoresAndHyphens'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Capitalizes the first letter of a string</h3>\n<ul>\n<li>Use list slicing and <code class=\"language-text\">str.upper()</code> to capitalize the first letter of the string.</li>\n<li>Use <code class=\"language-text\">str.join()</code> to combine the capitalized first letter with the rest of the characters.</li>\n<li>Omit the <code class=\"language-text\">lower_rest</code> parameter to keep the rest of the string intact, or set it to <code class=\"language-text\">True</code> to convert to lowercase.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">capitalize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> lower_rest <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> lower_rest <span class=\"token keyword\">else</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">capitalize<span class=\"token punctuation\">(</span><span class=\"token string\">'fooBar'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'FooBar'</span>\ncapitalize<span class=\"token punctuation\">(</span><span class=\"token string\">'fooBar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Foobar'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Capitalizes the first letter of every word in a string</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.title()</code> to capitalize the first letter of every word in the string.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">capitalize_every_word</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">capitalize_every_word<span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Hello World!'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Casts the provided value as a list if it's not one</h3>\n<ul>\n<li>Use <code class=\"language-text\">isinstance()</code> to check if the given value is enumerable.</li>\n<li>Return it by using <code class=\"language-text\">list()</code> or encapsulated in a list accordingly.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">cast_list</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">cast_list<span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['foo']</span>\ncast_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\ncast_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['foo', 'bar']</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts Celsius to Fahrenheit.</p>\n<ul>\n<li>Follow the conversion formula <code class=\"language-text\">F = 1.8 * C + 32</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">celsius_to_fahrenheit</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>degrees <span class=\"token operator\">*</span> <span class=\"token number\">1.8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">celsius_to_fahrenheit<span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 356.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a function that will invoke a predicate function for the specified property on a given object</h3>\n<ul>\n<li>Return a <code class=\"language-text\">lambda</code> function that takes an object and applies the predicate function, <code class=\"language-text\">fn</code> to the specified property.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_prop</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">lambda</span> obj<span class=\"token punctuation\">:</span> fn<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">check_age <span class=\"token operator\">=</span> check_prop<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\nuser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\ncheck_age<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Chunks a list into smaller lists of a specified size</h3>\n<ul>\n<li>Use <code class=\"language-text\">list()</code> and <code class=\"language-text\">range()</code> to create a list of the desired <code class=\"language-text\">size</code>.</li>\n<li>Use <code class=\"language-text\">map()</code> on the list and fill it with splices of the given list.</li>\n<li>Finally, return the created list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> ceil\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n    <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> lst<span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> size<span class=\"token punctuation\">:</span>x <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ceil<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">chunk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [[1, 2], [3, 4], [5]]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Chunks a list into <code class=\"language-text\">n</code> smaller lists</h3>\n<ul>\n<li>Use <code class=\"language-text\">math.ceil()</code> and <code class=\"language-text\">len()</code> to get the size of each chunk.</li>\n<li>Use <code class=\"language-text\">list()</code> and <code class=\"language-text\">range()</code> to create a new list of size <code class=\"language-text\">n</code>.</li>\n<li>Use <code class=\"language-text\">map()</code> to map each element of the new list to a chunk the length of <code class=\"language-text\">size</code>.</li>\n<li>If the original list can't be split evenly, the final chunk will contain the remaining elements.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> ceil\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">chunk_into_n</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  size <span class=\"token operator\">=</span> ceil<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n    <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> lst<span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> size<span class=\"token punctuation\">:</span>x <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">chunk_into_n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [[1, 2], [3, 4], [5, 6], [7]]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Clamps <code class=\"language-text\">num</code> within the inclusive range specified by the boundary values</h3>\n<ul>\n<li>If <code class=\"language-text\">num</code> falls within the range (<code class=\"language-text\">a</code>, <code class=\"language-text\">b</code>), return <code class=\"language-text\">num</code>.</li>\n<li>Otherwise, return the nearest number in the range.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">clamp_number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">clamp_number<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\nclamp_number<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Inverts a dictionary with non-unique hashable values</h3>\n<ul>\n<li>Create a <code class=\"language-text\">collections.defaultdict</code> with <code class=\"language-text\">list</code> as the default value for each key.</li>\n<li>Use <code class=\"language-text\">dictionary.items()</code> in combination with a loop to map the values of the dictionary to keys using <code class=\"language-text\">dict.append()</code>.</li>\n<li>Use <code class=\"language-text\">dict()</code> to convert the <code class=\"language-text\">collections.defaultdict</code> to a regular dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">collect_dictionary</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  inv_obj <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    inv_obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>inv_obj<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\ncollect_dictionary<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 10: ['Peter', 'Isabel'], 9: ['Anna'] }</span></code></pre></div>\n<hr>\n<hr>\n<h3>Combines two or more dictionaries, creating a list of values for each key</h3>\n<ul>\n<li>Create a new <code class=\"language-text\">collections.defaultdict</code> with <code class=\"language-text\">list</code> as the default value for each key and loop over <code class=\"language-text\">dicts</code>.</li>\n<li>Use <code class=\"language-text\">dict.append()</code> to map the values of the dictionary to keys.</li>\n<li>Use <code class=\"language-text\">dict()</code> to convert the <code class=\"language-text\">collections.defaultdict</code> to a regular dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">combine_values</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dicts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  res <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> dicts<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n      res<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span>\nd2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span>\n\ncombine_values<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'a': [1, 3], 'b': ['foo', 200], 'c': [400], 'd': [400]}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Removes falsy values from a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">filter()</code> to filter out falsy values (<code class=\"language-text\">False</code>, <code class=\"language-text\">None</code>, <code class=\"language-text\">0</code>, and <code class=\"language-text\">\"\"</code>).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">compact<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [ 1, 2, 3, 'a', 's', 34 ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Performs right-to-left function composition</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.reduce()</code> to perform right-to-left function composition.</li>\n<li>The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fns<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">add5 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> <span class=\"token number\">5</span>\nmultiply <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> y\nmultiply_and_add_5 <span class=\"token operator\">=</span> compose<span class=\"token punctuation\">(</span>add5<span class=\"token punctuation\">,</span> multiply<span class=\"token punctuation\">)</span>\nmultiply_and_add_5<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 15</span></code></pre></div>\n<hr>\n<hr>\n<h3>Performs left-to-right function composition</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.reduce()</code> to perform left-to-right function composition.</li>\n<li>The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compose_right</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">:</span> g<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fns<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y\nsquare <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> x\nadd_and_square <span class=\"token operator\">=</span> compose_right<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span>\nadd_and_square<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 9</span></code></pre></div>\n<hr>\n<hr>\n<h3>Groups the elements of a list based on the given function and returns the count of elements in each group</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.defaultdict</code> to initialize a dictionary.</li>\n<li>Use <code class=\"language-text\">map()</code> to map the values of the given list using the given function.</li>\n<li>Iterate over the map and increase the element count each time it occurs.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  count <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\ncount_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {6: 2, 4: 1}</span>\ncount_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># {3: 2, 5: 1}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Counts the occurrences of a value in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">list.count()</code> to count the number of occurrences of <code class=\"language-text\">val</code> in <code class=\"language-text\">lst</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_occurrences</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">count_occurrences<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a list of partial sums</h3>\n<ul>\n<li>Use <code class=\"language-text\">itertools.accumulate()</code> to create the accumulated sum for each element.</li>\n<li>Use <code class=\"language-text\">list()</code> to convert the result into a list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> accumulate\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cumsum</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>accumulate<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">cumsum<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 3, 9, 18, 30]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Curries a function</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.partial()</code> to return a new partial object which behaves like <code class=\"language-text\">fn</code> with the given arguments, <code class=\"language-text\">args</code>, partially applied.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> partial<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y\nadd10 <span class=\"token operator\">=</span> curry<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nadd10<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 30</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a list of dates between <code class=\"language-text\">start</code> (inclusive) and <code class=\"language-text\">end</code> (not inclusive)</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.timedelta.days</code> to get the days between <code class=\"language-text\">start</code> and <code class=\"language-text\">end</code>.</li>\n<li>Use <code class=\"language-text\">int()</code> to convert the result to an integer and <code class=\"language-text\">range()</code> to iterate over each day.</li>\n<li>Use a list comprehension and <code class=\"language-text\">datetime.timedelta()</code> to create a list of <code class=\"language-text\">datetime.date</code> objects.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta<span class=\"token punctuation\">,</span> date\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">daterange</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\ndaterange<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [date(2020, 10, 1), date(2020, 10, 2), date(2020, 10, 3), date(2020, 10, 4)]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the date of <code class=\"language-text\">n</code> days ago from today</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.date.today()</code> to get the current day.</li>\n<li>Use <code class=\"language-text\">datetime.timedelta</code> to subtract <code class=\"language-text\">n</code> days from today's date.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta<span class=\"token punctuation\">,</span> date\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">days_ago</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">days_ago<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># date(2020, 10, 23)</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the day difference between two dates</h3>\n<ul>\n<li>Subtract <code class=\"language-text\">start</code> from <code class=\"language-text\">end</code> and use <code class=\"language-text\">datetime.timedelta.days</code> to get the day difference.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">days_diff</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>days</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\ndays_diff<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the date of <code class=\"language-text\">n</code> days from today</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.date.today()</code> to get the current day.</li>\n<li>Use <code class=\"language-text\">datetime.timedelta</code> to add <code class=\"language-text\">n</code> days from today's date.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta<span class=\"token punctuation\">,</span> date\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">days_from_now</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">days_from_now<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># date(2020, 11, 02)</span></code></pre></div>\n<hr>\n<hr>\n<h3>Decapitalizes the first letter of a string</h3>\n<ul>\n<li>Use list slicing and <code class=\"language-text\">str.lower()</code> to decapitalize the first letter of the string.</li>\n<li>Use <code class=\"language-text\">str.join()</code> to combine the lowercase first letter with the rest of the characters.</li>\n<li>Omit the <code class=\"language-text\">upper_rest</code> parameter to keep the rest of the string intact, or set it to <code class=\"language-text\">True</code> to convert to uppercase.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">decapitalize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> upper_rest <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> upper_rest <span class=\"token keyword\">else</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">decapitalize<span class=\"token punctuation\">(</span><span class=\"token string\">'FooBar'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'fooBar'</span>\ndecapitalize<span class=\"token punctuation\">(</span><span class=\"token string\">'FooBar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'fOOBAR'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Deep flattens a list</h3>\n<ul>\n<li>Use recursion.</li>\n<li>Use <code class=\"language-text\">isinstance()</code> with <code class=\"language-text\">collections.abc.Iterable</code> to check if an element is iterable.</li>\n<li>If it is iterable, apply <code class=\"language-text\">deep_flatten()</code> recursively, otherwise return <code class=\"language-text\">[lst]</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">deep_flatten</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span>\n          deep_flatten<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span>lst<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">deep_flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4, 5]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts an angle from degrees to radians</h3>\n<ul>\n<li>Use <code class=\"language-text\">math.pi</code> and the degrees to radians formula to convert the angle from degrees to radians.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">degrees_to_rads</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>deg <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">degrees_to_rads<span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ~3.1416</span></code></pre></div>\n<hr>\n<hr>\n<h3>Invokes the provided function after <code class=\"language-text\">ms</code> milliseconds</h3>\n<ul>\n<li>Use <code class=\"language-text\">time.sleep()</code> to delay the execution of <code class=\"language-text\">fn</code> by <code class=\"language-text\">ms / 1000</code> seconds.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sleep<span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">delay<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'later'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># prints 'later' after one second</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a dictionary to a list of tuples</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.items()</code> and <code class=\"language-text\">list()</code> to get a list of tuples from the given dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">dict_to_list</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\ndict_to_list<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [('one', 1), ('three', 3), ('five', 5), ('two', 2), ('four', 4)]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the difference between two iterables, without filtering duplicate values</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> from <code class=\"language-text\">b</code>.</li>\n<li>Use a list comprehension on <code class=\"language-text\">a</code> to only keep values not contained in the previously created set, <code class=\"language-text\">_b</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  _b <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> item <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _b<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">difference<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the difference between two lists, after applying the provided function to each list element of both</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code>, using <code class=\"language-text\">map()</code> to apply <code class=\"language-text\">fn</code> to each element in <code class=\"language-text\">b</code>.</li>\n<li>Use a list comprehension in combination with <code class=\"language-text\">fn</code> on <code class=\"language-text\">a</code> to only keep values not contained in the previously created set, <code class=\"language-text\">_b</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">difference_by</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  _b <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _b<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\ndifference_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1.2]</span>\ndifference_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> v <span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ { x: 2 } ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a number to a list of digits</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> combined with <code class=\"language-text\">int</code> on the string representation of <code class=\"language-text\">n</code> and return a list from the result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">digitize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">digitize<span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list with <code class=\"language-text\">n</code> elements removed from the left</h3>\n<ul>\n<li>Use slice notation to remove the specified number of elements from the left.</li>\n<li>Omit the last argument, <code class=\"language-text\">n</code>, to use a default value of <code class=\"language-text\">1</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span>\ndrop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3]</span>\ndrop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># []</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list with <code class=\"language-text\">n</code> elements removed from the right</h3>\n<ul>\n<li>Use slice notation to remove the specified number of elements from the right.</li>\n<li>Omit the last argument, <code class=\"language-text\">n</code>, to use a default value of <code class=\"language-text\">1</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">drop_right</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">drop_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span>\ndrop_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\ndrop_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># []</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code class=\"language-text\">True</code> for every element in the list</h3>\n<ul>\n<li>Use <code class=\"language-text\">all()</code> in combination with <code class=\"language-text\">map()</code> and <code class=\"language-text\">fn</code> to check if <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code> for all elements in the list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">every</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nevery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns every <code class=\"language-text\">nth</code> element in a list</h3>\n<ul>\n<li>Use slice notation to create a new list that contains every <code class=\"language-text\">nth</code> element of the given list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">every_nth</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> nth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span>nth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nth<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">every_nth<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [ 2, 4, 6 ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the factorial of a number</h3>\n<ul>\n<li>Use recursion.</li>\n<li>If <code class=\"language-text\">num</code> is less than or equal to <code class=\"language-text\">1</code>, return <code class=\"language-text\">1</code>.</li>\n<li>Otherwise, return the product of <code class=\"language-text\">num</code> and the factorial of <code class=\"language-text\">num - 1</code>.</li>\n<li>Throws an exception if <code class=\"language-text\">num</code> is a negative or a floating point number.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Number can't be floating point or negative.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> num <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">factorial<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 720</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts Fahrenheit to Celsius.</p>\n<ul>\n<li>Follow the conversion formula <code class=\"language-text\">C = (F - 32) * 5/9</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">fahrenheit_to_celsius</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>degrees <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">fahrenheit_to_celsius<span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 25.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Generates a list, containing the Fibonacci sequence, up until the nth term</h3>\n<ul>\n<li>Starting with <code class=\"language-text\">0</code> and <code class=\"language-text\">1</code>, use <code class=\"language-text\">list.append()</code> to add the sum of the last two numbers of the list to the end of the list, until the length of the list reaches <code class=\"language-text\">n</code>.</li>\n<li>If <code class=\"language-text\">n</code> is less or equal to <code class=\"language-text\">0</code>, return a list containing <code class=\"language-text\">0</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n    next_value <span class=\"token operator\">=</span> sequence<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sequence<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    sequence<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>next_value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> sequence</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">fibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 1, 2, 3, 5, 8, 13]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a list with the non-unique values filtered out</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.Counter</code> to get the count of each value in the list.</li>\n<li>Use a list comprehension to create a list containing only the unique values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">filter_non_unique</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item<span class=\"token punctuation\">,</span> count <span class=\"token keyword\">in</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">filter_non_unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 3, 5]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a list with the unique values filtered out</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.Counter</code> to get the count of each value in the list.</li>\n<li>Use a list comprehension to create a list containing only the non-unique values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">filter_unique</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item<span class=\"token punctuation\">,</span> count <span class=\"token keyword\">in</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> count <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">filter_unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 4]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the value of the first element in the given list that satisfies the provided testing function</h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">next()</code> to return the first element in <code class=\"language-text\">lst</code> for which <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the index of the first element in the given list that satisfies the provided testing function</h3>\n<ul>\n<li>Use a list comprehension, <code class=\"language-text\">enumerate()</code> and <code class=\"language-text\">next()</code> to return the index of the first element in <code class=\"language-text\">lst</code> for which <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the indexes of all elements in the given list that satisfy the provided testing function</h3>\n<ul>\n<li>Use <code class=\"language-text\">enumerate()</code> and a list comprehension to return the indexes of the all element in <code class=\"language-text\">lst</code> for which <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index_of_all</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find_index_of_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the first key in the provided dictionary that has the given value</h3>\n<ul>\n<li>Use <code class=\"language-text\">dictionary.items()</code> and <code class=\"language-text\">next()</code> to return the first key that has a value equal to <code class=\"language-text\">val</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_key</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nfind_key<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Isabel'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds all keys in the provided dictionary that have the given value</h3>\n<ul>\n<li>Use <code class=\"language-text\">dictionary.items()</code>, a generator and <code class=\"language-text\">list()</code> to return all keys that have a value equal to <code class=\"language-text\">val</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_keys</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nfind_keys<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [ 'Peter', 'Anna' ]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the value of the last element in the given list that satisfies the provided testing function</h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">next()</code> to return the last element in <code class=\"language-text\">lst</code> for which <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_last</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find_last<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the index of the last element in the given list that satisfies the provided testing function</h3>\n<ul>\n<li>Use a list comprehension, <code class=\"language-text\">enumerate()</code> and <code class=\"language-text\">next()</code> to return the index of the last element in <code class=\"language-text\">lst</code> for which <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_last_index</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find_last_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the items that are parity outliers in a given list</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.Counter</code> with a list comprehension to count even and odd values in the list.</li>\n<li>Use <code class=\"language-text\">collections.Counter.most_common()</code> to get the most common parity.</li>\n<li>Use a list comprehension to find all elements that do not match the most common parity.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_parity_outliers</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> nums\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">find_parity_outliers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Flattens a list of lists once</h3>\n<ul>\n<li>Use a list comprehension to extract each value from sub-lists in order.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> lst <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4, 5, 6, 7, 8]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Executes the provided function once for each list element</h3>\n<ul>\n<li>Use a <code class=\"language-text\">for</code> loop to execute <code class=\"language-text\">fn</code> for each element in <code class=\"language-text\">itr</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> itr<span class=\"token punctuation\">:</span>\n    fn<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">for_each<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 2 3</span></code></pre></div>\n<hr>\n<hr>\n<h3>Executes the provided function once for each list element, starting from the list's last element</h3>\n<ul>\n<li>Use a <code class=\"language-text\">for</code> loop in combination with slice notation to execute <code class=\"language-text\">fn</code> for each element in <code class=\"language-text\">itr</code>, starting from the last one.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">for_each_right</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> itr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    fn<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">for_each_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3 2 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a dictionary with the unique values of a list as keys and their frequencies as the values</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.defaultdict()</code> to store the frequencies of each unique element.</li>\n<li>Use <code class=\"language-text\">dict()</code> to return a dictionary with the unique elements of the list as keys and their frequencies as the values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">frequencies</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  freq <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    freq<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>freq<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">frequencies<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'a': 4, 'b': 2, 'c': 1 }</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a date from its ISO-8601 representation</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.datetime.fromisoformat()</code> to convert the given ISO-8601 date to a <code class=\"language-text\">datetime.datetime</code> object.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">from_iso_date</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> datetime<span class=\"token punctuation\">.</span>fromisoformat<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">from_iso_date<span class=\"token punctuation\">(</span><span class=\"token string\">'2020-10-28T12:30:59.000000'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-10-28 12:30:59</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the greatest common divisor of a list of numbers</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.reduce()</code> and <code class=\"language-text\">math.gcd()</code> over the given list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> gcd <span class=\"token keyword\">as</span> _gcd\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>_gcd<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">gcd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4</span></code></pre></div>\n<hr>\n<hr>\n<h3>Initializes a list containing the numbers in the specified range where <code class=\"language-text\">start</code> and <code class=\"language-text\">end</code> are inclusive and the ratio between two terms is <code class=\"language-text\">step</code></h3>\n<p>Returns an error if <code class=\"language-text\">step</code> equals <code class=\"language-text\">1</code>.</p>\n<ul>\n<li>Use <code class=\"language-text\">range()</code>, <code class=\"language-text\">math.log()</code> and <code class=\"language-text\">math.floor()</code> and a list comprehension to create a list of the appropriate length, applying the step for each element.</li>\n<li>Omit the second argument, <code class=\"language-text\">start</code>, to use a default value of <code class=\"language-text\">1</code>.</li>\n<li>Omit the third argument, <code class=\"language-text\">step</code>, to use a default value of <code class=\"language-text\">2</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor<span class=\"token punctuation\">,</span> log\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">geometric_progression</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start <span class=\"token operator\">*</span> step <span class=\"token operator\">**</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">(</span>end <span class=\"token operator\">/</span> start<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">/</span> log<span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">geometric_progression<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 4, 8, 16, 32, 64, 128, 256]</span>\ngeometric_progression<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 6, 12, 24, 48, 96, 192]</span>\ngeometric_progression<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 4, 16, 64, 256]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Retrieves the value of the nested key indicated by the given selector list from a dictionary or list</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.reduce()</code> to iterate over the <code class=\"language-text\">selectors</code> list.</li>\n<li>Apply <code class=\"language-text\">operator.getitem()</code> for each key in <code class=\"language-text\">selectors</code>, retrieving the value to be used as the iteratee for the next iteration.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token keyword\">from</span> operator <span class=\"token keyword\">import</span> getitem\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>getitem<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'freddy'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'first'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'last'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'smith'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'postIds'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nget<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'freddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'last'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'smith'</span>\nget<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'freddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'postIds'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span></code></pre></div>\n<hr>\n<hr>\n<h3>Groups the elements of a list based on the given function</h3>\n<ul>\n<li>Use <code class=\"language-text\">collections.defaultdict</code> to initialize a dictionary.</li>\n<li>Use <code class=\"language-text\">fn</code> in combination with a <code class=\"language-text\">for</code> loop and <code class=\"language-text\">dict.append()</code> to populate the dictionary.</li>\n<li>Use <code class=\"language-text\">dict()</code> to convert it to a regular dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">group_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  d <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\ngroup_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {4: [4.2], 6: [6.1, 6.3]}</span>\ngroup_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># {3: ['one', 'two'], 5: ['three']}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the Hamming distance between two values</h3>\n<ul>\n<li>Use the XOR operator (<code class=\"language-text\">^</code>) to find the bit difference between the two numbers.</li>\n<li>Use <code class=\"language-text\">bin()</code> to convert the result to a binary string.</li>\n<li>Convert the string to a list and use <code class=\"language-text\">count()</code> of <code class=\"language-text\">str</code> class to count and return the number of <code class=\"language-text\">1</code>s in it.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">hamming_distance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">hamming_distance<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if there are duplicate values in a flat list</h3>\n<ul>\n<li>Use <code class=\"language-text\">set()</code> on the given list to remove duplicates, compare its length with the length of the list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">has_duplicates</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nhas_duplicates<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nhas_duplicates<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if two lists contain the same elements regardless of order</h3>\n<ul>\n<li>Use <code class=\"language-text\">set()</code> on the combination of both lists to find the unique values.</li>\n<li>Iterate over them with a <code class=\"language-text\">for</code> loop comparing the <code class=\"language-text\">count()</code> of each unique value in each list.</li>\n<li>Return <code class=\"language-text\">False</code> if the counts do not match for any element, <code class=\"language-text\">True</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">have_same_contents</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">have_same_contents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the head of a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">lst[0]</code> to return the first element of the passed list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">head</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a hexadecimal color code to a tuple of integers corresponding to its RGB components</h3>\n<ul>\n<li>Use a list comprehension in combination with <code class=\"language-text\">int()</code> and list slice notation to get the RGB components from the hexadecimal string.</li>\n<li>Use <code class=\"language-text\">tuple()</code> to convert the resulting list to a tuple.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">hex_to_rgb</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">hex_to_rgb<span class=\"token punctuation\">(</span><span class=\"token string\">'FFA501'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (255, 165, 1)</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the given number falls within the given range</h3>\n<ul>\n<li>Use arithmetic comparison to check if the given number is in the specified range.</li>\n<li>If the second parameter, <code class=\"language-text\">end</code>, is not specified, the range is considered to be from <code class=\"language-text\">0</code> to <code class=\"language-text\">start</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">in_range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> start <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&lt;=</span> end <span class=\"token keyword\">if</span> end <span class=\"token operator\">>=</span> start <span class=\"token keyword\">else</span> end <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&lt;=</span> start</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">in_range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nin_range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nin_range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\nin_range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if all the elements in <code class=\"language-text\">values</code> are included in <code class=\"language-text\">lst</code></h3>\n<ul>\n<li>Check if every value in <code class=\"language-text\">values</code> is contained in <code class=\"language-text\">lst</code> using a <code class=\"language-text\">for</code> loop.</li>\n<li>Return <code class=\"language-text\">False</code> if any one value is not found, <code class=\"language-text\">True</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">includes_all</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> v <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">includes_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nincludes_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if any element in <code class=\"language-text\">values</code> is included in <code class=\"language-text\">lst</code></h3>\n<ul>\n<li>Check if any value in <code class=\"language-text\">values</code> is contained in <code class=\"language-text\">lst</code> using a <code class=\"language-text\">for</code> loop.</li>\n<li>Return <code class=\"language-text\">True</code> if any one value is found, <code class=\"language-text\">False</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">includes_any</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> v <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">includes_any<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nincludes_any<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list of indexes of all the occurrences of an element in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">enumerate()</code> and a list comprehension to check each element for equality with <code class=\"language-text\">value</code> and adding <code class=\"language-text\">i</code> to the result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">index_of_all</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> value<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">index_of_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 2, 5]</span>\nindex_of_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># []</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns all the elements of a list except the last one</h3>\n<ul>\n<li>Use <code class=\"language-text\">lst[:-1]</code> to return all but the last element of the list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">initial</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">initial<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Initializes a 2D list of given width and height and value</h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">range()</code> to generate <code class=\"language-text\">h</code> rows where each is a list with length <code class=\"language-text\">h</code>, initialized with <code class=\"language-text\">val</code>.</li>\n<li>Omit the last argument, <code class=\"language-text\">val</code>, to set the default value to <code class=\"language-text\">None</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">initialize_2d_list</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>val <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">initialize_2d_list<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [[0, 0], [0, 0]]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Initializes a list containing the numbers in the specified range where <code class=\"language-text\">start</code> and <code class=\"language-text\">end</code> are inclusive with their common difference <code class=\"language-text\">step</code></h3>\n<ul>\n<li>Use <code class=\"language-text\">list()</code> and <code class=\"language-text\">range()</code> to generate a list of the appropriate length, filled with the desired values in the given range.</li>\n<li>Omit <code class=\"language-text\">start</code> to use the default value of <code class=\"language-text\">0</code>.</li>\n<li>Omit <code class=\"language-text\">step</code> to use the default value of <code class=\"language-text\">1</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">initialize_list_with_range</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">initialize_list_with_range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 2, 3, 4, 5]</span>\ninitialize_list_with_range<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 4, 5, 6, 7]</span>\ninitialize_list_with_range<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 2, 4, 6, 8]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Initializes and fills a list with the specified value</h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">range()</code> to generate a list of length equal to <code class=\"language-text\">n</code>, filled with the desired values.</li>\n<li>Omit <code class=\"language-text\">val</code> to use the default value of <code class=\"language-text\">0</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">initialize_list_with_values</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>val <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">initialize_list_with_values<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 2, 2, 2, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> from <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</li>\n<li>Use the built-in set operator <code class=\"language-text\">&amp;</code> to only keep values contained in both sets, then transform the <code class=\"language-text\">set</code> back into a <code class=\"language-text\">list</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  _a<span class=\"token punctuation\">,</span> _b <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>_a <span class=\"token operator\">&amp;</span> _b<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">intersection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists, after applying the provided function to each list element of both</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code>, using <code class=\"language-text\">map()</code> to apply <code class=\"language-text\">fn</code> to each element in <code class=\"language-text\">b</code>.</li>\n<li>Use a list comprehension in combination with <code class=\"language-text\">fn</code> on <code class=\"language-text\">a</code> to only keep values contained in both lists.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">intersection_by</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  _b <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> _b<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\nintersection_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2.1]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Inverts a dictionary with unique hashable values</h3>\n<ul>\n<li>Use <code class=\"language-text\">dictionary.items()</code> in combination with a list comprehension to create a new dictionary with the values and keys inverted.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">invert_dictionary</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> key <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\ninvert_dictionary<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 10: 'Peter', 11: 'Isabel', 9: 'Anna' }</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters)</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.isalnum()</code> to filter out non-alphanumeric characters, <code class=\"language-text\">str.lower()</code> to transform each character to lowercase.</li>\n<li>Use <code class=\"language-text\">collections.Counter</code> to count the resulting characters for each string and compare the results.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_anagram</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> Counter<span class=\"token punctuation\">(</span>\n    c<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s1 <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Counter<span class=\"token punctuation\">(</span>\n    c<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s2 <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_anagram<span class=\"token punctuation\">(</span><span class=\"token string\">'#anagram'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nag a ram!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the elements of the first list are contained in the second one regardless of order</h3>\n<ul>\n<li>Use <code class=\"language-text\">count()</code> to check if any value in <code class=\"language-text\">a</code> has more occurrences than it has in <code class=\"language-text\">b</code>.</li>\n<li>Return <code class=\"language-text\">False</code> if any such value is found, <code class=\"language-text\">True</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_contained_in</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_contained_in<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the first numeric argument is divisible by the second one.</p>\n<ul>\n<li>Use the modulo operator (<code class=\"language-text\">%</code>) to check if the remainder is equal to <code class=\"language-text\">0</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_divisible</span><span class=\"token punctuation\">(</span>dividend<span class=\"token punctuation\">,</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> dividend <span class=\"token operator\">%</span> divisor <span class=\"token operator\">==</span> <span class=\"token number\">0</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_divisible<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the given number is even.</p>\n<ul>\n<li>Check whether a number is odd or even using the modulo (<code class=\"language-text\">%</code>) operator.</li>\n<li>Return <code class=\"language-text\">True</code> if the number is even, <code class=\"language-text\">False</code> if the number is odd.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_even</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_even<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the given number is odd.</p>\n<ul>\n<li>Checks whether a number is even or odd using the modulo (<code class=\"language-text\">%</code>) operator.</li>\n<li>Returns <code class=\"language-text\">True</code> if the number is odd, <code class=\"language-text\">False</code> if the number is even.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_odd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the provided integer is a prime number</h3>\n<ul>\n<li>Return <code class=\"language-text\">False</code> if the number is <code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>, a negative number or a multiple of <code class=\"language-text\">2</code>.</li>\n<li>Use <code class=\"language-text\">all()</code> and <code class=\"language-text\">range()</code> to check numbers from <code class=\"language-text\">3</code> to the square root of the given number.</li>\n<li>Return <code class=\"language-text\">True</code> if none divides the given number, <code class=\"language-text\">False</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_prime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">is_prime<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the given date is a weekday</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.datetime.weekday()</code> to get the day of the week as an integer.</li>\n<li>Check if the day of the week is less than or equal to <code class=\"language-text\">4</code>.</li>\n<li>Omit the second argument, <code class=\"language-text\">d</code>, to use a default value of <code class=\"language-text\">datetime.today()</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_weekday</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\nis_weekday<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\nis_weekday<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the given date is a weekend</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.datetime.weekday()</code> to get the day of the week as an integer.</li>\n<li>Check if the day of the week is greater than <code class=\"language-text\">4</code>.</li>\n<li>Omit the second argument, <code class=\"language-text\">d</code>, to use a default value of <code class=\"language-text\">datetime.today()</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_weekend</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\nis_weekend<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nis_weekend<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a string to kebab case</h3>\n<ul>\n<li>Use <code class=\"language-text\">re.sub()</code> to replace any <code class=\"language-text\">-</code> or <code class=\"language-text\">_</code> with a space, using the regexp <code class=\"language-text\">r\"(_|-)+\"</code>.</li>\n<li>Use <code class=\"language-text\">re.sub()</code> to match all words in the string, <code class=\"language-text\">str.lower()</code> to lowercase them.</li>\n<li>Finally, use <code class=\"language-text\">str.join()</code> to combine all word using <code class=\"language-text\">-</code> as the separator.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> re <span class=\"token keyword\">import</span> sub\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">kebab</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n    sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\"(\\s|_|-)+\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span>\n    sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">lambda</span> mo<span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> mo<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">kebab<span class=\"token punctuation\">(</span><span class=\"token string\">'camelCase'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'camel-case'</span>\nkebab<span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'some-text'</span>\nkebab<span class=\"token punctuation\">(</span><span class=\"token string\">'some-mixed_string With spaces_underscores-and-hyphens'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'some-mixed-string-with-spaces-underscores-and-hyphens'</span>\nkebab<span class=\"token punctuation\">(</span><span class=\"token string\">'AllThe-small Things'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'all-the-small-things'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the given key exists in a dictionary</h3>\n<ul>\n<li>Use the <code class=\"language-text\">in</code> operator to check if <code class=\"language-text\">d</code> contains <code class=\"language-text\">key</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">key_in_dict</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nkey_in_dict<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the key of the maximum value in a dictionary</h3>\n<ul>\n<li>Use <code class=\"language-text\">max()</code> with the <code class=\"language-text\">key</code> parameter set to <code class=\"language-text\">dict.get()</code> to find and return the key of the maximum value in the given dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">key_of_max</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">key_of_max<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># c</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the key of the minimum value in a dictionary</h3>\n<ul>\n<li>Use <code class=\"language-text\">min()</code> with the <code class=\"language-text\">key</code> parameter set to <code class=\"language-text\">dict.get()</code> to find and return the key of the minimum value in the given dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">key_of_min</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">key_of_min<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a flat list of all the keys in a flat dictionary</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.keys()</code> to return the keys in the given dictionary.</li>\n<li>Return a <code class=\"language-text\">list()</code> of the previous result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">keys_only</span><span class=\"token punctuation\">(</span>flat_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>flat_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nkeys_only<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['Peter', 'Isabel', 'Anna']</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts kilometers to miles.</p>\n<ul>\n<li>Follows the conversion formula <code class=\"language-text\">mi = km * 0.621371</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">km_to_miles</span><span class=\"token punctuation\">(</span>km<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> km <span class=\"token operator\">*</span> <span class=\"token number\">0.621371</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">km_to_miles<span class=\"token punctuation\">(</span><span class=\"token number\">8.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5.0331051</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the last element in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">lst[-1]</code> to return the last element of the passed list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">last<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the least common multiple of a list of numbers</h3>\n<ul>\n<li>Use <code class=\"language-text\">functools.reduce()</code>, <code class=\"language-text\">math.gcd()</code> and <code class=\"language-text\">lcm(x,y) = x * y / gcd(x,y)</code> over the given list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> gcd\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y <span class=\"token operator\">/</span> gcd<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">lcm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 84</span>\nlcm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 60</span></code></pre></div>\n<hr>\n<hr>\n<h3>Takes any number of iterable objects or objects with a length property and returns the longest one</h3>\n<ul>\n<li>Use <code class=\"language-text\">max()</code> with <code class=\"language-text\">len()</code> as the <code class=\"language-text\">key</code> to return the item with the greatest length.</li>\n<li>If multiple objects have the same length, the first one will be returned.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">longest_item</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">longest_item<span class=\"token punctuation\">(</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testcase'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'testcase'</span>\nlongest_item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4, 5]</span>\nlongest_item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'foobar'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Maps the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> to apply <code class=\"language-text\">fn</code> to each value of the list.</li>\n<li>Use <code class=\"language-text\">zip()</code> to pair original values to the values produced by <code class=\"language-text\">fn</code>.</li>\n<li>Use <code class=\"language-text\">dict()</code> to return an appropriate dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">map_dictionary</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> itr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">map_dictionary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 1: 1, 2: 4, 3: 9 }</span></code></pre></div>\n<hr>\n<hr>\n<h3>Creates a dictionary with the same keys as the provided dictionary and values generated by running the provided function for each value</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.items()</code> to iterate over the dictionary, assigning the values produced by <code class=\"language-text\">fn</code> to each key of a new dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">map_values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'fred'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmap_values<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> u <span class=\"token punctuation\">:</span> u<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'fred': 40, 'pebbles': 1}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the maximum value of a list, after mapping each element to a value using the provided function</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> with <code class=\"language-text\">fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code class=\"language-text\">max()</code> to return the maximum value.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">max_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">max_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> v <span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 8</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the index of the element with the maximum value in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">max()</code> and <code class=\"language-text\">list.index()</code> to get the maximum value in the list and return its index.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">max_element_index</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">max_element_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the <code class=\"language-text\">n</code> maximum elements from the provided list</h3>\n<ul>\n<li>Use <code class=\"language-text\">sorted()</code> to sort the list.</li>\n<li>Use slice notation to get the specified number of elements.</li>\n<li>Omit the second argument, <code class=\"language-text\">n</code>, to get a one-element list.</li>\n<li>If <code class=\"language-text\">n</code> is greater than or equal to the provided list's length, then return the original list (sorted in descending order).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">max_n</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">max_n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3]</span>\nmax_n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Finds the median of a list of numbers</h3>\n<ul>\n<li>Sort the numbers of the list using <code class=\"language-text\">list.sort()</code>.</li>\n<li>Find the median, which is either the middle element of the list if the list length is odd or the average of the two middle elements if the list length is even.</li>\n<li><a href=\"https://docs.python.org/3/library/statistics.html#statistics.median\"><code class=\"language-text\">statistics.median()</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  list_length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> list_length <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>list_length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>list_length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>list_length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">median<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.0</span>\nmedian<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.5</span></code></pre></div>\n<hr>\n<hr>\n<h3>Merges two or more lists into a list of lists, combining elements from each of the input lists based on their positions</h3>\n<ul>\n<li>Use <code class=\"language-text\">max()</code> combined with a list comprehension to get the length of the longest list in the arguments.</li>\n<li>Use <code class=\"language-text\">range()</code> in combination with the <code class=\"language-text\">max_length</code> variable to loop as many times as there are elements in the longest list.</li>\n<li>If a list is shorter than <code class=\"language-text\">max_length</code>, use <code class=\"language-text\">fill_value</code> for the remaining items (defaults to <code class=\"language-text\">None</code>).</li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#zip\"><code class=\"language-text\">zip()</code></a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\"><code class=\"language-text\">itertools.zip_longest()</code></a> provide similar functionality to this snippet.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> fill_value <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  max_length <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> lst <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>max_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      args<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> fill_value <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">merge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [['a', 1, True], ['b', 2, False]]</span>\nmerge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [['a', 1, True], [None, 2, False]]</span>\nmerge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fill_value <span class=\"token operator\">=</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [['a', 1, True], ['_', 2, False]]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Merges two or more dictionaries</h3>\n<ul>\n<li>Create a new <code class=\"language-text\">dict</code> and loop over <code class=\"language-text\">dicts</code>, using <code class=\"language-text\">dictionary.update()</code> to add the key-value pairs from each one to the result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge_dictionaries</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dicts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  res <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> dicts<span class=\"token punctuation\">:</span>\n    res<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages_one <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nages_two <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span>\n<span class=\"token punctuation\">}</span>\nmerge_dictionaries<span class=\"token punctuation\">(</span>ages_one<span class=\"token punctuation\">,</span> ages_two<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># { 'Peter': 10, 'Isabel': 11, 'Anna': 9 }</span></code></pre></div>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts miles to kilometers.</p>\n<ul>\n<li>Follows the conversion formula <code class=\"language-text\">km = mi * 1.609344</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">miles_to_km</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> miles <span class=\"token operator\">*</span> <span class=\"token number\">1.609344</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">miles_to_km<span class=\"token punctuation\">(</span><span class=\"token number\">5.03</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 8.09500032</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the minimum value of a list, after mapping each element to a value using the provided function</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> with <code class=\"language-text\">fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code class=\"language-text\">min()</code> to return the minimum value.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">min_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">min_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> v <span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the index of the element with the minimum value in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">min()</code> and <code class=\"language-text\">list.index()</code> to obtain the minimum value in the list and then return its index.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">min_element_index</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">min_element_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the <code class=\"language-text\">n</code> minimum elements from the provided list</h3>\n<ul>\n<li>Use <code class=\"language-text\">sorted()</code> to sort the list.</li>\n<li>Use slice notation to get the specified number of elements.</li>\n<li>Omit the second argument, <code class=\"language-text\">n</code>, to get a one-element list.</li>\n<li>If <code class=\"language-text\">n</code> is greater than or equal to the provided list's length, then return the original list (sorted in ascending order).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">min_n</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">min_n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\nmin_n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the month difference between two dates</h3>\n<ul>\n<li>Subtract <code class=\"language-text\">start</code> from <code class=\"language-text\">end</code> and use <code class=\"language-text\">datetime.timedelta.days</code> to get the day difference.</li>\n<li>Divide by <code class=\"language-text\">30</code> and use <code class=\"language-text\">math.ceil()</code> to get the difference in months (rounded up).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> ceil\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">months_diff</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> ceil<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>days <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\nmonths_diff<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the most frequent element in a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">set()</code> to get the unique values in <code class=\"language-text\">lst</code>.</li>\n<li>Use <code class=\"language-text\">max()</code> to find the element that has the most appearances.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">most_frequent</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">most_frequent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span></code></pre></div>\n<hr>\n<hr>\n<h3>Generates a string with the given string value repeated <code class=\"language-text\">n</code> number of times</h3>\n<ul>\n<li>Repeat the string <code class=\"language-text\">n</code> times, using the <code class=\"language-text\">*</code> operator.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">n_times_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">n_times_string<span class=\"token punctuation\">(</span><span class=\"token string\">'py'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'pypypypy'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code class=\"language-text\">True</code> for at least one element in the list</h3>\n<ul>\n<li>Use <code class=\"language-text\">all()</code> and <code class=\"language-text\">fn</code> to check if <code class=\"language-text\">fn</code> returns <code class=\"language-text\">False</code> for all the elements in the list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">none</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> fn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">none<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\nnone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Maps a number from one range to another range</h3>\n<ul>\n<li>Return <code class=\"language-text\">num</code> mapped between <code class=\"language-text\">outMin</code>-<code class=\"language-text\">outMax</code> from <code class=\"language-text\">inMin</code>-<code class=\"language-text\">inMax</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">num_to_range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> inMin<span class=\"token punctuation\">,</span> inMax<span class=\"token punctuation\">,</span> outMin<span class=\"token punctuation\">,</span> outMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> outMin <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> inMin<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>inMax <span class=\"token operator\">-</span> inMin<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>outMax\n                  <span class=\"token operator\">-</span> outMin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num_to_range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 50.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Moves the specified amount of elements to the end of the list</h3>\n<ul>\n<li>Use slice notation to get the two slices of the list and combine them before returning.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> lst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>offset<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">offset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 4, 5, 1, 2]</span>\noffset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [4, 5, 1, 2, 3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Pads a string on both sides with the specified character, if it's shorter than the specified length</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.ljust()</code> and <code class=\"language-text\">str.rjust()</code> to pad both sides of the given string.</li>\n<li>Omit the third argument, <code class=\"language-text\">char</code>, to use the whitespace character as the default padding character.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> char <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">pad<span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># '  cat   '</span>\npad<span class=\"token punctuation\">(</span><span class=\"token string\">'42'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># '004200'</span>\npad<span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'foobar'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Pads a given number to the specified length</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.zfill()</code> to pad the number to the specified length, after converting it to a string.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">pad_number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">pad_number<span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># '001234'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the given string is a palindrome</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.lower()</code> and <code class=\"language-text\">re.sub()</code> to convert to lowercase and remove non-alphanumeric characters from the given string.</li>\n<li>Then, compare the new string with its reverse, using slice notation.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> re <span class=\"token keyword\">import</span> sub\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">palindrome</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  s <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[\\W_]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> s <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">palindrome<span class=\"token punctuation\">(</span><span class=\"token string\">'taco cat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a list of dictionaries into a list of values corresponding to the specified <code class=\"language-text\">key</code></h3>\n<ul>\n<li>Use a list comprehension and <code class=\"language-text\">dict.get()</code> to get the value of <code class=\"language-text\">key</code> for each dictionary in <code class=\"language-text\">lst</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">simpsons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'lisa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'homer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">36</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'marge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">34</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bart'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\npluck<span class=\"token punctuation\">(</span>simpsons<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [8, 36, 34, 10]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the powerset of a given iterable</h3>\n<ul>\n<li>Use <code class=\"language-text\">list()</code> to convert the given value to a list.</li>\n<li>Use <code class=\"language-text\">range()</code> and <code class=\"language-text\">itertools.combinations()</code> to create a generator that returns all subsets.</li>\n<li>Use <code class=\"language-text\">itertools.chain.from_iterable()</code> and <code class=\"language-text\">list()</code> to consume the generator and return a list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain<span class=\"token punctuation\">,</span> combinations\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">powerset</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  s <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>from_iterable<span class=\"token punctuation\">(</span>combinations<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">powerset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [(), (1,), (2,), (1, 2)]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts an angle from radians to degrees</h3>\n<ul>\n<li>Use <code class=\"language-text\">math.pi</code> and the radian to degree formula to convert the angle from radians to degrees.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">rads_to_degrees</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>rad <span class=\"token operator\">*</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> pi</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi\n\nrads_to_degrees<span class=\"token punctuation\">(</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 90.0</span></code></pre></div>\n<hr>\n<hr>\n<h3>Reverses a list or a string</h3>\n<ul>\n<li>Use slice notation to reverse the list or string.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> itr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 2, 1]</span>\nreverse<span class=\"token punctuation\">(</span><span class=\"token string\">'snippet'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'teppins'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Reverses a number</h3>\n<ul>\n<li>Use <code class=\"language-text\">str()</code> to convert the number to a string, slice notation to reverse it and <code class=\"language-text\">str.replace()</code> to remove the sign.</li>\n<li>Use <code class=\"language-text\">float()</code> to convert the result to a number and <code class=\"language-text\">math.copysign()</code> to copy the original sign.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> copysign\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reverse_number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> copysign<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">reverse_number<span class=\"token punctuation\">(</span><span class=\"token number\">981</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 189</span>\nreverse_number<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -5</span>\nreverse_number<span class=\"token punctuation\">(</span><span class=\"token number\">73.6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 6.37</span>\nreverse_number<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5.23</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -32.5</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts the values of RGB components to a hexadecimal color code</h3>\n<ul>\n<li>Create a placeholder for a zero-padded hexadecimal value using <code class=\"language-text\">'{:02X}'</code> and copy it three times.</li>\n<li>Use <code class=\"language-text\">str.format()</code> on the resulting string to replace the placeholders with the given values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">rgb_to_hex</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'{:02X}'</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">rgb_to_hex<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">165</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'FFA501'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Moves the specified amount of elements to the start of the list</h3>\n<ul>\n<li>Use slice notation to get the two slices of the list and combine them before returning.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">roll</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>offset<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> lst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>offset<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">roll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [4, 5, 1, 2, 3]</span>\nroll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 4, 5, 1, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a random element from a list</h3>\n<ul>\n<li>Use <code class=\"language-text\">random.choice()</code> to get a random element from <code class=\"language-text\">lst</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> choice\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> choice<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 9</span></code></pre></div>\n<hr>\n<hr>\n<h3>Randomizes the order of the values of an list, returning a new list</h3>\n<ul>\n<li>Uses the <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates algorithm</a> to reorder the elements of the list.</li>\n<li><a href=\"https://docs.python.org/3/library/random.html#random.shuffle\"><code class=\"language-text\">random.shuffle</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> deepcopy\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  temp_lst <span class=\"token operator\">=</span> deepcopy<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n  m <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>temp_lst<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    m <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    i <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n    temp_lst<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp_lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp_lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp_lst<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> temp_lst</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nshuffle<span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3, 1], foo = [1, 2, 3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists</h3>\n<ul>\n<li>Use a list comprehension on <code class=\"language-text\">a</code> to only keep values contained in both lists.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">similarity</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> item <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">similarity<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a string to a URL-friendly slug</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.lower()</code> and <code class=\"language-text\">str.strip()</code> to normalize the input string.</li>\n<li>Use <code class=\"language-text\">re.sub()</code> to to replace spaces, dashes and underscores with <code class=\"language-text\">-</code> and remove special characters.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  s <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[^\\w\\s-]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n  s <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[\\s_-]+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n  s <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'^-+|-+$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> s</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">slugify<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'hello-world'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a string to snake case</h3>\n<ul>\n<li>Use <code class=\"language-text\">re.sub()</code> to match all words in the string, <code class=\"language-text\">str.lower()</code> to lowercase them.</li>\n<li>Use <code class=\"language-text\">re.sub()</code> to replace any <code class=\"language-text\">-</code> characters with spaces.</li>\n<li>Finally, use <code class=\"language-text\">str.join()</code> to combine all words using <code class=\"language-text\">-</code> as the separator.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> re <span class=\"token keyword\">import</span> sub\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">snake</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n    sub<span class=\"token punctuation\">(</span><span class=\"token string\">'([A-Z][a-z]+)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r' \\1'</span><span class=\"token punctuation\">,</span>\n    sub<span class=\"token punctuation\">(</span><span class=\"token string\">'([A-Z]+)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r' \\1'</span><span class=\"token punctuation\">,</span>\n    s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">snake<span class=\"token punctuation\">(</span><span class=\"token string\">'camelCase'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'camel_case'</span>\nsnake<span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'some_text'</span>\nsnake<span class=\"token punctuation\">(</span><span class=\"token string\">'some-mixed_string With spaces_underscores-and-hyphens'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'some_mixed_string_with_spaces_underscores_and_hyphens'</span>\nsnake<span class=\"token punctuation\">(</span><span class=\"token string\">'AllThe-small Things'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'all_the_small_things'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code class=\"language-text\">True</code> for at least one element in the list</h3>\n<ul>\n<li>Use <code class=\"language-text\">any()</code> in combination with <code class=\"language-text\">map()</code> to check if <code class=\"language-text\">fn</code> returns <code class=\"language-text\">True</code> for any element in the list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">some<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nsome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<hr>\n<hr>\n<h3>Sorts one list based on another list containing the desired indexes</h3>\n<ul>\n<li>Use <code class=\"language-text\">zip()</code> and <code class=\"language-text\">sorted()</code> to combine and sort the two lists, based on the values of <code class=\"language-text\">indexes</code>.</li>\n<li>Use a list comprehension to get the first element of each pair from the result.</li>\n<li>Use the <code class=\"language-text\">reverse</code> parameter in <code class=\"language-text\">sorted()</code> to sort the dictionary in reverse order, based on the third argument.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">sort_by_indexes</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> indexes<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>val <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>indexes<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> \\\n          x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span>reverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eggs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oranges'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jam'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apples'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nsort_by_indexes<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['apples', 'bread', 'eggs', 'jam', 'milk', 'oranges']</span>\nsort_by_indexes<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['oranges', 'milk', 'jam', 'eggs', 'bread', 'apples']</span></code></pre></div>\n<hr>\n<hr>\n<h3>Sorts the given dictionary by key</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.items()</code> to get a list of tuple pairs from <code class=\"language-text\">d</code> and sort it using <code class=\"language-text\">sorted()</code>.</li>\n<li>Use <code class=\"language-text\">dict()</code> to convert the sorted list back to a dictionary.</li>\n<li>Use the <code class=\"language-text\">reverse</code> parameter in <code class=\"language-text\">sorted()</code> to sort the dictionary in reverse order, based on the second argument.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">sort_dict_by_key</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nsort_dict_by_key<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'five': 5, 'four': 4, 'one': 1, 'three': 3, 'two': 2}</span>\nsort_dict_by_key<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {'two': 2, 'three': 3, 'one': 1, 'four': 4, 'five': 5}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Sorts the given dictionary by value</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.items()</code> to get a list of tuple pairs from <code class=\"language-text\">d</code> and sort it using a lambda function and <code class=\"language-text\">sorted()</code>.</li>\n<li>Use <code class=\"language-text\">dict()</code> to convert the sorted list back to a dictionary.</li>\n<li>Use the <code class=\"language-text\">reverse</code> parameter in <code class=\"language-text\">sorted()</code> to sort the dictionary in reverse order, based on the second argument.</li>\n<li><strong>⚠️ NOTICE:</strong> Dictionary values must be of the same type.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">sort_dict_by_value</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nsort_dict_by_value<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}</span>\nsort_dict_by_value<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {'five': 5, 'four': 4, 'three': 3, 'two': 2, 'one': 1}</span></code></pre></div>\n<hr>\n<hr>\n<h3>Splits a multiline string into a list of lines</h3>\n<ul>\n<li>Use <code class=\"language-text\">str.split()</code> and <code class=\"language-text\">'\\n'</code> to match line breaks and create a list.</li>\n<li><a href=\"https://docs.python.org/3/library/stdtypes.html#str.splitlines\"><code class=\"language-text\">str.splitlines()</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">split_lines</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">split_lines<span class=\"token punctuation\">(</span><span class=\"token string\">'This\\nis a\\nmultiline\\nstring.\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['This', 'is a', 'multiline', 'string.' , '']</span></code></pre></div>\n<hr>\n<hr>\n<h3>Flattens a list, by spreading its elements into a new list</h3>\n<ul>\n<li>Loop over elements, use <code class=\"language-text\">list.extend()</code> if the element is a list, <code class=\"language-text\">list.append()</code> otherwise.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">spread</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arg<span class=\"token punctuation\">:</span>\n    ret<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> ret<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> ret</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">spread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Calculates the sum of a list, after mapping each element to a value using the provided function</h3>\n<ul>\n<li>Use <code class=\"language-text\">map()</code> with <code class=\"language-text\">fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code class=\"language-text\">sum()</code> to return the sum of the values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">sum_by</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">sum_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> v <span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 20</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the sum of the powers of all the numbers from <code class=\"language-text\">start</code> to <code class=\"language-text\">end</code> (both inclusive)</h3>\n<ul>\n<li>Use <code class=\"language-text\">range()</code> in combination with a list comprehension to create a list of elements in the desired range raised to the given <code class=\"language-text\">power</code>.</li>\n<li>Use <code class=\"language-text\">sum()</code> to add the values together.</li>\n<li>Omit the second argument, <code class=\"language-text\">power</code>, to use a default power of <code class=\"language-text\">2</code>.</li>\n<li>Omit the third argument, <code class=\"language-text\">start</code>, to use a default starting value of <code class=\"language-text\">1</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">sum_of_powers</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> power <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> power <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">sum_of_powers<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 385</span>\nsum_of_powers<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3025</span>\nsum_of_powers<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2925</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the symmetric difference between two iterables, without filtering out duplicate values</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> from each list.</li>\n<li>Use a list comprehension on each of them to only keep values not contained in the previously created set of the other.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">symmetric_difference</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">,</span> _b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> item <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _b<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> b\n          <span class=\"token keyword\">if</span> item <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _a<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">symmetric_difference<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 4]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the symmetric difference between two lists, after applying the provided function to each list element of both</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> by applying <code class=\"language-text\">fn</code> to each element in every list.</li>\n<li>Use a list comprehension in combination with <code class=\"language-text\">fn</code> on each of them to only keep values not contained in the previously created set of the other.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">symmetric_difference_by</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">,</span> _b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _b<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item\n          <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> b <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _a<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\nsymmetric_difference_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1.2, 3.4]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns all elements in a list except for the first one</h3>\n<ul>\n<li>Use slice notation to return the last element if the list's length is more than <code class=\"language-text\">1</code>.</li>\n<li>Otherwise, return the whole list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">tail</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> lst</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">tail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span>\ntail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list with <code class=\"language-text\">n</code> elements removed from the beginning</h3>\n<ul>\n<li>Use slice notation to create a slice of the list with <code class=\"language-text\">n</code> elements taken from the beginning.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> itr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">take<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\ntake<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># []</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a list with <code class=\"language-text\">n</code> elements removed from the end</h3>\n<ul>\n<li>Use slice notation to create a slice of the list with <code class=\"language-text\">n</code> elements taken from the end.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">take_right</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> itr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">take_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span>\ntake_right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the binary representation of the given number</h3>\n<ul>\n<li>Use <code class=\"language-text\">bin()</code> to convert a given decimal number into its binary equivalent.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_binary</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">to_binary<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0b1100100</span></code></pre></div>\n<hr>\n<hr>\n<h3>Combines two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values</h3>\n<p>The values of the first list need to be unique and hashable.</p>\n<ul>\n<li>Use <code class=\"language-text\">zip()</code> in combination with <code class=\"language-text\">dict()</code> to combine the values of the two lists into a dictionary.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_dictionary</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">to_dictionary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># { a: 1, b: 2 }</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the hexadecimal representation of the given number</h3>\n<ul>\n<li>Use <code class=\"language-text\">hex()</code> to convert a given decimal number into its hexadecimal equivalent.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_hex</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">to_hex<span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x29</span>\nto_hex<span class=\"token punctuation\">(</span><span class=\"token number\">332</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x14c</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a date to its ISO-8601 representation</h3>\n<ul>\n<li>Use <code class=\"language-text\">datetime.datetime.isoformat()</code> to convert the given <code class=\"language-text\">datetime.datetime</code> object to an ISO-8601 date.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_iso_date</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\nto_iso_date<span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-10-25T00:00:00</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts an integer to its roman numeral representation</h3>\n<p>Accepts value between <code class=\"language-text\">1</code> and <code class=\"language-text\">3999</code> (both inclusive).</p>\n<ul>\n<li>Create a lookup list containing tuples in the form of (roman value, integer).</li>\n<li>Use a <code class=\"language-text\">for</code> loop to iterate over the values in <code class=\"language-text\">lookup</code>.</li>\n<li>Use <code class=\"language-text\">divmod()</code> to update <code class=\"language-text\">num</code> with the remainder, adding the roman numeral representation to the result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_roman_numeral</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  lookup <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CM'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IX'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IV'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n  res <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> roman<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> lookup<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">divmod</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">+=</span> roman <span class=\"token operator\">*</span> d\n  <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">to_roman_numeral<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'III'</span>\nto_roman_numeral<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'XI'</span>\nto_roman_numeral<span class=\"token punctuation\">(</span><span class=\"token number\">1998</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'MCMXCVIII'</span></code></pre></div>\n<hr>\n<hr>\n<h3>Transposes a two-dimensional list</h3>\n<ul>\n<li>Use <code class=\"language-text\">*lst</code> to get the provided list as tuples.</li>\n<li>Use <code class=\"language-text\">zip()</code> in combination with <code class=\"language-text\">list()</code> to create the transpose of the given two-dimensional list.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">transpose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Builds a list, using an iterator function and an initial seed value</h3>\n<ul>\n<li>The iterator function accepts one argument (<code class=\"language-text\">seed</code>) and must always return a list with two elements ([<code class=\"language-text\">value</code>, <code class=\"language-text\">nextSeed</code>]) or <code class=\"language-text\">False</code> to terminate.</li>\n<li>Use a generator function, <code class=\"language-text\">fn_generator</code>, that uses a <code class=\"language-text\">while</code> loop to call the iterator function and <code class=\"language-text\">yield</code> the <code class=\"language-text\">value</code> until it returns <code class=\"language-text\">False</code>.</li>\n<li>Use a list comprehension to return the list that is produced by the generator, using the iterator function.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">unfold</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">fn_generator</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n      val <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">yield</span> val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> fn_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">f <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nunfold<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [-10, -20, -30, -40, -50]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns every element that exists in any of the two lists once</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> with all values of <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> and convert to a <code class=\"language-text\">list</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">union<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns every element that exists in any of the two lists once, after applying the provided function to each element of both</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> by applying <code class=\"language-text\">fn</code> to each element in <code class=\"language-text\">a</code>.</li>\n<li>Use a list comprehension in combination with <code class=\"language-text\">fn</code> on <code class=\"language-text\">b</code> to only keep values not contained in the previously created set, <code class=\"language-text\">_a</code>.</li>\n<li>Finally, create a <code class=\"language-text\">set</code> from the previous result and <code class=\"language-text\">a</code> and transform it into a <code class=\"language-text\">list</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">union_by</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  _a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> b <span class=\"token keyword\">if</span> fn<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> _a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> floor\n\nunion_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> floor<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2.1, 1.2]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the unique elements in a given list</h3>\n<ul>\n<li>Create a <code class=\"language-text\">set</code> from the list to discard duplicated values, then return a <code class=\"language-text\">list</code> from it.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">unique_elements</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">unique_elements<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns a flat list of all the values in a flat dictionary</h3>\n<ul>\n<li>Use <code class=\"language-text\">dict.values()</code> to return the values in the given dictionary.</li>\n<li>Return a <code class=\"language-text\">list()</code> of the previous result.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">values_only</span><span class=\"token punctuation\">(</span>flat_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>flat_dict<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Isabel'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nvalues_only<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [10, 11, 9]</span></code></pre></div>\n<hr>\n<hr>\n<h3>Returns the weighted average of two or more numbers</h3>\n<ul>\n<li>Use <code class=\"language-text\">sum()</code> to sum the products of the numbers by their weight and to sum the weights.</li>\n<li>Use <code class=\"language-text\">zip()</code> and a list comprehension to iterate over the pairs of values and weights.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">weighted_average</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">weighted_average<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1.72727</span></code></pre></div>\n<hr>\n<hr>\n<h3>Tests a value, <code class=\"language-text\">x</code>, against a testing function, conditionally applying a function</h3>\n<ul>\n<li>Check if the value of <code class=\"language-text\">predicate(x)</code> is <code class=\"language-text\">True</code> and if so return <code class=\"language-text\">when_true(x)</code>, otherwise return <code class=\"language-text\">x</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">when</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">,</span> when_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> when_true<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> predicate<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> x</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">double_even_numbers <span class=\"token operator\">=</span> when<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndouble_even_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4</span>\ndouble_even_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></code></pre></div>\n<hr>\n<hr>\n<h3>Converts a given string into a list of words</h3>\n<ul>\n<li>Use <code class=\"language-text\">re.findall()</code> with the supplied <code class=\"language-text\">pattern</code> to find all matching substrings.</li>\n<li>Omit the second argument to use the default regexp, which matches alphanumeric and hyphens.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">words</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> pattern <span class=\"token operator\">=</span> <span class=\"token string\">'[a-zA-Z-]+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">words<span class=\"token punctuation\">(</span><span class=\"token string\">'I love Python!!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['I', 'love', 'Python']</span>\nwords<span class=\"token punctuation\">(</span><span class=\"token string\">'python, javaScript &amp; coffee'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['python', 'javaScript', 'coffee']</span>\nwords<span class=\"token punctuation\">(</span><span class=\"token string\">'build -q --out one-item'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r'\\b[a-zA-Z-]+\\b'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['build', 'q', 'out', 'one-item']</span></code></pre></div>"}