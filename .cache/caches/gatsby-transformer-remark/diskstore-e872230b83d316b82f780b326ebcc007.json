{"expireTime":9007200911870449000,"key":"transformer-remark-markdown-ast-2ef1daa9a75754498c49d17dcd6f7f79-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Handling events","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#handling_events","children":[{"type":"text","value":"Handling events","position":{"start":{"line":2,"column":5,"offset":6},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":201,"offset":202},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":201,"offset":202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you've only written vanilla JavaScript before now, you might be used to having a separate JavaScript file, where you query for some DOM nodes and attach listeners to them. For example:","position":{"start":{"line":4,"column":1,"offset":206},"end":{"line":4,"column":188,"offset":393},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":206},"end":{"line":4,"column":188,"offset":393},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//x</span>\n<span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":6,"column":1,"offset":397},"end":{"line":13,"column":4,"offset":524},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In React, we write event handlers directly on the elements in our JSX, like this:","position":{"start":{"line":15,"column":1,"offset":528},"end":{"line":15,"column":82,"offset":609},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":528},"end":{"line":15,"column":82,"offset":609},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//x</span>\n<span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    Say hi<span class=\"token operator\">!</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>","position":{"start":{"line":17,"column":1,"offset":613},"end":{"line":22,"column":4,"offset":705},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":24,"column":3,"offset":711},"end":{"line":24,"column":8,"offset":716},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":709},"end":{"line":24,"column":10,"offset":718},"indent":[]}},{"type":"text","value":" This may seem counter-intuitive regarding best-practice advice that tends to advise against use of inline event handlers on HTML, but remember that JSX is actually part of your JavaScript.","position":{"start":{"line":24,"column":10,"offset":718},"end":{"line":24,"column":199,"offset":907},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":709},"end":{"line":24,"column":199,"offset":907},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, we're adding an ","position":{"start":{"line":26,"column":1,"offset":911},"end":{"line":26,"column":39,"offset":949},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onClick</code>","position":{"start":{"line":26,"column":39,"offset":949},"end":{"line":26,"column":48,"offset":958},"indent":[]}},{"type":"text","value":" attribute to the ","position":{"start":{"line":26,"column":48,"offset":958},"end":{"line":26,"column":66,"offset":976},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;button></code>","position":{"start":{"line":26,"column":66,"offset":976},"end":{"line":26,"column":76,"offset":986},"indent":[]}},{"type":"text","value":" element. The value of that attribute is a function that triggers a simple alert.","position":{"start":{"line":26,"column":76,"offset":986},"end":{"line":26,"column":157,"offset":1067},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":911},"end":{"line":26,"column":157,"offset":1067},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":28,"column":1,"offset":1071},"end":{"line":28,"column":5,"offset":1075},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onClick</code>","position":{"start":{"line":28,"column":5,"offset":1075},"end":{"line":28,"column":14,"offset":1084},"indent":[]}},{"type":"text","value":" attribute has special meaning here: it tells React to run a given function when the user clicks on the button. There are a couple of other things to note:","position":{"start":{"line":28,"column":14,"offset":1084},"end":{"line":28,"column":169,"offset":1239},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1071},"end":{"line":28,"column":169,"offset":1239},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The camel-cased nature of ","position":{"start":{"line":30,"column":5,"offset":1247},"end":{"line":30,"column":31,"offset":1273},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onClick</code>","position":{"start":{"line":30,"column":31,"offset":1273},"end":{"line":30,"column":40,"offset":1282},"indent":[]}},{"type":"text","value":" is important — JSX will not recognize ","position":{"start":{"line":30,"column":40,"offset":1282},"end":{"line":30,"column":79,"offset":1321},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onclick</code>","position":{"start":{"line":30,"column":79,"offset":1321},"end":{"line":30,"column":88,"offset":1330},"indent":[]}},{"type":"text","value":" (again, it is already used in JavaScript for a specific purpose, which is related but different — standard ","position":{"start":{"line":30,"column":88,"offset":1330},"end":{"line":30,"column":196,"offset":1438},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick","children":[{"type":"html","value":"<code class=\"language-text\">onclick</code>","position":{"start":{"line":30,"column":197,"offset":1439},"end":{"line":30,"column":206,"offset":1448},"indent":[]}}],"position":{"start":{"line":30,"column":196,"offset":1438},"end":{"line":30,"column":285,"offset":1527},"indent":[]}},{"type":"text","value":" handler properties).","position":{"start":{"line":30,"column":285,"offset":1527},"end":{"line":30,"column":306,"offset":1548},"indent":[]}}],"position":{"start":{"line":30,"column":5,"offset":1247},"end":{"line":30,"column":306,"offset":1548},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1243},"end":{"line":30,"column":306,"offset":1548},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All browser events follow this format in JSX – ","position":{"start":{"line":31,"column":5,"offset":1554},"end":{"line":31,"column":52,"offset":1601},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">on</code>","position":{"start":{"line":31,"column":52,"offset":1601},"end":{"line":31,"column":56,"offset":1605},"indent":[]}},{"type":"text","value":", followed by the name of the event.","position":{"start":{"line":31,"column":56,"offset":1605},"end":{"line":31,"column":92,"offset":1641},"indent":[]}}],"position":{"start":{"line":31,"column":5,"offset":1554},"end":{"line":31,"column":92,"offset":1641},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1550},"end":{"line":31,"column":92,"offset":1641},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1243},"end":{"line":31,"column":92,"offset":1641},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's apply this to our app, starting in the ","position":{"start":{"line":33,"column":1,"offset":1645},"end":{"line":33,"column":46,"offset":1690},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Form.js</code>","position":{"start":{"line":33,"column":46,"offset":1690},"end":{"line":33,"column":55,"offset":1699},"indent":[]}},{"type":"text","value":" component.","position":{"start":{"line":33,"column":55,"offset":1699},"end":{"line":33,"column":66,"offset":1710},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1645},"end":{"line":33,"column":66,"offset":1710},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Handling form submission","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#handling_form_submission","children":[{"type":"text","value":"Handling form submission","position":{"start":{"line":35,"column":6,"offset":1719},"end":{"line":35,"column":30,"offset":1743},"indent":[]}}],"position":{"start":{"line":35,"column":5,"offset":1718},"end":{"line":35,"column":229,"offset":1942},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1714},"end":{"line":35,"column":229,"offset":1942},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the ","position":{"start":{"line":37,"column":1,"offset":1946},"end":{"line":37,"column":19,"offset":1964},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Form()</code>","position":{"start":{"line":37,"column":19,"offset":1964},"end":{"line":37,"column":27,"offset":1972},"indent":[]}},{"type":"text","value":" component function, create a function named ","position":{"start":{"line":37,"column":27,"offset":1972},"end":{"line":37,"column":72,"offset":2017},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":37,"column":72,"offset":2017},"end":{"line":37,"column":88,"offset":2033},"indent":[]}},{"type":"text","value":". This function should ","position":{"start":{"line":37,"column":88,"offset":2033},"end":{"line":37,"column":111,"offset":2056},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#preventing_default_behavior","children":[{"type":"text","value":"prevent the default behavior of the ","position":{"start":{"line":37,"column":112,"offset":2057},"end":{"line":37,"column":148,"offset":2093},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">submit</code>","position":{"start":{"line":37,"column":148,"offset":2093},"end":{"line":37,"column":156,"offset":2101},"indent":[]}},{"type":"text","value":" event","position":{"start":{"line":37,"column":156,"offset":2101},"end":{"line":37,"column":162,"offset":2107},"indent":[]}}],"position":{"start":{"line":37,"column":111,"offset":2056},"end":{"line":37,"column":273,"offset":2218},"indent":[]}},{"type":"text","value":". After that, it should trigger an ","position":{"start":{"line":37,"column":273,"offset":2218},"end":{"line":37,"column":308,"offset":2253},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">alert()</code>","position":{"start":{"line":37,"column":308,"offset":2253},"end":{"line":37,"column":317,"offset":2262},"indent":[]}},{"type":"text","value":", which can say whatever you'd like. It should end up looking something like this:","position":{"start":{"line":37,"column":317,"offset":2262},"end":{"line":37,"column":399,"offset":2344},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1946},"end":{"line":37,"column":399,"offset":2344},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//x</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":39,"column":1,"offset":2348},"end":{"line":45,"column":4,"offset":2448},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To use this function, add an ","position":{"start":{"line":47,"column":1,"offset":2452},"end":{"line":47,"column":30,"offset":2481},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onSubmit</code>","position":{"start":{"line":47,"column":30,"offset":2481},"end":{"line":47,"column":40,"offset":2491},"indent":[]}},{"type":"text","value":" attribute to the ","position":{"start":{"line":47,"column":40,"offset":2491},"end":{"line":47,"column":58,"offset":2509},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form","children":[{"type":"html","value":"<code class=\"language-text\">&lt;form></code>","position":{"start":{"line":47,"column":59,"offset":2510},"end":{"line":47,"column":67,"offset":2518},"indent":[]}}],"position":{"start":{"line":47,"column":58,"offset":2509},"end":{"line":47,"column":132,"offset":2583},"indent":[]}},{"type":"text","value":" element, and set its value to the ","position":{"start":{"line":47,"column":132,"offset":2583},"end":{"line":47,"column":167,"offset":2618},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit</code>","position":{"start":{"line":47,"column":167,"offset":2618},"end":{"line":47,"column":181,"offset":2632},"indent":[]}},{"type":"text","value":" function:","position":{"start":{"line":47,"column":181,"offset":2632},"end":{"line":47,"column":191,"offset":2642},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2452},"end":{"line":47,"column":191,"offset":2642},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form onSubmit={handleSubmit}></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":2646},"end":{"line":51,"column":4,"offset":2686},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now if you head back to your browser and click on the \"Add\" button, your browser will show you an alert dialog with the words \"Hello, world!\" — or whatever you chose to write there.","position":{"start":{"line":53,"column":1,"offset":2690},"end":{"line":53,"column":182,"offset":2871},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2690},"end":{"line":53,"column":182,"offset":2871},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Callback props","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#callback_props","children":[{"type":"text","value":"Callback props","position":{"start":{"line":55,"column":5,"offset":2879},"end":{"line":55,"column":19,"offset":2893},"indent":[]}}],"position":{"start":{"line":55,"column":4,"offset":2878},"end":{"line":55,"column":198,"offset":3072},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2875},"end":{"line":55,"column":198,"offset":3072},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In React applications, interactivity is rarely confined to just one component: events that happen in one component will affect other parts of the app. When we start giving ourselves the power to make new tasks, things that happen in the ","position":{"start":{"line":57,"column":1,"offset":3076},"end":{"line":57,"column":238,"offset":3313},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":57,"column":238,"offset":3313},"end":{"line":57,"column":248,"offset":3323},"indent":[]}},{"type":"text","value":" component will affect the list rendered in ","position":{"start":{"line":57,"column":248,"offset":3323},"end":{"line":57,"column":292,"offset":3367},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;App /></code>","position":{"start":{"line":57,"column":292,"offset":3367},"end":{"line":57,"column":301,"offset":3376},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":57,"column":301,"offset":3376},"end":{"line":57,"column":302,"offset":3377},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3076},"end":{"line":57,"column":302,"offset":3377},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want our ","position":{"start":{"line":59,"column":1,"offset":3381},"end":{"line":59,"column":13,"offset":3393},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":59,"column":13,"offset":3393},"end":{"line":59,"column":29,"offset":3409},"indent":[]}},{"type":"text","value":" function to ultimately help us create a new task, so we need a way to pass information from ","position":{"start":{"line":59,"column":29,"offset":3409},"end":{"line":59,"column":122,"offset":3502},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":59,"column":122,"offset":3502},"end":{"line":59,"column":132,"offset":3512},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":59,"column":132,"offset":3512},"end":{"line":59,"column":136,"offset":3516},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;App /></code>","position":{"start":{"line":59,"column":136,"offset":3516},"end":{"line":59,"column":145,"offset":3525},"indent":[]}},{"type":"text","value":". We can't pass data from child to parent in the same way as we pass data from parent to child using standard props. Instead, we can write a function in ","position":{"start":{"line":59,"column":145,"offset":3525},"end":{"line":59,"column":298,"offset":3678},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;App /></code>","position":{"start":{"line":59,"column":298,"offset":3678},"end":{"line":59,"column":307,"offset":3687},"indent":[]}},{"type":"text","value":" that will expect some data from our form as an input, then pass that function to ","position":{"start":{"line":59,"column":307,"offset":3687},"end":{"line":59,"column":389,"offset":3769},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":59,"column":389,"offset":3769},"end":{"line":59,"column":399,"offset":3779},"indent":[]}},{"type":"text","value":" as a prop. This function-as-a-prop is called a callback prop. Once we have our callback prop, we can call it inside ","position":{"start":{"line":59,"column":399,"offset":3779},"end":{"line":59,"column":516,"offset":3896},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":59,"column":516,"offset":3896},"end":{"line":59,"column":526,"offset":3906},"indent":[]}},{"type":"text","value":" to send the right data to ","position":{"start":{"line":59,"column":526,"offset":3906},"end":{"line":59,"column":553,"offset":3933},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;App /></code>","position":{"start":{"line":59,"column":553,"offset":3933},"end":{"line":59,"column":562,"offset":3942},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":59,"column":562,"offset":3942},"end":{"line":59,"column":563,"offset":3943},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3381},"end":{"line":59,"column":563,"offset":3943},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Handling form submission via callbacks","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#handling_form_submission_via_callbacks","children":[{"type":"text","value":"Handling form submission via callbacks","position":{"start":{"line":61,"column":6,"offset":3952},"end":{"line":61,"column":44,"offset":3990},"indent":[]}}],"position":{"start":{"line":61,"column":5,"offset":3951},"end":{"line":61,"column":271,"offset":4217},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3947},"end":{"line":61,"column":271,"offset":4217},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Inside the top of our ","position":{"start":{"line":63,"column":1,"offset":4221},"end":{"line":63,"column":23,"offset":4243},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App()</code>","position":{"start":{"line":63,"column":23,"offset":4243},"end":{"line":63,"column":30,"offset":4250},"indent":[]}},{"type":"text","value":" component function, create a function named ","position":{"start":{"line":63,"column":30,"offset":4250},"end":{"line":63,"column":75,"offset":4295},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":63,"column":75,"offset":4295},"end":{"line":63,"column":86,"offset":4306},"indent":[]}},{"type":"text","value":" which has a single parameter of ","position":{"start":{"line":63,"column":86,"offset":4306},"end":{"line":63,"column":119,"offset":4339},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":63,"column":119,"offset":4339},"end":{"line":63,"column":125,"offset":4345},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":63,"column":125,"offset":4345},"end":{"line":63,"column":126,"offset":4346},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":4221},"end":{"line":63,"column":126,"offset":4346},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function addTask(name) {\n  alert(name);\n}</code></pre></div>","position":{"start":{"line":65,"column":1,"offset":4350},"end":{"line":69,"column":4,"offset":4403},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next, we'll pass ","position":{"start":{"line":71,"column":1,"offset":4407},"end":{"line":71,"column":18,"offset":4424},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":71,"column":18,"offset":4424},"end":{"line":71,"column":29,"offset":4435},"indent":[]}},{"type":"text","value":" into ","position":{"start":{"line":71,"column":29,"offset":4435},"end":{"line":71,"column":35,"offset":4441},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":71,"column":35,"offset":4441},"end":{"line":71,"column":45,"offset":4451},"indent":[]}},{"type":"text","value":" as a prop. The prop can have whatever name you want, but pick a name you'll understand later. Something like ","position":{"start":{"line":71,"column":45,"offset":4451},"end":{"line":71,"column":155,"offset":4561},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask</code>","position":{"start":{"line":71,"column":155,"offset":4561},"end":{"line":71,"column":164,"offset":4570},"indent":[]}},{"type":"text","value":" works, because it matches the name of the function as well as what the function will do. Your ","position":{"start":{"line":71,"column":164,"offset":4570},"end":{"line":71,"column":259,"offset":4665},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":71,"column":259,"offset":4665},"end":{"line":71,"column":269,"offset":4675},"indent":[]}},{"type":"text","value":" component call should be updated as follows:","position":{"start":{"line":71,"column":269,"offset":4675},"end":{"line":71,"column":314,"offset":4720},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4407},"end":{"line":71,"column":314,"offset":4720},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Form addTask={addTask} /></code></pre></div>","position":{"start":{"line":73,"column":1,"offset":4724},"end":{"line":75,"column":4,"offset":4760},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you can use this prop inside the ","position":{"start":{"line":77,"column":1,"offset":4764},"end":{"line":77,"column":43,"offset":4806},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":77,"column":43,"offset":4806},"end":{"line":77,"column":59,"offset":4822},"indent":[]}},{"type":"text","value":" function in your ","position":{"start":{"line":77,"column":59,"offset":4822},"end":{"line":77,"column":77,"offset":4840},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":77,"column":77,"offset":4840},"end":{"line":77,"column":87,"offset":4850},"indent":[]}},{"type":"text","value":" component! Update it as follows:","position":{"start":{"line":77,"column":87,"offset":4850},"end":{"line":77,"column":120,"offset":4883},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4764},"end":{"line":77,"column":120,"offset":4883},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function handleSubmit(e) {\n  e.preventDefault();\n  props.addTask(\"Say hello!\");\n}</code></pre></div>","position":{"start":{"line":79,"column":1,"offset":4887},"end":{"line":84,"column":4,"offset":4981},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Clicking on the \"Add\" button in your browser will prove that the ","position":{"start":{"line":86,"column":1,"offset":4985},"end":{"line":86,"column":66,"offset":5050},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":86,"column":66,"offset":5050},"end":{"line":86,"column":77,"offset":5061},"indent":[]}},{"type":"text","value":" callback function works, but it'd be nice if we could get the alert to show us what we're typing in our input field! This is what we'll do next.","position":{"start":{"line":86,"column":77,"offset":5061},"end":{"line":86,"column":222,"offset":5206},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4985},"end":{"line":86,"column":222,"offset":5206},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":88,"column":3,"offset":5212},"end":{"line":88,"column":8,"offset":5217},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":5210},"end":{"line":88,"column":10,"offset":5219},"indent":[]}},{"type":"text","value":" We decided to name our callback prop ","position":{"start":{"line":88,"column":10,"offset":5219},"end":{"line":88,"column":48,"offset":5257},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask</code>","position":{"start":{"line":88,"column":48,"offset":5257},"end":{"line":88,"column":57,"offset":5266},"indent":[]}},{"type":"text","value":" to make it easy to understand what the prop will do. Another common convention you may well come across in React code is to prefix callback prop names with the word ","position":{"start":{"line":88,"column":57,"offset":5266},"end":{"line":88,"column":223,"offset":5432},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">on</code>","position":{"start":{"line":88,"column":223,"offset":5432},"end":{"line":88,"column":227,"offset":5436},"indent":[]}},{"type":"text","value":", followed by the name of the event that will cause them to be run. For instance, we could have given our form a prop of ","position":{"start":{"line":88,"column":227,"offset":5436},"end":{"line":88,"column":348,"offset":5557},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onSubmit</code>","position":{"start":{"line":88,"column":348,"offset":5557},"end":{"line":88,"column":358,"offset":5567},"indent":[]}},{"type":"text","value":" with the value of ","position":{"start":{"line":88,"column":358,"offset":5567},"end":{"line":88,"column":377,"offset":5586},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask</code>","position":{"start":{"line":88,"column":377,"offset":5586},"end":{"line":88,"column":386,"offset":5595},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":88,"column":386,"offset":5595},"end":{"line":88,"column":387,"offset":5596},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":5210},"end":{"line":88,"column":387,"offset":5596},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to State and the useState hook","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#state_and_the_usestate_hook","children":[{"type":"text","value":"State and the ","position":{"start":{"line":90,"column":5,"offset":5604},"end":{"line":90,"column":19,"offset":5618},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">useState</code>","position":{"start":{"line":90,"column":19,"offset":5618},"end":{"line":90,"column":29,"offset":5628},"indent":[]}},{"type":"text","value":" hook","position":{"start":{"line":90,"column":29,"offset":5628},"end":{"line":90,"column":34,"offset":5633},"indent":[]}}],"position":{"start":{"line":90,"column":4,"offset":5603},"end":{"line":90,"column":239,"offset":5838},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5600},"end":{"line":90,"column":239,"offset":5838},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So far, we've used props to pass data through our components and this has served us just fine. Now that we're dealing with user input and data updates, however, we need something more.","position":{"start":{"line":92,"column":1,"offset":5842},"end":{"line":92,"column":185,"offset":6026},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":5842},"end":{"line":92,"column":185,"offset":6026},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For one thing, props come from the parent of a component. Our ","position":{"start":{"line":94,"column":1,"offset":6030},"end":{"line":94,"column":63,"offset":6092},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":94,"column":63,"offset":6092},"end":{"line":94,"column":73,"offset":6102},"indent":[]}},{"type":"text","value":" will not be inheriting a new name for our task; our ","position":{"start":{"line":94,"column":73,"offset":6102},"end":{"line":94,"column":126,"offset":6155},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input /></code>","position":{"start":{"line":94,"column":126,"offset":6155},"end":{"line":94,"column":137,"offset":6166},"indent":[]}},{"type":"text","value":" element lives directly inside of ","position":{"start":{"line":94,"column":137,"offset":6166},"end":{"line":94,"column":171,"offset":6200},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":94,"column":171,"offset":6200},"end":{"line":94,"column":181,"offset":6210},"indent":[]}},{"type":"text","value":", so ","position":{"start":{"line":94,"column":181,"offset":6210},"end":{"line":94,"column":186,"offset":6215},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form/></code>","position":{"start":{"line":94,"column":186,"offset":6215},"end":{"line":94,"column":195,"offset":6224},"indent":[]}},{"type":"text","value":" will be directly responsible for creating that new name. We can't ask ","position":{"start":{"line":94,"column":195,"offset":6224},"end":{"line":94,"column":266,"offset":6295},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Form /></code>","position":{"start":{"line":94,"column":266,"offset":6295},"end":{"line":94,"column":276,"offset":6305},"indent":[]}},{"type":"text","value":" to spontaneously create its own props, but we ","position":{"start":{"line":94,"column":276,"offset":6305},"end":{"line":94,"column":323,"offset":6352},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"can","position":{"start":{"line":94,"column":324,"offset":6353},"end":{"line":94,"column":327,"offset":6356},"indent":[]}}],"position":{"start":{"line":94,"column":323,"offset":6352},"end":{"line":94,"column":328,"offset":6357},"indent":[]}},{"type":"text","value":" ask it to track some of its own data for us. Data such as this, which a component itself owns, is called ","position":{"start":{"line":94,"column":328,"offset":6357},"end":{"line":94,"column":434,"offset":6463},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"state","position":{"start":{"line":94,"column":436,"offset":6465},"end":{"line":94,"column":441,"offset":6470},"indent":[]}}],"position":{"start":{"line":94,"column":434,"offset":6463},"end":{"line":94,"column":443,"offset":6472},"indent":[]}},{"type":"text","value":". State is another powerful tool for React because components not only ","position":{"start":{"line":94,"column":443,"offset":6472},"end":{"line":94,"column":514,"offset":6543},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"own","position":{"start":{"line":94,"column":515,"offset":6544},"end":{"line":94,"column":518,"offset":6547},"indent":[]}}],"position":{"start":{"line":94,"column":514,"offset":6543},"end":{"line":94,"column":519,"offset":6548},"indent":[]}},{"type":"text","value":" state, but can ","position":{"start":{"line":94,"column":519,"offset":6548},"end":{"line":94,"column":535,"offset":6564},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"update","position":{"start":{"line":94,"column":536,"offset":6565},"end":{"line":94,"column":542,"offset":6571},"indent":[]}}],"position":{"start":{"line":94,"column":535,"offset":6564},"end":{"line":94,"column":543,"offset":6572},"indent":[]}},{"type":"text","value":" it later. It's not possible to update the props a component receives; only to read them.","position":{"start":{"line":94,"column":543,"offset":6572},"end":{"line":94,"column":632,"offset":6661},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":6030},"end":{"line":94,"column":632,"offset":6661},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React provides a variety of special functions that allow us to provide new capabilities to components, like state. These functions are called ","position":{"start":{"line":96,"column":1,"offset":6665},"end":{"line":96,"column":143,"offset":6807},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"hooks","position":{"start":{"line":96,"column":145,"offset":6809},"end":{"line":96,"column":150,"offset":6814},"indent":[]}}],"position":{"start":{"line":96,"column":143,"offset":6807},"end":{"line":96,"column":152,"offset":6816},"indent":[]}},{"type":"text","value":", and the ","position":{"start":{"line":96,"column":152,"offset":6816},"end":{"line":96,"column":162,"offset":6826},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">useState</code>","position":{"start":{"line":96,"column":162,"offset":6826},"end":{"line":96,"column":172,"offset":6836},"indent":[]}},{"type":"text","value":" hook, as its name implies, is precisely the one we need in order to give our component some state.","position":{"start":{"line":96,"column":172,"offset":6836},"end":{"line":96,"column":271,"offset":6935},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":6665},"end":{"line":96,"column":271,"offset":6935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use a React hook, we need to import it from the React module. In ","position":{"start":{"line":98,"column":1,"offset":6939},"end":{"line":98,"column":69,"offset":7007},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Form.js</code>","position":{"start":{"line":98,"column":69,"offset":7007},"end":{"line":98,"column":78,"offset":7016},"indent":[]}},{"type":"text","value":", change your very first line so that it reads like this:","position":{"start":{"line":98,"column":78,"offset":7016},"end":{"line":98,"column":135,"offset":7073},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6939},"end":{"line":98,"column":135,"offset":7073},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from \"react\";</code></pre></div>","position":{"start":{"line":100,"column":1,"offset":7077},"end":{"line":102,"column":4,"offset":7127},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This allows us to import the ","position":{"start":{"line":104,"column":1,"offset":7131},"end":{"line":104,"column":30,"offset":7160},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">useState()</code>","position":{"start":{"line":104,"column":30,"offset":7160},"end":{"line":104,"column":42,"offset":7172},"indent":[]}},{"type":"text","value":" function by itself, and utilize it anywhere in this file.","position":{"start":{"line":104,"column":42,"offset":7172},"end":{"line":104,"column":100,"offset":7230},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":7131},"end":{"line":104,"column":100,"offset":7230},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">useState()</code>","position":{"start":{"line":106,"column":1,"offset":7234},"end":{"line":106,"column":13,"offset":7246},"indent":[]}},{"type":"text","value":" creates a piece of state for a component, and its only parameter determines the ","position":{"start":{"line":106,"column":13,"offset":7246},"end":{"line":106,"column":94,"offset":7327},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"initial value","position":{"start":{"line":106,"column":95,"offset":7328},"end":{"line":106,"column":108,"offset":7341},"indent":[]}}],"position":{"start":{"line":106,"column":94,"offset":7327},"end":{"line":106,"column":109,"offset":7342},"indent":[]}},{"type":"text","value":" of that state. It returns two things: the state, and a function that can be used to update the state later.","position":{"start":{"line":106,"column":109,"offset":7342},"end":{"line":106,"column":217,"offset":7450},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":7234},"end":{"line":106,"column":217,"offset":7450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a lot to take in at once, so let's try it out. We're going to make ourselves a ","position":{"start":{"line":108,"column":1,"offset":7454},"end":{"line":108,"column":88,"offset":7541},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":108,"column":88,"offset":7541},"end":{"line":108,"column":94,"offset":7547},"indent":[]}},{"type":"text","value":" state, and a function for updating the ","position":{"start":{"line":108,"column":94,"offset":7547},"end":{"line":108,"column":134,"offset":7587},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":108,"column":134,"offset":7587},"end":{"line":108,"column":140,"offset":7593},"indent":[]}},{"type":"text","value":" state.","position":{"start":{"line":108,"column":140,"offset":7593},"end":{"line":108,"column":147,"offset":7600},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":7454},"end":{"line":108,"column":147,"offset":7600},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Write the following above your ","position":{"start":{"line":110,"column":1,"offset":7604},"end":{"line":110,"column":32,"offset":7635},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":110,"column":32,"offset":7635},"end":{"line":110,"column":48,"offset":7651},"indent":[]}},{"type":"text","value":" function, inside ","position":{"start":{"line":110,"column":48,"offset":7651},"end":{"line":110,"column":66,"offset":7669},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Form()</code>","position":{"start":{"line":110,"column":66,"offset":7669},"end":{"line":110,"column":74,"offset":7677},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":110,"column":74,"offset":7677},"end":{"line":110,"column":75,"offset":7678},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":7604},"end":{"line":110,"column":75,"offset":7678},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const [name, setName] = useState('Use hooks!');</code></pre></div>","position":{"start":{"line":112,"column":1,"offset":7682},"end":{"line":114,"column":4,"offset":7739},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What's going on in this line of code?","position":{"start":{"line":116,"column":1,"offset":7743},"end":{"line":116,"column":38,"offset":7780},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":7743},"end":{"line":116,"column":38,"offset":7780},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We are setting the initial ","position":{"start":{"line":118,"column":5,"offset":7788},"end":{"line":118,"column":32,"offset":7815},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":118,"column":32,"offset":7815},"end":{"line":118,"column":38,"offset":7821},"indent":[]}},{"type":"text","value":" value as \"Use hooks!\".","position":{"start":{"line":118,"column":38,"offset":7821},"end":{"line":118,"column":61,"offset":7844},"indent":[]}}],"position":{"start":{"line":118,"column":5,"offset":7788},"end":{"line":118,"column":61,"offset":7844},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":7784},"end":{"line":118,"column":61,"offset":7844},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We are defining a function whose job is to modify ","position":{"start":{"line":119,"column":5,"offset":7850},"end":{"line":119,"column":55,"offset":7900},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":119,"column":55,"offset":7900},"end":{"line":119,"column":61,"offset":7906},"indent":[]}},{"type":"text","value":", called ","position":{"start":{"line":119,"column":61,"offset":7906},"end":{"line":119,"column":70,"offset":7915},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setName()</code>","position":{"start":{"line":119,"column":70,"offset":7915},"end":{"line":119,"column":81,"offset":7926},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":119,"column":81,"offset":7926},"end":{"line":119,"column":82,"offset":7927},"indent":[]}}],"position":{"start":{"line":119,"column":5,"offset":7850},"end":{"line":119,"column":82,"offset":7927},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":7846},"end":{"line":119,"column":82,"offset":7927},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">useState()</code>","position":{"start":{"line":120,"column":5,"offset":7933},"end":{"line":120,"column":17,"offset":7945},"indent":[]}},{"type":"text","value":" returns these two things, so we are using ","position":{"start":{"line":120,"column":17,"offset":7945},"end":{"line":120,"column":60,"offset":7988},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment","children":[{"type":"text","value":"array destructuring","position":{"start":{"line":120,"column":61,"offset":7989},"end":{"line":120,"column":80,"offset":8008},"indent":[]}}],"position":{"start":{"line":120,"column":60,"offset":7988},"end":{"line":120,"column":183,"offset":8111},"indent":[]}},{"type":"text","value":" to capture them both in separate variables.","position":{"start":{"line":120,"column":183,"offset":8111},"end":{"line":120,"column":227,"offset":8155},"indent":[]}}],"position":{"start":{"line":120,"column":5,"offset":7933},"end":{"line":120,"column":227,"offset":8155},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7929},"end":{"line":120,"column":227,"offset":8155},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":7784},"end":{"line":120,"column":227,"offset":8155},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Reading state","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#reading_state","children":[{"type":"text","value":"Reading state","position":{"start":{"line":122,"column":6,"offset":8164},"end":{"line":122,"column":19,"offset":8177},"indent":[]}}],"position":{"start":{"line":122,"column":5,"offset":8163},"end":{"line":122,"column":196,"offset":8354},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":8159},"end":{"line":122,"column":196,"offset":8354},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can see the ","position":{"start":{"line":124,"column":1,"offset":8358},"end":{"line":124,"column":17,"offset":8374},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":124,"column":17,"offset":8374},"end":{"line":124,"column":23,"offset":8380},"indent":[]}},{"type":"text","value":" state in action right away. Add a ","position":{"start":{"line":124,"column":23,"offset":8380},"end":{"line":124,"column":58,"offset":8415},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":124,"column":58,"offset":8415},"end":{"line":124,"column":65,"offset":8422},"indent":[]}},{"type":"text","value":" attribute to the form's input, and set its value to ","position":{"start":{"line":124,"column":65,"offset":8422},"end":{"line":124,"column":118,"offset":8475},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":124,"column":118,"offset":8475},"end":{"line":124,"column":124,"offset":8481},"indent":[]}},{"type":"text","value":". Your browser will render \"Use hooks!\" inside the input.","position":{"start":{"line":124,"column":124,"offset":8481},"end":{"line":124,"column":181,"offset":8538},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":8358},"end":{"line":124,"column":181,"offset":8538},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input\n  type=\"text\"\n  id=\"new-todo-input\"\n  className=\"input input__lg\"\n  name=\"text\"\n  autoComplete=\"off\"\n  value={name}\n/></code></pre></div>","position":{"start":{"line":126,"column":1,"offset":8542},"end":{"line":135,"column":4,"offset":8684},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Change \"Use hooks!\" to an empty string once you're done; this is what we want for our initial state.","position":{"start":{"line":137,"column":1,"offset":8688},"end":{"line":137,"column":101,"offset":8788},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8688},"end":{"line":137,"column":101,"offset":8788},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const [name, setName] = useState('');</code></pre></div>","position":{"start":{"line":139,"column":1,"offset":8792},"end":{"line":141,"column":4,"offset":8839},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Reading user input","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#reading_user_input","children":[{"type":"text","value":"Reading user input","position":{"start":{"line":143,"column":6,"offset":8848},"end":{"line":143,"column":24,"offset":8866},"indent":[]}}],"position":{"start":{"line":143,"column":5,"offset":8847},"end":{"line":143,"column":211,"offset":9053},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8843},"end":{"line":143,"column":211,"offset":9053},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before we can change the value of ","position":{"start":{"line":145,"column":1,"offset":9057},"end":{"line":145,"column":35,"offset":9091},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":145,"column":35,"offset":9091},"end":{"line":145,"column":41,"offset":9097},"indent":[]}},{"type":"text","value":", we need to capture a user's input as they type. For this, we can listen to the ","position":{"start":{"line":145,"column":41,"offset":9097},"end":{"line":145,"column":122,"offset":9178},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onChange</code>","position":{"start":{"line":145,"column":122,"offset":9178},"end":{"line":145,"column":132,"offset":9188},"indent":[]}},{"type":"text","value":" event. Let's write a ","position":{"start":{"line":145,"column":132,"offset":9188},"end":{"line":145,"column":154,"offset":9210},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleChange()</code>","position":{"start":{"line":145,"column":154,"offset":9210},"end":{"line":145,"column":170,"offset":9226},"indent":[]}},{"type":"text","value":" function, and listen for it on the ","position":{"start":{"line":145,"column":170,"offset":9226},"end":{"line":145,"column":206,"offset":9262},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input /></code>","position":{"start":{"line":145,"column":206,"offset":9262},"end":{"line":145,"column":217,"offset":9273},"indent":[]}},{"type":"text","value":" tag.","position":{"start":{"line":145,"column":217,"offset":9273},"end":{"line":145,"column":222,"offset":9278},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":9057},"end":{"line":145,"column":222,"offset":9278},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// near the top of the `Form` component\nfunction handleChange(e) {\n  console.log(\"Typing!\");\n}\n\n// Down in the return statement\n&lt;input\n  type=\"text\"\n  id=\"new-todo-input\"\n  className=\"input input__lg\"\n  name=\"text\"\n  autoComplete=\"off\"\n  value={name}\n  onChange={handleChange}\n/></code></pre></div>","position":{"start":{"line":147,"column":1,"offset":9282},"end":{"line":163,"column":4,"offset":9585},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Currently, your input's value will not change as you type, but your browser will log the word \"Typing!\" to the JavaScript console, so we know our event listener is attached to the input. In order to change the input's value, we have to use our ","position":{"start":{"line":165,"column":1,"offset":9589},"end":{"line":165,"column":245,"offset":9833},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleChange()</code>","position":{"start":{"line":165,"column":245,"offset":9833},"end":{"line":165,"column":261,"offset":9849},"indent":[]}},{"type":"text","value":" function to update our ","position":{"start":{"line":165,"column":261,"offset":9849},"end":{"line":165,"column":285,"offset":9873},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":165,"column":285,"offset":9873},"end":{"line":165,"column":291,"offset":9879},"indent":[]}},{"type":"text","value":" state.","position":{"start":{"line":165,"column":291,"offset":9879},"end":{"line":165,"column":298,"offset":9886},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":9589},"end":{"line":165,"column":298,"offset":9886},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To read the contents of the input field as they change, you can access the input's ","position":{"start":{"line":167,"column":1,"offset":9890},"end":{"line":167,"column":84,"offset":9973},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":167,"column":84,"offset":9973},"end":{"line":167,"column":91,"offset":9980},"indent":[]}},{"type":"text","value":" property. We can do this inside ","position":{"start":{"line":167,"column":91,"offset":9980},"end":{"line":167,"column":124,"offset":10013},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleChange()</code>","position":{"start":{"line":167,"column":124,"offset":10013},"end":{"line":167,"column":140,"offset":10029},"indent":[]}},{"type":"text","value":" by reading ","position":{"start":{"line":167,"column":140,"offset":10029},"end":{"line":167,"column":152,"offset":10041},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">e.target.value</code>","position":{"start":{"line":167,"column":152,"offset":10041},"end":{"line":167,"column":168,"offset":10057},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":167,"column":168,"offset":10057},"end":{"line":167,"column":170,"offset":10059},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">e.target</code>","position":{"start":{"line":167,"column":170,"offset":10059},"end":{"line":167,"column":180,"offset":10069},"indent":[]}},{"type":"text","value":" represents the element that fired the ","position":{"start":{"line":167,"column":180,"offset":10069},"end":{"line":167,"column":219,"offset":10108},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">change</code>","position":{"start":{"line":167,"column":219,"offset":10108},"end":{"line":167,"column":227,"offset":10116},"indent":[]}},{"type":"text","value":" event — that's our input. So, ","position":{"start":{"line":167,"column":227,"offset":10116},"end":{"line":167,"column":258,"offset":10147},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":167,"column":258,"offset":10147},"end":{"line":167,"column":265,"offset":10154},"indent":[]}},{"type":"text","value":" is the text inside it.","position":{"start":{"line":167,"column":265,"offset":10154},"end":{"line":167,"column":288,"offset":10177},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":9890},"end":{"line":167,"column":288,"offset":10177},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can ","position":{"start":{"line":169,"column":1,"offset":10181},"end":{"line":169,"column":9,"offset":10189},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">console.log()</code>","position":{"start":{"line":169,"column":9,"offset":10189},"end":{"line":169,"column":24,"offset":10204},"indent":[]}},{"type":"text","value":" this value to see it in your browser's console.","position":{"start":{"line":169,"column":24,"offset":10204},"end":{"line":169,"column":72,"offset":10252},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":10181},"end":{"line":169,"column":72,"offset":10252},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function handleChange(e) {\n  console.log(e.target.value);\n}</code></pre></div>","position":{"start":{"line":171,"column":1,"offset":10256},"end":{"line":175,"column":4,"offset":10327},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Updating state","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#updating_state","children":[{"type":"text","value":"Updating state","position":{"start":{"line":177,"column":6,"offset":10336},"end":{"line":177,"column":20,"offset":10350},"indent":[]}}],"position":{"start":{"line":177,"column":5,"offset":10335},"end":{"line":177,"column":199,"offset":10529},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":10331},"end":{"line":177,"column":199,"offset":10529},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Logging isn't enough — we want to actually store the updated state of the name as the input value changes! Change the ","position":{"start":{"line":179,"column":1,"offset":10533},"end":{"line":179,"column":119,"offset":10651},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">console.log()</code>","position":{"start":{"line":179,"column":119,"offset":10651},"end":{"line":179,"column":134,"offset":10666},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":179,"column":134,"offset":10666},"end":{"line":179,"column":138,"offset":10670},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setName()</code>","position":{"start":{"line":179,"column":138,"offset":10670},"end":{"line":179,"column":149,"offset":10681},"indent":[]}},{"type":"text","value":", as shown below:","position":{"start":{"line":179,"column":149,"offset":10681},"end":{"line":179,"column":166,"offset":10698},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":10533},"end":{"line":179,"column":166,"offset":10698},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function handleChange(e) {\n  setName(e.target.value);\n}</code></pre></div>","position":{"start":{"line":181,"column":1,"offset":10702},"end":{"line":185,"column":4,"offset":10769},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we need to change our ","position":{"start":{"line":187,"column":1,"offset":10773},"end":{"line":187,"column":27,"offset":10799},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":187,"column":27,"offset":10799},"end":{"line":187,"column":43,"offset":10815},"indent":[]}},{"type":"text","value":" function so that it calls ","position":{"start":{"line":187,"column":43,"offset":10815},"end":{"line":187,"column":70,"offset":10842},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.addTask</code>","position":{"start":{"line":187,"column":70,"offset":10842},"end":{"line":187,"column":85,"offset":10857},"indent":[]}},{"type":"text","value":" with name as an argument — remember our callback prop? This will serve to send the task back to the ","position":{"start":{"line":187,"column":85,"offset":10857},"end":{"line":187,"column":186,"offset":10958},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App</code>","position":{"start":{"line":187,"column":186,"offset":10958},"end":{"line":187,"column":191,"offset":10963},"indent":[]}},{"type":"text","value":" component, so we can add it to our list of tasks at some later date. As a matter of good practice, you should clear the input after your form submits, so we'll call ","position":{"start":{"line":187,"column":191,"offset":10963},"end":{"line":187,"column":357,"offset":11129},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setName()</code>","position":{"start":{"line":187,"column":357,"offset":11129},"end":{"line":187,"column":368,"offset":11140},"indent":[]}},{"type":"text","value":" again with an empty string to do so:","position":{"start":{"line":187,"column":368,"offset":11140},"end":{"line":187,"column":405,"offset":11177},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":10773},"end":{"line":187,"column":405,"offset":11177},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function handleSubmit(e) {\n  e.preventDefault();\n  props.addTask(name);\n  setName(\"\");\n}</code></pre></div>","position":{"start":{"line":189,"column":1,"offset":11181},"end":{"line":195,"column":4,"offset":11283},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At last, you can type something into the input field in your browser and click ","position":{"start":{"line":197,"column":1,"offset":11287},"end":{"line":197,"column":80,"offset":11366},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Add","position":{"start":{"line":197,"column":81,"offset":11367},"end":{"line":197,"column":84,"offset":11370},"indent":[]}}],"position":{"start":{"line":197,"column":80,"offset":11366},"end":{"line":197,"column":85,"offset":11371},"indent":[]}},{"type":"text","value":" — whatever you typed will appear in an alert dialog.","position":{"start":{"line":197,"column":85,"offset":11371},"end":{"line":197,"column":138,"offset":11424},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":11287},"end":{"line":197,"column":138,"offset":11424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Your ","position":{"start":{"line":199,"column":1,"offset":11428},"end":{"line":199,"column":6,"offset":11433},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Form.js</code>","position":{"start":{"line":199,"column":6,"offset":11433},"end":{"line":199,"column":15,"offset":11442},"indent":[]}},{"type":"text","value":" file should now read like this:","position":{"start":{"line":199,"column":15,"offset":11442},"end":{"line":199,"column":47,"offset":11474},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":11428},"end":{"line":199,"column":47,"offset":11474},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n  return (\n    &lt;form onSubmit={handleSubmit}>\n      &lt;h2 className=\"label-wrapper\">\n        &lt;label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        &lt;/label>\n      &lt;/h2>\n      &lt;input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      &lt;button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      &lt;/button>\n    &lt;/form>\n  );\n}\n\nexport default Form;</code></pre></div>","position":{"start":{"line":201,"column":1,"offset":11478},"end":{"line":240,"column":4,"offset":12341},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":242,"column":3,"offset":12347},"end":{"line":242,"column":8,"offset":12352},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":12345},"end":{"line":242,"column":10,"offset":12354},"indent":[]}},{"type":"text","value":" One thing you'll notice is that you are able to submit empty tasks by just pressing the Add button without entering a task name. Can you think of a way to disallow empty tasks from being added? As a hint, you probably need to add some kind of check into the ","position":{"start":{"line":242,"column":10,"offset":12354},"end":{"line":242,"column":269,"offset":12613},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">handleSubmit()</code>","position":{"start":{"line":242,"column":269,"offset":12613},"end":{"line":242,"column":285,"offset":12629},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":242,"column":285,"offset":12629},"end":{"line":242,"column":295,"offset":12639},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":12345},"end":{"line":242,"column":295,"offset":12639},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Putting it all together: Adding a task","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#putting_it_all_together_adding_a_task","children":[{"type":"text","value":"Putting it all together: Adding a task","position":{"start":{"line":244,"column":5,"offset":12647},"end":{"line":244,"column":43,"offset":12685},"indent":[]}}],"position":{"start":{"line":244,"column":4,"offset":12646},"end":{"line":244,"column":269,"offset":12911},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":12643},"end":{"line":244,"column":269,"offset":12911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we've practiced with events, callback props, and hooks we're ready to write functionality that will allow a user to add a new task from their browser.","position":{"start":{"line":246,"column":1,"offset":12915},"end":{"line":246,"column":160,"offset":13074},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":12915},"end":{"line":246,"column":160,"offset":13074},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Tasks as state","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#tasks_as_state","children":[{"type":"text","value":"Tasks as state","position":{"start":{"line":248,"column":6,"offset":13083},"end":{"line":248,"column":20,"offset":13097},"indent":[]}}],"position":{"start":{"line":248,"column":5,"offset":13082},"end":{"line":248,"column":199,"offset":13276},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":13078},"end":{"line":248,"column":199,"offset":13276},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Import ","position":{"start":{"line":250,"column":1,"offset":13280},"end":{"line":250,"column":8,"offset":13287},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">useState</code>","position":{"start":{"line":250,"column":8,"offset":13287},"end":{"line":250,"column":18,"offset":13297},"indent":[]}},{"type":"text","value":" into ","position":{"start":{"line":250,"column":18,"offset":13297},"end":{"line":250,"column":24,"offset":13303},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App.js</code>","position":{"start":{"line":250,"column":24,"offset":13303},"end":{"line":250,"column":32,"offset":13311},"indent":[]}},{"type":"text","value":", so that we can store our tasks in state — update your ","position":{"start":{"line":250,"column":32,"offset":13311},"end":{"line":250,"column":88,"offset":13367},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">React</code>","position":{"start":{"line":250,"column":88,"offset":13367},"end":{"line":250,"column":95,"offset":13374},"indent":[]}},{"type":"text","value":" import line to the following:","position":{"start":{"line":250,"column":95,"offset":13374},"end":{"line":250,"column":125,"offset":13404},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":13280},"end":{"line":250,"column":125,"offset":13404},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from \"react\";</code></pre></div>","position":{"start":{"line":252,"column":1,"offset":13408},"end":{"line":254,"column":4,"offset":13458},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We want to pass ","position":{"start":{"line":256,"column":1,"offset":13462},"end":{"line":256,"column":17,"offset":13478},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.tasks</code>","position":{"start":{"line":256,"column":17,"offset":13478},"end":{"line":256,"column":30,"offset":13491},"indent":[]}},{"type":"text","value":" into the ","position":{"start":{"line":256,"column":30,"offset":13491},"end":{"line":256,"column":40,"offset":13501},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">useState()</code>","position":{"start":{"line":256,"column":40,"offset":13501},"end":{"line":256,"column":52,"offset":13513},"indent":[]}},{"type":"text","value":" hook – this will preserve its initial state. Add the following right at the top of your App() function definition:","position":{"start":{"line":256,"column":52,"offset":13513},"end":{"line":256,"column":167,"offset":13628},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":13462},"end":{"line":256,"column":167,"offset":13628},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const [tasks, setTasks] = useState(props.tasks);</code></pre></div>","position":{"start":{"line":258,"column":1,"offset":13632},"end":{"line":260,"column":4,"offset":13690},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, we can change our ","position":{"start":{"line":262,"column":1,"offset":13694},"end":{"line":262,"column":24,"offset":13717},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">taskList</code>","position":{"start":{"line":262,"column":24,"offset":13717},"end":{"line":262,"column":34,"offset":13727},"indent":[]}},{"type":"text","value":" mapping so that it is the result of mapping ","position":{"start":{"line":262,"column":34,"offset":13727},"end":{"line":262,"column":79,"offset":13772},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tasks</code>","position":{"start":{"line":262,"column":79,"offset":13772},"end":{"line":262,"column":86,"offset":13779},"indent":[]}},{"type":"text","value":", instead of ","position":{"start":{"line":262,"column":86,"offset":13779},"end":{"line":262,"column":99,"offset":13792},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.tasks</code>","position":{"start":{"line":262,"column":99,"offset":13792},"end":{"line":262,"column":112,"offset":13805},"indent":[]}},{"type":"text","value":". Your ","position":{"start":{"line":262,"column":112,"offset":13805},"end":{"line":262,"column":119,"offset":13812},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">taskList</code>","position":{"start":{"line":262,"column":119,"offset":13812},"end":{"line":262,"column":129,"offset":13822},"indent":[]}},{"type":"text","value":" constant declaration should now look like so:","position":{"start":{"line":262,"column":129,"offset":13822},"end":{"line":262,"column":175,"offset":13868},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":13694},"end":{"line":262,"column":175,"offset":13868},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const taskList = tasks.map(task => (\n    &lt;Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n      />\n    )\n  );</code></pre></div>","position":{"start":{"line":264,"column":1,"offset":13872},"end":{"line":274,"column":4,"offset":14059},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Adding a task","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#adding_a_task","children":[{"type":"text","value":"Adding a task","position":{"start":{"line":276,"column":6,"offset":14068},"end":{"line":276,"column":19,"offset":14081},"indent":[]}}],"position":{"start":{"line":276,"column":5,"offset":14067},"end":{"line":276,"column":196,"offset":14258},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":14063},"end":{"line":276,"column":196,"offset":14258},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We've now got a ","position":{"start":{"line":278,"column":1,"offset":14262},"end":{"line":278,"column":17,"offset":14278},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks</code>","position":{"start":{"line":278,"column":17,"offset":14278},"end":{"line":278,"column":27,"offset":14288},"indent":[]}},{"type":"text","value":" hook that we can use in our ","position":{"start":{"line":278,"column":27,"offset":14288},"end":{"line":278,"column":56,"offset":14317},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":278,"column":56,"offset":14317},"end":{"line":278,"column":67,"offset":14328},"indent":[]}},{"type":"text","value":" function to update our list of tasks. There's one problem however: we can't just pass the ","position":{"start":{"line":278,"column":67,"offset":14328},"end":{"line":278,"column":158,"offset":14419},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":278,"column":158,"offset":14419},"end":{"line":278,"column":164,"offset":14425},"indent":[]}},{"type":"text","value":" argument of ","position":{"start":{"line":278,"column":164,"offset":14425},"end":{"line":278,"column":177,"offset":14438},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":278,"column":177,"offset":14438},"end":{"line":278,"column":188,"offset":14449},"indent":[]}},{"type":"text","value":" into ","position":{"start":{"line":278,"column":188,"offset":14449},"end":{"line":278,"column":194,"offset":14455},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks</code>","position":{"start":{"line":278,"column":194,"offset":14455},"end":{"line":278,"column":204,"offset":14465},"indent":[]}},{"type":"text","value":", because ","position":{"start":{"line":278,"column":204,"offset":14465},"end":{"line":278,"column":214,"offset":14475},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tasks</code>","position":{"start":{"line":278,"column":214,"offset":14475},"end":{"line":278,"column":221,"offset":14482},"indent":[]}},{"type":"text","value":" is an array of objects and ","position":{"start":{"line":278,"column":221,"offset":14482},"end":{"line":278,"column":249,"offset":14510},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":278,"column":249,"offset":14510},"end":{"line":278,"column":255,"offset":14516},"indent":[]}},{"type":"text","value":" is a string. If we tried to do this, the array would be replaced with the string.","position":{"start":{"line":278,"column":255,"offset":14516},"end":{"line":278,"column":337,"offset":14598},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":14262},"end":{"line":278,"column":337,"offset":14598},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, we need to put ","position":{"start":{"line":280,"column":1,"offset":14602},"end":{"line":280,"column":30,"offset":14631},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":280,"column":30,"offset":14631},"end":{"line":280,"column":36,"offset":14637},"indent":[]}},{"type":"text","value":" into an object that has the same structure as our existing tasks. Inside of the ","position":{"start":{"line":280,"column":36,"offset":14637},"end":{"line":280,"column":117,"offset":14718},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":280,"column":117,"offset":14718},"end":{"line":280,"column":128,"offset":14729},"indent":[]}},{"type":"text","value":" function, we will make a ","position":{"start":{"line":280,"column":128,"offset":14729},"end":{"line":280,"column":154,"offset":14755},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">newTask</code>","position":{"start":{"line":280,"column":154,"offset":14755},"end":{"line":280,"column":163,"offset":14764},"indent":[]}},{"type":"text","value":" object to add to the array.","position":{"start":{"line":280,"column":163,"offset":14764},"end":{"line":280,"column":191,"offset":14792},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":14602},"end":{"line":280,"column":191,"offset":14792},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We then need to make a new array with this new task added to it and then update the state of the tasks data to this new state. To do this, we can use spread syntax to ","position":{"start":{"line":282,"column":1,"offset":14796},"end":{"line":282,"column":168,"offset":14963},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#copy_an_array","children":[{"type":"text","value":"copy the existing array","position":{"start":{"line":282,"column":169,"offset":14964},"end":{"line":282,"column":192,"offset":14987},"indent":[]}}],"position":{"start":{"line":282,"column":168,"offset":14963},"end":{"line":282,"column":298,"offset":15093},"indent":[]}},{"type":"text","value":", and add our object at the end. We then pass this array into ","position":{"start":{"line":282,"column":298,"offset":15093},"end":{"line":282,"column":360,"offset":15155},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks()</code>","position":{"start":{"line":282,"column":360,"offset":15155},"end":{"line":282,"column":372,"offset":15167},"indent":[]}},{"type":"text","value":" to update the state.","position":{"start":{"line":282,"column":372,"offset":15167},"end":{"line":282,"column":393,"offset":15188},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":14796},"end":{"line":282,"column":393,"offset":15188},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Putting that all together, your ","position":{"start":{"line":284,"column":1,"offset":15192},"end":{"line":284,"column":33,"offset":15224},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":284,"column":33,"offset":15224},"end":{"line":284,"column":44,"offset":15235},"indent":[]}},{"type":"text","value":" function should read like so:","position":{"start":{"line":284,"column":44,"offset":15235},"end":{"line":284,"column":74,"offset":15265},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":15192},"end":{"line":284,"column":74,"offset":15265},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function addTask(name) {\n  const newTask = { id: \"id\", name: name, completed: false };\n  setTasks([...tasks, newTask]);\n}</code></pre></div>","position":{"start":{"line":286,"column":1,"offset":15269},"end":{"line":291,"column":4,"offset":15403},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now you can use the browser to add a task to our data! Type anything into the form and click \"Add\" (or press the Enter key) and you'll see your new todo item appear in the UI!","position":{"start":{"line":293,"column":1,"offset":15407},"end":{"line":293,"column":176,"offset":15582},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":15407},"end":{"line":293,"column":176,"offset":15582},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"However, we have another problem","position":{"start":{"line":295,"column":3,"offset":15588},"end":{"line":295,"column":35,"offset":15620},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":15586},"end":{"line":295,"column":37,"offset":15622},"indent":[]}},{"type":"text","value":": our ","position":{"start":{"line":295,"column":37,"offset":15622},"end":{"line":295,"column":43,"offset":15628},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":295,"column":43,"offset":15628},"end":{"line":295,"column":54,"offset":15639},"indent":[]}},{"type":"text","value":" function is giving each task the same ","position":{"start":{"line":295,"column":54,"offset":15639},"end":{"line":295,"column":93,"offset":15678},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":295,"column":93,"offset":15678},"end":{"line":295,"column":97,"offset":15682},"indent":[]}},{"type":"text","value":". This is bad for accessibility, and makes it impossible for React to tell future tasks apart with the ","position":{"start":{"line":295,"column":97,"offset":15682},"end":{"line":295,"column":200,"offset":15785},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">key</code>","position":{"start":{"line":295,"column":200,"offset":15785},"end":{"line":295,"column":205,"offset":15790},"indent":[]}},{"type":"text","value":" prop. In fact, React will give you a warning in your DevTools console — \"Warning: Encountered two children with the same key...\"","position":{"start":{"line":295,"column":205,"offset":15790},"end":{"line":295,"column":334,"offset":15919},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":15586},"end":{"line":295,"column":334,"offset":15919},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need to fix this. Making unique identifiers is a hard problem – one for which the JavaScript community has written some helpful libraries. We'll use ","position":{"start":{"line":297,"column":1,"offset":15923},"end":{"line":297,"column":153,"offset":16075},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/ai/nanoid","children":[{"type":"text","value":"nanoid","position":{"start":{"line":297,"column":154,"offset":16076},"end":{"line":297,"column":160,"offset":16082},"indent":[]}}],"position":{"start":{"line":297,"column":153,"offset":16075},"end":{"line":297,"column":191,"offset":16113},"indent":[]}},{"type":"text","value":" because it's tiny, and it works.","position":{"start":{"line":297,"column":191,"offset":16113},"end":{"line":297,"column":224,"offset":16146},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":15923},"end":{"line":297,"column":224,"offset":16146},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Make sure you're in the root directory of your application and run the following terminal command:","position":{"start":{"line":299,"column":1,"offset":16150},"end":{"line":299,"column":99,"offset":16248},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":16150},"end":{"line":299,"column":99,"offset":16248},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":301,"column":3,"offset":16254},"end":{"line":301,"column":8,"offset":16259},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":16252},"end":{"line":301,"column":10,"offset":16261},"indent":[]}},{"type":"text","value":" If you're using yarn, you'll need the following instead: ","position":{"start":{"line":301,"column":10,"offset":16261},"end":{"line":301,"column":68,"offset":16319},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">yarn add nanoid</code>","position":{"start":{"line":301,"column":68,"offset":16319},"end":{"line":301,"column":85,"offset":16336},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":16252},"end":{"line":301,"column":85,"offset":16336},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can import ","position":{"start":{"line":303,"column":1,"offset":16340},"end":{"line":303,"column":19,"offset":16358},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nanoid</code>","position":{"start":{"line":303,"column":19,"offset":16358},"end":{"line":303,"column":27,"offset":16366},"indent":[]}},{"type":"text","value":" into the top of ","position":{"start":{"line":303,"column":27,"offset":16366},"end":{"line":303,"column":44,"offset":16383},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App.js</code>","position":{"start":{"line":303,"column":44,"offset":16383},"end":{"line":303,"column":52,"offset":16391},"indent":[]}},{"type":"text","value":" so we can use it to create unique IDs for our new tasks. First of all, include the following import line at the top of ","position":{"start":{"line":303,"column":52,"offset":16391},"end":{"line":303,"column":172,"offset":16511},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App.js</code>","position":{"start":{"line":303,"column":172,"offset":16511},"end":{"line":303,"column":180,"offset":16519},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":303,"column":180,"offset":16519},"end":{"line":303,"column":181,"offset":16520},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":16340},"end":{"line":303,"column":181,"offset":16520},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { nanoid } from \"nanoid\";</code></pre></div>","position":{"start":{"line":305,"column":1,"offset":16524},"end":{"line":307,"column":4,"offset":16566},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now let's update ","position":{"start":{"line":309,"column":1,"offset":16570},"end":{"line":309,"column":18,"offset":16587},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">addTask()</code>","position":{"start":{"line":309,"column":18,"offset":16587},"end":{"line":309,"column":29,"offset":16598},"indent":[]}},{"type":"text","value":" so that each task ID becomes a prefix todo- plus a unique string generated by nanoid. Update your ","position":{"start":{"line":309,"column":29,"offset":16598},"end":{"line":309,"column":128,"offset":16697},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">newTask</code>","position":{"start":{"line":309,"column":128,"offset":16697},"end":{"line":309,"column":137,"offset":16706},"indent":[]}},{"type":"text","value":" constant declaration to this:","position":{"start":{"line":309,"column":137,"offset":16706},"end":{"line":309,"column":167,"offset":16736},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":16570},"end":{"line":309,"column":167,"offset":16736},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };</code></pre></div>","position":{"start":{"line":311,"column":1,"offset":16740},"end":{"line":313,"column":4,"offset":16823},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Save everything, and try your app again — now you can add tasks without getting that warning about duplicate IDs.","position":{"start":{"line":315,"column":1,"offset":16827},"end":{"line":315,"column":114,"offset":16940},"indent":[]}}],"position":{"start":{"line":315,"column":1,"offset":16827},"end":{"line":315,"column":114,"offset":16940},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Detour: counting tasks","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#detour_counting_tasks","children":[{"type":"text","value":"Detour: counting tasks","position":{"start":{"line":317,"column":5,"offset":16948},"end":{"line":317,"column":27,"offset":16970},"indent":[]}}],"position":{"start":{"line":317,"column":4,"offset":16947},"end":{"line":317,"column":221,"offset":17164},"indent":[]}}],"position":{"start":{"line":317,"column":1,"offset":16944},"end":{"line":317,"column":221,"offset":17164},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we can add new tasks, you may notice a problem: our heading reads 3 tasks remaining, no matter how many tasks we have! We can fix this by counting the length of ","position":{"start":{"line":319,"column":1,"offset":17168},"end":{"line":319,"column":171,"offset":17338},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">taskList</code>","position":{"start":{"line":319,"column":171,"offset":17338},"end":{"line":319,"column":181,"offset":17348},"indent":[]}},{"type":"text","value":" and changing the text of our heading accordingly.","position":{"start":{"line":319,"column":181,"offset":17348},"end":{"line":319,"column":231,"offset":17398},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":17168},"end":{"line":319,"column":231,"offset":17398},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add this inside your ","position":{"start":{"line":321,"column":1,"offset":17402},"end":{"line":321,"column":22,"offset":17423},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App()</code>","position":{"start":{"line":321,"column":22,"offset":17423},"end":{"line":321,"column":29,"offset":17430},"indent":[]}},{"type":"text","value":" definition, before the return statement:","position":{"start":{"line":321,"column":29,"offset":17430},"end":{"line":321,"column":70,"offset":17471},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":17402},"end":{"line":321,"column":70,"offset":17471},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const headingText = `${taskList.length} tasks remaining`;</code></pre></div>","position":{"start":{"line":323,"column":1,"offset":17475},"end":{"line":325,"column":4,"offset":17542},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Hrm. This is almost right, except that if our list ever contains a single task, the heading will still use the word \"tasks\". We can make this a variable, too. Update the code you just added as follows:","position":{"start":{"line":327,"column":1,"offset":17546},"end":{"line":327,"column":202,"offset":17747},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":17546},"end":{"line":327,"column":202,"offset":17747},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\nconst headingText = `${taskList.length} ${tasksNoun} remaining`;</code></pre></div>","position":{"start":{"line":329,"column":1,"offset":17751},"end":{"line":332,"column":4,"offset":17886},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now you can replace the list heading's text content with the ","position":{"start":{"line":334,"column":1,"offset":17890},"end":{"line":334,"column":62,"offset":17951},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">headingText</code>","position":{"start":{"line":334,"column":62,"offset":17951},"end":{"line":334,"column":75,"offset":17964},"indent":[]}},{"type":"text","value":" variable. Update your ","position":{"start":{"line":334,"column":75,"offset":17964},"end":{"line":334,"column":98,"offset":17987},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;h2></code>","position":{"start":{"line":334,"column":98,"offset":17987},"end":{"line":334,"column":104,"offset":17993},"indent":[]}},{"type":"text","value":" like so:","position":{"start":{"line":334,"column":104,"offset":17993},"end":{"line":334,"column":113,"offset":18002},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":17890},"end":{"line":334,"column":113,"offset":18002},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;h2 id=\"list-heading\">{headingText}&lt;/h2></code></pre></div>","position":{"start":{"line":336,"column":1,"offset":18006},"end":{"line":338,"column":4,"offset":18056},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Completing a task","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#completing_a_task","children":[{"type":"text","value":"Completing a task","position":{"start":{"line":340,"column":5,"offset":18064},"end":{"line":340,"column":22,"offset":18081},"indent":[]}}],"position":{"start":{"line":340,"column":4,"offset":18063},"end":{"line":340,"column":207,"offset":18266},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":18060},"end":{"line":340,"column":207,"offset":18266},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You might notice that, when you click on a checkbox, it checks and unchecks appropriately. As a feature of HTML, the browser knows how to remember which checkbox inputs are checked or unchecked without our help. This feature hides a problem, however: toggling a checkbox doesn't change the state in our React application. This means that the browser and our app are now out-of-sync. We have to write our own code to put the browser back in sync with our app.","position":{"start":{"line":342,"column":1,"offset":18270},"end":{"line":342,"column":459,"offset":18728},"indent":[]}}],"position":{"start":{"line":342,"column":1,"offset":18270},"end":{"line":342,"column":459,"offset":18728},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Proving the bug","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#proving_the_bug","children":[{"type":"text","value":"Proving the bug","position":{"start":{"line":344,"column":6,"offset":18737},"end":{"line":344,"column":21,"offset":18752},"indent":[]}}],"position":{"start":{"line":344,"column":5,"offset":18736},"end":{"line":344,"column":202,"offset":18933},"indent":[]}}],"position":{"start":{"line":344,"column":1,"offset":18732},"end":{"line":344,"column":202,"offset":18933},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before we fix the problem, let's observe it happening.","position":{"start":{"line":346,"column":1,"offset":18937},"end":{"line":346,"column":55,"offset":18991},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":18937},"end":{"line":346,"column":55,"offset":18991},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll start by writing a ","position":{"start":{"line":348,"column":1,"offset":18995},"end":{"line":348,"column":26,"offset":19020},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted()</code>","position":{"start":{"line":348,"column":26,"offset":19020},"end":{"line":348,"column":49,"offset":19043},"indent":[]}},{"type":"text","value":" function in our ","position":{"start":{"line":348,"column":49,"offset":19043},"end":{"line":348,"column":66,"offset":19060},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App()</code>","position":{"start":{"line":348,"column":66,"offset":19060},"end":{"line":348,"column":73,"offset":19067},"indent":[]}},{"type":"text","value":" component. This function will have an ","position":{"start":{"line":348,"column":73,"offset":19067},"end":{"line":348,"column":112,"offset":19106},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":348,"column":112,"offset":19106},"end":{"line":348,"column":116,"offset":19110},"indent":[]}},{"type":"text","value":" parameter, but we're not going to use it yet. For now, we'll log the first task in the array to the console – we're going to inspect what happens when we check or uncheck it in our browser:","position":{"start":{"line":348,"column":116,"offset":19110},"end":{"line":348,"column":306,"offset":19300},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":18995},"end":{"line":348,"column":306,"offset":19300},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add this just above your ","position":{"start":{"line":350,"column":1,"offset":19304},"end":{"line":350,"column":26,"offset":19329},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">taskList</code>","position":{"start":{"line":350,"column":26,"offset":19329},"end":{"line":350,"column":36,"offset":19339},"indent":[]}},{"type":"text","value":" constant declaration:","position":{"start":{"line":350,"column":36,"offset":19339},"end":{"line":350,"column":58,"offset":19361},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":19304},"end":{"line":350,"column":58,"offset":19361},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function toggleTaskCompleted(id) {\n  console.log(tasks[0])\n}</code></pre></div>","position":{"start":{"line":352,"column":1,"offset":19365},"end":{"line":356,"column":4,"offset":19437},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next, we'll add ","position":{"start":{"line":358,"column":1,"offset":19441},"end":{"line":358,"column":17,"offset":19457},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted</code>","position":{"start":{"line":358,"column":17,"offset":19457},"end":{"line":358,"column":38,"offset":19478},"indent":[]}},{"type":"text","value":" to the props of each ","position":{"start":{"line":358,"column":38,"offset":19478},"end":{"line":358,"column":60,"offset":19500},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Todo /></code>","position":{"start":{"line":358,"column":60,"offset":19500},"end":{"line":358,"column":70,"offset":19510},"indent":[]}},{"type":"text","value":" component rendered inside our ","position":{"start":{"line":358,"column":70,"offset":19510},"end":{"line":358,"column":101,"offset":19541},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">taskList</code>","position":{"start":{"line":358,"column":101,"offset":19541},"end":{"line":358,"column":111,"offset":19551},"indent":[]}},{"type":"text","value":"; update it like so:","position":{"start":{"line":358,"column":111,"offset":19551},"end":{"line":358,"column":131,"offset":19571},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":19441},"end":{"line":358,"column":131,"offset":19571},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const taskList = tasks.map(task => (\n  &lt;Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n  />\n));</code></pre></div>","position":{"start":{"line":360,"column":1,"offset":19575},"end":{"line":370,"column":4,"offset":19789},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next, go over to your ","position":{"start":{"line":372,"column":1,"offset":19793},"end":{"line":372,"column":23,"offset":19815},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Todo.js</code>","position":{"start":{"line":372,"column":23,"offset":19815},"end":{"line":372,"column":32,"offset":19824},"indent":[]}},{"type":"text","value":" component and add an ","position":{"start":{"line":372,"column":32,"offset":19824},"end":{"line":372,"column":54,"offset":19846},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">onChange</code>","position":{"start":{"line":372,"column":54,"offset":19846},"end":{"line":372,"column":64,"offset":19856},"indent":[]}},{"type":"text","value":" handler to your ","position":{"start":{"line":372,"column":64,"offset":19856},"end":{"line":372,"column":81,"offset":19873},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input /></code>","position":{"start":{"line":372,"column":81,"offset":19873},"end":{"line":372,"column":92,"offset":19884},"indent":[]}},{"type":"text","value":" element, which should use an anonymous function to call ","position":{"start":{"line":372,"column":92,"offset":19884},"end":{"line":372,"column":149,"offset":19941},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.toggleTaskCompleted()</code>","position":{"start":{"line":372,"column":149,"offset":19941},"end":{"line":372,"column":178,"offset":19970},"indent":[]}},{"type":"text","value":" with a parameter of ","position":{"start":{"line":372,"column":178,"offset":19970},"end":{"line":372,"column":199,"offset":19991},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.id</code>","position":{"start":{"line":372,"column":199,"offset":19991},"end":{"line":372,"column":209,"offset":20001},"indent":[]}},{"type":"text","value":". The ","position":{"start":{"line":372,"column":209,"offset":20001},"end":{"line":372,"column":215,"offset":20007},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input /></code>","position":{"start":{"line":372,"column":215,"offset":20007},"end":{"line":372,"column":226,"offset":20018},"indent":[]}},{"type":"text","value":" should now look like this:","position":{"start":{"line":372,"column":226,"offset":20018},"end":{"line":372,"column":253,"offset":20045},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":19793},"end":{"line":372,"column":253,"offset":20045},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input\n  id={props.id}\n  type=\"checkbox\"\n  defaultChecked={props.completed}\n  onChange={() => props.toggleTaskCompleted(props.id)}\n/></code></pre></div>","position":{"start":{"line":374,"column":1,"offset":20049},"end":{"line":381,"column":4,"offset":20197},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Save everything and return to your browser and notice that our first task, Eat, is checked. Open your JavaScript console, then click on the checkbox next to Eat. It unchecks, as we expect. Your JavaScript console, however, will log something like this:","position":{"start":{"line":383,"column":1,"offset":20201},"end":{"line":383,"column":253,"offset":20453},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":20201},"end":{"line":383,"column":253,"offset":20453},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Object { id: \"task-0\", name: \"Eat\", completed: true }</code></pre></div>","position":{"start":{"line":385,"column":1,"offset":20457},"end":{"line":387,"column":4,"offset":20520},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The checkbox unchecks in the browser, but our console tells us that Eat is still completed. We will fix that next!","position":{"start":{"line":389,"column":1,"offset":20524},"end":{"line":389,"column":115,"offset":20638},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":20524},"end":{"line":389,"column":115,"offset":20638},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Synchronizing the browser with our data","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#synchronizing_the_browser_with_our_data","children":[{"type":"text","value":"Synchronizing the browser with our data","position":{"start":{"line":391,"column":6,"offset":20647},"end":{"line":391,"column":45,"offset":20686},"indent":[]}}],"position":{"start":{"line":391,"column":5,"offset":20646},"end":{"line":391,"column":274,"offset":20915},"indent":[]}}],"position":{"start":{"line":391,"column":1,"offset":20642},"end":{"line":391,"column":274,"offset":20915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's revisit our ","position":{"start":{"line":393,"column":1,"offset":20919},"end":{"line":393,"column":19,"offset":20937},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted()</code>","position":{"start":{"line":393,"column":19,"offset":20937},"end":{"line":393,"column":42,"offset":20960},"indent":[]}},{"type":"text","value":" function in ","position":{"start":{"line":393,"column":42,"offset":20960},"end":{"line":393,"column":55,"offset":20973},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App.js</code>","position":{"start":{"line":393,"column":55,"offset":20973},"end":{"line":393,"column":63,"offset":20981},"indent":[]}},{"type":"text","value":". We want it to change the ","position":{"start":{"line":393,"column":63,"offset":20981},"end":{"line":393,"column":90,"offset":21008},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">completed</code>","position":{"start":{"line":393,"column":90,"offset":21008},"end":{"line":393,"column":101,"offset":21019},"indent":[]}},{"type":"text","value":" property of only the task that was toggled, and leave all the others alone. To do this, we'll ","position":{"start":{"line":393,"column":101,"offset":21019},"end":{"line":393,"column":196,"offset":21114},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">map()</code>","position":{"start":{"line":393,"column":196,"offset":21114},"end":{"line":393,"column":203,"offset":21121},"indent":[]}},{"type":"text","value":" over the task list and just change the one we completed.","position":{"start":{"line":393,"column":203,"offset":21121},"end":{"line":393,"column":260,"offset":21178},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":20919},"end":{"line":393,"column":260,"offset":21178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Update your ","position":{"start":{"line":395,"column":1,"offset":21182},"end":{"line":395,"column":13,"offset":21194},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted()</code>","position":{"start":{"line":395,"column":13,"offset":21194},"end":{"line":395,"column":36,"offset":21217},"indent":[]}},{"type":"text","value":" function to the following:","position":{"start":{"line":395,"column":36,"offset":21217},"end":{"line":395,"column":63,"offset":21244},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":21182},"end":{"line":395,"column":63,"offset":21244},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function toggleTaskCompleted(id) {\n  const updatedTasks = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n      return {...task, completed: !task.completed}\n    }\n    return task;\n  });\n  setTasks(updatedTasks);\n}</code></pre></div>","position":{"start":{"line":397,"column":1,"offset":21248},"end":{"line":410,"column":4,"offset":21633},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here, we define an ","position":{"start":{"line":412,"column":1,"offset":21637},"end":{"line":412,"column":20,"offset":21656},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">updatedTasks</code>","position":{"start":{"line":412,"column":20,"offset":21656},"end":{"line":412,"column":34,"offset":21670},"indent":[]}},{"type":"text","value":" constant that maps over the original ","position":{"start":{"line":412,"column":34,"offset":21670},"end":{"line":412,"column":72,"offset":21708},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tasks</code>","position":{"start":{"line":412,"column":72,"offset":21708},"end":{"line":412,"column":79,"offset":21715},"indent":[]}},{"type":"text","value":" array. If the task's ","position":{"start":{"line":412,"column":79,"offset":21715},"end":{"line":412,"column":101,"offset":21737},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":412,"column":101,"offset":21737},"end":{"line":412,"column":105,"offset":21741},"indent":[]}},{"type":"text","value":" property matches the ","position":{"start":{"line":412,"column":105,"offset":21741},"end":{"line":412,"column":127,"offset":21763},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":412,"column":127,"offset":21763},"end":{"line":412,"column":131,"offset":21767},"indent":[]}},{"type":"text","value":" provided to the function, we use ","position":{"start":{"line":412,"column":131,"offset":21767},"end":{"line":412,"column":165,"offset":21801},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","children":[{"type":"text","value":"object spread syntax","position":{"start":{"line":412,"column":166,"offset":21802},"end":{"line":412,"column":186,"offset":21822},"indent":[]}}],"position":{"start":{"line":412,"column":165,"offset":21801},"end":{"line":412,"column":278,"offset":21914},"indent":[]}},{"type":"text","value":" to create a new object, and toggle the ","position":{"start":{"line":412,"column":278,"offset":21914},"end":{"line":412,"column":318,"offset":21954},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">checked</code>","position":{"start":{"line":412,"column":318,"offset":21954},"end":{"line":412,"column":327,"offset":21963},"indent":[]}},{"type":"text","value":" property of that object before returning it. If it doesn't match, we return the original object.","position":{"start":{"line":412,"column":327,"offset":21963},"end":{"line":412,"column":424,"offset":22060},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":21637},"end":{"line":412,"column":424,"offset":22060},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then we call ","position":{"start":{"line":414,"column":1,"offset":22064},"end":{"line":414,"column":14,"offset":22077},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks()</code>","position":{"start":{"line":414,"column":14,"offset":22077},"end":{"line":414,"column":26,"offset":22089},"indent":[]}},{"type":"text","value":" with this new array in order to update our state.","position":{"start":{"line":414,"column":26,"offset":22089},"end":{"line":414,"column":76,"offset":22139},"indent":[]}}],"position":{"start":{"line":414,"column":1,"offset":22064},"end":{"line":414,"column":76,"offset":22139},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Deleting a task","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#deleting_a_task","children":[{"type":"text","value":"Deleting a task","position":{"start":{"line":416,"column":5,"offset":22147},"end":{"line":416,"column":20,"offset":22162},"indent":[]}}],"position":{"start":{"line":416,"column":4,"offset":22146},"end":{"line":416,"column":201,"offset":22343},"indent":[]}}],"position":{"start":{"line":416,"column":1,"offset":22143},"end":{"line":416,"column":201,"offset":22343},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Deleting a task will follow a similar pattern to toggling its completed state: We need to define a function for updating our state, then pass that function into ","position":{"start":{"line":418,"column":1,"offset":22347},"end":{"line":418,"column":162,"offset":22508},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Todo /></code>","position":{"start":{"line":418,"column":162,"offset":22508},"end":{"line":418,"column":172,"offset":22518},"indent":[]}},{"type":"text","value":" as a prop and call it when the right event happens.","position":{"start":{"line":418,"column":172,"offset":22518},"end":{"line":418,"column":224,"offset":22570},"indent":[]}}],"position":{"start":{"line":418,"column":1,"offset":22347},"end":{"line":418,"column":224,"offset":22570},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to The deleteTask callback prop","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#the_deletetask_callback_prop","children":[{"type":"text","value":"The ","position":{"start":{"line":420,"column":6,"offset":22579},"end":{"line":420,"column":10,"offset":22583},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask</code>","position":{"start":{"line":420,"column":10,"offset":22583},"end":{"line":420,"column":22,"offset":22595},"indent":[]}},{"type":"text","value":" callback prop","position":{"start":{"line":420,"column":22,"offset":22595},"end":{"line":420,"column":36,"offset":22609},"indent":[]}}],"position":{"start":{"line":420,"column":5,"offset":22578},"end":{"line":420,"column":243,"offset":22816},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":22574},"end":{"line":420,"column":243,"offset":22816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here we'll start by writing a ","position":{"start":{"line":422,"column":1,"offset":22820},"end":{"line":422,"column":31,"offset":22850},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":422,"column":31,"offset":22850},"end":{"line":422,"column":45,"offset":22864},"indent":[]}},{"type":"text","value":" function in your ","position":{"start":{"line":422,"column":45,"offset":22864},"end":{"line":422,"column":63,"offset":22882},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App</code>","position":{"start":{"line":422,"column":63,"offset":22882},"end":{"line":422,"column":68,"offset":22887},"indent":[]}},{"type":"text","value":" component. Like ","position":{"start":{"line":422,"column":68,"offset":22887},"end":{"line":422,"column":85,"offset":22904},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted()</code>","position":{"start":{"line":422,"column":85,"offset":22904},"end":{"line":422,"column":108,"offset":22927},"indent":[]}},{"type":"text","value":", this function will take an ","position":{"start":{"line":422,"column":108,"offset":22927},"end":{"line":422,"column":137,"offset":22956},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":422,"column":137,"offset":22956},"end":{"line":422,"column":141,"offset":22960},"indent":[]}},{"type":"text","value":" parameter, and we will log that ","position":{"start":{"line":422,"column":141,"offset":22960},"end":{"line":422,"column":174,"offset":22993},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":422,"column":174,"offset":22993},"end":{"line":422,"column":178,"offset":22997},"indent":[]}},{"type":"text","value":" to the console to start with. Add the following below ","position":{"start":{"line":422,"column":178,"offset":22997},"end":{"line":422,"column":233,"offset":23052},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">toggleTaskCompleted()</code>","position":{"start":{"line":422,"column":233,"offset":23052},"end":{"line":422,"column":256,"offset":23075},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":422,"column":256,"offset":23075},"end":{"line":422,"column":257,"offset":23076},"indent":[]}}],"position":{"start":{"line":422,"column":1,"offset":22820},"end":{"line":422,"column":257,"offset":23076},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function deleteTask(id) {\n  console.log(id)\n}</code></pre></div>","position":{"start":{"line":424,"column":1,"offset":23080},"end":{"line":428,"column":4,"offset":23137},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next, add another callback prop to our array of ","position":{"start":{"line":430,"column":1,"offset":23141},"end":{"line":430,"column":49,"offset":23189},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;Todo /></code>","position":{"start":{"line":430,"column":49,"offset":23189},"end":{"line":430,"column":59,"offset":23199},"indent":[]}},{"type":"text","value":" components:","position":{"start":{"line":430,"column":59,"offset":23199},"end":{"line":430,"column":71,"offset":23211},"indent":[]}}],"position":{"start":{"line":430,"column":1,"offset":23141},"end":{"line":430,"column":71,"offset":23211},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const taskList = tasks.map(task => (\n  &lt;Todo\n    id={task.id}\n    name={task.name}\n    completed={task.completed}\n    key={task.id}\n    toggleTaskCompleted={toggleTaskCompleted}\n    deleteTask={deleteTask}\n  />\n));</code></pre></div>","position":{"start":{"line":432,"column":1,"offset":23215},"end":{"line":443,"column":4,"offset":23448},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In ","position":{"start":{"line":445,"column":1,"offset":23452},"end":{"line":445,"column":4,"offset":23455},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Todo.js</code>","position":{"start":{"line":445,"column":4,"offset":23455},"end":{"line":445,"column":13,"offset":23464},"indent":[]}},{"type":"text","value":", we want to call ","position":{"start":{"line":445,"column":13,"offset":23464},"end":{"line":445,"column":31,"offset":23482},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">props.deleteTask()</code>","position":{"start":{"line":445,"column":31,"offset":23482},"end":{"line":445,"column":51,"offset":23502},"indent":[]}},{"type":"text","value":" when the \"Delete\" button is pressed. ","position":{"start":{"line":445,"column":51,"offset":23502},"end":{"line":445,"column":89,"offset":23540},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":445,"column":89,"offset":23540},"end":{"line":445,"column":103,"offset":23554},"indent":[]}},{"type":"text","value":" needs to know the ID of the task that called it, so it can delete the correct task from the state.","position":{"start":{"line":445,"column":103,"offset":23554},"end":{"line":445,"column":202,"offset":23653},"indent":[]}}],"position":{"start":{"line":445,"column":1,"offset":23452},"end":{"line":445,"column":202,"offset":23653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Update the \"Delete\" button inside Todo.js, like so:","position":{"start":{"line":447,"column":1,"offset":23657},"end":{"line":447,"column":52,"offset":23708},"indent":[]}}],"position":{"start":{"line":447,"column":1,"offset":23657},"end":{"line":447,"column":52,"offset":23708},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button\n  type=\"button\"\n  className=\"btn btn__danger\"\n  onClick={() => props.deleteTask(props.id)}\n>\n  Delete &lt;span className=\"visually-hidden\">{props.name}&lt;/span>\n&lt;/button></code></pre></div>","position":{"start":{"line":449,"column":1,"offset":23712},"end":{"line":457,"column":4,"offset":23901},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now when you click on any of the \"Delete\" buttons in the app, your browser console should log the ID of the related task.","position":{"start":{"line":459,"column":1,"offset":23905},"end":{"line":459,"column":122,"offset":24026},"indent":[]}}],"position":{"start":{"line":459,"column":1,"offset":23905},"end":{"line":459,"column":122,"offset":24026},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Permalink to Deleting tasks from state and UI","url":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#deleting_tasks_from_state_and_ui","children":[{"type":"text","value":"Deleting tasks from state and UI","position":{"start":{"line":461,"column":5,"offset":24034},"end":{"line":461,"column":37,"offset":24066},"indent":[]}}],"position":{"start":{"line":461,"column":4,"offset":24033},"end":{"line":461,"column":252,"offset":24281},"indent":[]}}],"position":{"start":{"line":461,"column":1,"offset":24030},"end":{"line":461,"column":252,"offset":24281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we know ","position":{"start":{"line":463,"column":1,"offset":24285},"end":{"line":463,"column":18,"offset":24302},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":463,"column":18,"offset":24302},"end":{"line":463,"column":32,"offset":24316},"indent":[]}},{"type":"text","value":" is invoked correctly, we can call our ","position":{"start":{"line":463,"column":32,"offset":24316},"end":{"line":463,"column":71,"offset":24355},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks()</code>","position":{"start":{"line":463,"column":71,"offset":24355},"end":{"line":463,"column":83,"offset":24367},"indent":[]}},{"type":"text","value":" hook in ","position":{"start":{"line":463,"column":83,"offset":24367},"end":{"line":463,"column":92,"offset":24376},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":463,"column":92,"offset":24376},"end":{"line":463,"column":106,"offset":24390},"indent":[]}},{"type":"text","value":" to actually delete that task from the app's state as well as visually in the app UI. Since ","position":{"start":{"line":463,"column":106,"offset":24390},"end":{"line":463,"column":198,"offset":24482},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setTasks()</code>","position":{"start":{"line":463,"column":198,"offset":24482},"end":{"line":463,"column":210,"offset":24494},"indent":[]}},{"type":"text","value":" expects an array as an argument, we should provide it with a new array that copies the existing tasks, ","position":{"start":{"line":463,"column":210,"offset":24494},"end":{"line":463,"column":314,"offset":24598},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"excluding","position":{"start":{"line":463,"column":315,"offset":24599},"end":{"line":463,"column":324,"offset":24608},"indent":[]}}],"position":{"start":{"line":463,"column":314,"offset":24598},"end":{"line":463,"column":325,"offset":24609},"indent":[]}},{"type":"text","value":" the task whose ID matches the one passed into ","position":{"start":{"line":463,"column":325,"offset":24609},"end":{"line":463,"column":372,"offset":24656},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":463,"column":372,"offset":24656},"end":{"line":463,"column":386,"offset":24670},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":463,"column":386,"offset":24670},"end":{"line":463,"column":387,"offset":24671},"indent":[]}}],"position":{"start":{"line":463,"column":1,"offset":24285},"end":{"line":463,"column":387,"offset":24671},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a perfect opportunity to use ","position":{"start":{"line":465,"column":1,"offset":24675},"end":{"line":465,"column":38,"offset":24712},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter","children":[{"type":"html","value":"<code class=\"language-text\">Array.prototype.filter()</code>","position":{"start":{"line":465,"column":39,"offset":24713},"end":{"line":465,"column":65,"offset":24739},"indent":[]}}],"position":{"start":{"line":465,"column":38,"offset":24712},"end":{"line":465,"column":161,"offset":24835},"indent":[]}},{"type":"text","value":". We can test each task, and exclude a task from the new array if its ","position":{"start":{"line":465,"column":161,"offset":24835},"end":{"line":465,"column":231,"offset":24905},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":465,"column":231,"offset":24905},"end":{"line":465,"column":235,"offset":24909},"indent":[]}},{"type":"text","value":" prop matches the ","position":{"start":{"line":465,"column":235,"offset":24909},"end":{"line":465,"column":253,"offset":24927},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":465,"column":253,"offset":24927},"end":{"line":465,"column":257,"offset":24931},"indent":[]}},{"type":"text","value":" parameter passed into ","position":{"start":{"line":465,"column":257,"offset":24931},"end":{"line":465,"column":280,"offset":24954},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":465,"column":280,"offset":24954},"end":{"line":465,"column":294,"offset":24968},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":465,"column":294,"offset":24968},"end":{"line":465,"column":295,"offset":24969},"indent":[]}}],"position":{"start":{"line":465,"column":1,"offset":24675},"end":{"line":465,"column":295,"offset":24969},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Update the ","position":{"start":{"line":467,"column":1,"offset":24973},"end":{"line":467,"column":12,"offset":24984},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deleteTask()</code>","position":{"start":{"line":467,"column":12,"offset":24984},"end":{"line":467,"column":26,"offset":24998},"indent":[]}},{"type":"text","value":" function inside your ","position":{"start":{"line":467,"column":26,"offset":24998},"end":{"line":467,"column":48,"offset":25020},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">App.js</code>","position":{"start":{"line":467,"column":48,"offset":25020},"end":{"line":467,"column":56,"offset":25028},"indent":[]}},{"type":"text","value":" file as follows:","position":{"start":{"line":467,"column":56,"offset":25028},"end":{"line":467,"column":73,"offset":25045},"indent":[]}}],"position":{"start":{"line":467,"column":1,"offset":24973},"end":{"line":467,"column":73,"offset":25045},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function deleteTask(id) {\n  const remainingTasks = tasks.filter(task => id !== task.id);\n  setTasks(remainingTasks);\n}</code></pre></div>","position":{"start":{"line":469,"column":1,"offset":25049},"end":{"line":474,"column":4,"offset":25180},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":475,"column":1,"offset":25182}}}}