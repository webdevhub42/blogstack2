{"expireTime":9007200911870449000,"key":"transformer-remark-markdown-ast-a14a91c56c6e87716d7fa3fa964bf97e-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"html","value":"<details>","position":{"start":{"line":6,"column":1,"offset":5},"end":{"line":6,"column":10,"offset":14},"indent":[]}},{"type":"html","value":"<summary> Description</summary>   ","position":{"start":{"line":8,"column":1,"offset":16},"end":{"line":8,"column":35,"offset":50},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Excerpt","position":{"start":{"line":10,"column":6,"offset":57},"end":{"line":10,"column":13,"offset":64},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":54},"end":{"line":10,"column":13,"offset":64},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.","position":{"start":{"line":11,"column":3,"offset":67},"end":{"line":11,"column":269,"offset":333},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":67},"end":{"line":11,"column":269,"offset":333},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":52},"end":{"line":11,"column":269,"offset":333},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":13,"column":1,"offset":335},"end":{"line":13,"column":4,"offset":338},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":14,"column":1,"offset":339},"end":{"line":14,"column":5,"offset":343},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API","children":[{"type":"text","value":"Fetch API","position":{"start":{"line":14,"column":6,"offset":344},"end":{"line":14,"column":15,"offset":353},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":343},"end":{"line":14,"column":76,"offset":414},"indent":[]}},{"type":"text","value":" provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global ","position":{"start":{"line":14,"column":76,"offset":414},"end":{"line":14,"column":226,"offset":564},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":14,"column":227,"offset":565},"end":{"line":14,"column":236,"offset":574},"indent":[]}}],"position":{"start":{"line":14,"column":226,"offset":564},"end":{"line":14,"column":293,"offset":631},"indent":[]}},{"type":"text","value":" method that provides an easy, logical way to fetch resources asynchronously across the network.","position":{"start":{"line":14,"column":293,"offset":631},"end":{"line":14,"column":389,"offset":727},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":339},"end":{"line":14,"column":389,"offset":727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This kind of functionality was previously achieved using ","position":{"start":{"line":16,"column":1,"offset":729},"end":{"line":16,"column":58,"offset":786},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest","children":[{"type":"html","value":"<code class=\"language-text\">XMLHttpRequest</code>","position":{"start":{"line":16,"column":59,"offset":787},"end":{"line":16,"column":75,"offset":803},"indent":[]}}],"position":{"start":{"line":16,"column":58,"offset":786},"end":{"line":16,"column":141,"offset":869},"indent":[]}},{"type":"text","value":". Fetch provides a better alternative that can be easily used by other technologies such as ","position":{"start":{"line":16,"column":141,"offset":869},"end":{"line":16,"column":233,"offset":961},"indent":[]}},{"type":"link","title":"Service Workers","url":"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API","children":[{"type":"html","value":"<code class=\"language-text\">Service Workers</code>","position":{"start":{"line":16,"column":234,"offset":962},"end":{"line":16,"column":251,"offset":979},"indent":[]}}],"position":{"start":{"line":16,"column":233,"offset":961},"end":{"line":16,"column":339,"offset":1067},"indent":[]}},{"type":"text","value":". Fetch also provides a single logical place to define other HTTP-related concepts such as ","position":{"start":{"line":16,"column":339,"offset":1067},"end":{"line":16,"column":430,"offset":1158},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS","children":[{"type":"text","value":"CORS","position":{"start":{"line":16,"column":431,"offset":1159},"end":{"line":16,"column":435,"offset":1163},"indent":[]}}],"position":{"start":{"line":16,"column":430,"offset":1158},"end":{"line":16,"column":492,"offset":1220},"indent":[]}},{"type":"text","value":" and extensions to HTTP.","position":{"start":{"line":16,"column":492,"offset":1220},"end":{"line":16,"column":516,"offset":1244},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":729},"end":{"line":16,"column":516,"offset":1244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":18,"column":1,"offset":1246},"end":{"line":18,"column":5,"offset":1250},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch</code>","position":{"start":{"line":18,"column":5,"offset":1250},"end":{"line":18,"column":12,"offset":1257},"indent":[]}},{"type":"text","value":" specification differs from ","position":{"start":{"line":18,"column":12,"offset":1257},"end":{"line":18,"column":40,"offset":1285},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">jQuery.ajax()</code>","position":{"start":{"line":18,"column":40,"offset":1285},"end":{"line":18,"column":55,"offset":1300},"indent":[]}},{"type":"text","value":" in the following significant ways:","position":{"start":{"line":18,"column":55,"offset":1300},"end":{"line":18,"column":90,"offset":1335},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1246},"end":{"line":18,"column":90,"offset":1335},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Promise returned from ","position":{"start":{"line":20,"column":5,"offset":1341},"end":{"line":20,"column":31,"offset":1367},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":20,"column":31,"offset":1367},"end":{"line":20,"column":40,"offset":1376},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":20,"column":40,"offset":1376},"end":{"line":20,"column":41,"offset":1377},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"won't reject on HTTP error status","position":{"start":{"line":20,"column":43,"offset":1379},"end":{"line":20,"column":76,"offset":1412},"indent":[]}}],"position":{"start":{"line":20,"column":41,"offset":1377},"end":{"line":20,"column":78,"offset":1414},"indent":[]}},{"type":"text","value":" even if the response is an HTTP 404 or 500. Instead, as soon as the server responds with headers, the Promise will resolve normally (with the ","position":{"start":{"line":20,"column":78,"offset":1414},"end":{"line":20,"column":221,"offset":1557},"indent":[]}},{"type":"link","title":"ok","url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/ok","children":[{"type":"html","value":"<code class=\"language-text\">ok</code>","position":{"start":{"line":20,"column":222,"offset":1558},"end":{"line":20,"column":226,"offset":1562},"indent":[]}}],"position":{"start":{"line":20,"column":221,"offset":1557},"end":{"line":20,"column":294,"offset":1630},"indent":[]}},{"type":"text","value":" property of the response set to false if the response isn't in the range 200 -299), and it will only reject on network failure or if anything prevented the request from completing.","position":{"start":{"line":20,"column":294,"offset":1630},"end":{"line":20,"column":475,"offset":1811},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":1341},"end":{"line":20,"column":475,"offset":1811},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1337},"end":{"line":20,"column":475,"offset":1811},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":21,"column":5,"offset":1816},"end":{"line":21,"column":14,"offset":1825},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":21,"column":14,"offset":1825},"end":{"line":21,"column":15,"offset":1826},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"won't send cross-origin cookies","position":{"start":{"line":21,"column":17,"offset":1828},"end":{"line":21,"column":48,"offset":1859},"indent":[]}}],"position":{"start":{"line":21,"column":15,"offset":1826},"end":{"line":21,"column":50,"offset":1861},"indent":[]}},{"type":"text","value":" unless you set the ","position":{"start":{"line":21,"column":50,"offset":1861},"end":{"line":21,"column":70,"offset":1881},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"credentials","position":{"start":{"line":21,"column":71,"offset":1882},"end":{"line":21,"column":82,"offset":1893},"indent":[]}}],"position":{"start":{"line":21,"column":70,"offset":1881},"end":{"line":21,"column":83,"offset":1894},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":21,"column":83,"offset":1894},"end":{"line":21,"column":84,"offset":1895},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters","children":[{"type":"text","value":"init option","position":{"start":{"line":21,"column":85,"offset":1896},"end":{"line":21,"column":96,"offset":1907},"indent":[]}}],"position":{"start":{"line":21,"column":84,"offset":1895},"end":{"line":21,"column":164,"offset":1975},"indent":[]}},{"type":"text","value":". (Since ","position":{"start":{"line":21,"column":164,"offset":1975},"end":{"line":21,"column":173,"offset":1984},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/whatwg/fetch/pull/585","children":[{"type":"text","value":"April 2018","position":{"start":{"line":21,"column":174,"offset":1985},"end":{"line":21,"column":184,"offset":1995},"indent":[]}}],"position":{"start":{"line":21,"column":173,"offset":1984},"end":{"line":21,"column":227,"offset":2038},"indent":[]}},{"type":"text","value":". The spec changed the default credentials policy to ","position":{"start":{"line":21,"column":227,"offset":2038},"end":{"line":21,"column":280,"offset":2091},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">same-origin</code>","position":{"start":{"line":21,"column":280,"offset":2091},"end":{"line":21,"column":293,"offset":2104},"indent":[]}},{"type":"text","value":". Firefox changed since 61.0b13.)","position":{"start":{"line":21,"column":293,"offset":2104},"end":{"line":21,"column":326,"offset":2137},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":1816},"end":{"line":21,"column":326,"offset":2137},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1812},"end":{"line":21,"column":326,"offset":2137},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1337},"end":{"line":21,"column":326,"offset":2137},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A basic fetch request is really simple to set up. Have a look at the following code:","position":{"start":{"line":23,"column":1,"offset":2139},"end":{"line":23,"column":85,"offset":2223},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2139},"end":{"line":23,"column":85,"offset":2223},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/movies.json'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":25,"column":1,"offset":2225},"end":{"line":30,"column":4,"offset":2350},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are fetching a JSON file across the network and printing it to the console. The simplest use of ","position":{"start":{"line":32,"column":1,"offset":2352},"end":{"line":32,"column":105,"offset":2456},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":32,"column":105,"offset":2456},"end":{"line":32,"column":114,"offset":2465},"indent":[]}},{"type":"text","value":" takes one argument — the path to the resource you want to fetch — and does not directly return the JSON response body but instead returns a promise that resolves with a ","position":{"start":{"line":32,"column":114,"offset":2465},"end":{"line":32,"column":284,"offset":2635},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"html","value":"<code class=\"language-text\">Response</code>","position":{"start":{"line":32,"column":285,"offset":2636},"end":{"line":32,"column":295,"offset":2646},"indent":[]}}],"position":{"start":{"line":32,"column":284,"offset":2635},"end":{"line":32,"column":355,"offset":2706},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":32,"column":355,"offset":2706},"end":{"line":32,"column":363,"offset":2714},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2352},"end":{"line":32,"column":363,"offset":2714},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":34,"column":1,"offset":2716},"end":{"line":34,"column":5,"offset":2720},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"html","value":"<code class=\"language-text\">Response</code>","position":{"start":{"line":34,"column":6,"offset":2721},"end":{"line":34,"column":16,"offset":2731},"indent":[]}}],"position":{"start":{"line":34,"column":5,"offset":2720},"end":{"line":34,"column":76,"offset":2791},"indent":[]}},{"type":"text","value":" object, in turn, does not directly contain the actual JSON response body but is instead a representation of the entire HTTP response. So, to extract the JSON body content from the ","position":{"start":{"line":34,"column":76,"offset":2791},"end":{"line":34,"column":257,"offset":2972},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"html","value":"<code class=\"language-text\">Response</code>","position":{"start":{"line":34,"column":258,"offset":2973},"end":{"line":34,"column":268,"offset":2983},"indent":[]}}],"position":{"start":{"line":34,"column":257,"offset":2972},"end":{"line":34,"column":328,"offset":3043},"indent":[]}},{"type":"text","value":" object, we use the ","position":{"start":{"line":34,"column":328,"offset":3043},"end":{"line":34,"column":348,"offset":3063},"indent":[]}},{"type":"link","title":"json()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/json","children":[{"type":"html","value":"<code class=\"language-text\">json()</code>","position":{"start":{"line":34,"column":349,"offset":3064},"end":{"line":34,"column":357,"offset":3072},"indent":[]}}],"position":{"start":{"line":34,"column":348,"offset":3063},"end":{"line":34,"column":431,"offset":3146},"indent":[]}},{"type":"text","value":" method, which returns a second promise that resolves with the result of parsing the response body text as JSON.","position":{"start":{"line":34,"column":431,"offset":3146},"end":{"line":34,"column":543,"offset":3258},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2716},"end":{"line":34,"column":543,"offset":3258},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":36,"column":3,"offset":3262},"end":{"line":36,"column":8,"offset":3267},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":3260},"end":{"line":36,"column":10,"offset":3269},"indent":[]}},{"type":"text","value":" See the ","position":{"start":{"line":36,"column":10,"offset":3269},"end":{"line":36,"column":19,"offset":3278},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#body","children":[{"type":"text","value":"Body","position":{"start":{"line":36,"column":20,"offset":3279},"end":{"line":36,"column":24,"offset":3283},"indent":[]}}],"position":{"start":{"line":36,"column":19,"offset":3278},"end":{"line":36,"column":102,"offset":3361},"indent":[]}},{"type":"text","value":" section for similar methods to extract other types of body content.","position":{"start":{"line":36,"column":102,"offset":3361},"end":{"line":36,"column":170,"offset":3429},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":3260},"end":{"line":36,"column":170,"offset":3429},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fetch requests are controlled by the ","position":{"start":{"line":38,"column":1,"offset":3431},"end":{"line":38,"column":38,"offset":3468},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect-src</code>","position":{"start":{"line":38,"column":38,"offset":3468},"end":{"line":38,"column":51,"offset":3481},"indent":[]}},{"type":"text","value":" directive of ","position":{"start":{"line":38,"column":51,"offset":3481},"end":{"line":38,"column":65,"offset":3495},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy","children":[{"type":"text","value":"Content Security Policy","position":{"start":{"line":38,"column":66,"offset":3496},"end":{"line":38,"column":89,"offset":3519},"indent":[]}}],"position":{"start":{"line":38,"column":65,"offset":3495},"end":{"line":38,"column":173,"offset":3603},"indent":[]}},{"type":"text","value":" rather than the directive of the resources it's retrieving.","position":{"start":{"line":38,"column":173,"offset":3603},"end":{"line":38,"column":233,"offset":3663},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3431},"end":{"line":38,"column":233,"offset":3663},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Supplying request options","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options","children":[{"type":"text","value":"Supplying request options","position":{"start":{"line":40,"column":6,"offset":3670},"end":{"line":40,"column":31,"offset":3695},"indent":[]}}],"position":{"start":{"line":40,"column":5,"offset":3669},"end":{"line":40,"column":171,"offset":3835},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3665},"end":{"line":40,"column":171,"offset":3835},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":42,"column":1,"offset":3837},"end":{"line":42,"column":5,"offset":3841},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":42,"column":5,"offset":3841},"end":{"line":42,"column":14,"offset":3850},"indent":[]}},{"type":"text","value":" method can optionally accept a second parameter, an ","position":{"start":{"line":42,"column":14,"offset":3850},"end":{"line":42,"column":67,"offset":3903},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">init</code>","position":{"start":{"line":42,"column":67,"offset":3903},"end":{"line":42,"column":73,"offset":3909},"indent":[]}},{"type":"text","value":" object that allows you to control a number of different settings:","position":{"start":{"line":42,"column":73,"offset":3909},"end":{"line":42,"column":139,"offset":3975},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":3837},"end":{"line":42,"column":139,"offset":3975},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"See ","position":{"start":{"line":44,"column":1,"offset":3977},"end":{"line":44,"column":5,"offset":3981},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":44,"column":6,"offset":3982},"end":{"line":44,"column":15,"offset":3991},"indent":[]}}],"position":{"start":{"line":44,"column":5,"offset":3981},"end":{"line":44,"column":72,"offset":4048},"indent":[]}},{"type":"text","value":" for the full options available, and more details.","position":{"start":{"line":44,"column":72,"offset":4048},"end":{"line":44,"column":122,"offset":4098},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":3977},"end":{"line":44,"column":122,"offset":4098},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\njs\n<span class=\"token comment\">// Example POST method implementation:</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">postData</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Default options are marked with *</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *GET, POST, PUT, DELETE, etc.</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no-cors, *cors, same-origin</span>\n    <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *default, no-cache, reload, force-cache, only-if-cached</span>\n    <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// include, *same-origin, omit</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n      <span class=\"token comment\">// 'Content-Type': 'application/x-www-form-urlencoded',</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'follow'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// manual, *follow, error</span>\n    <span class=\"token literal-property property\">referrerPolicy</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-referrer'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// body data type must match \"Content-Type\" header</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// parses JSON response into native JavaScript objects</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">postData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/answer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">answer</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON data parsed by `data.json()` call</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":4100},"end":{"line":72,"column":4,"offset":5202},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that ","position":{"start":{"line":74,"column":1,"offset":5204},"end":{"line":74,"column":11,"offset":5214},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mode: \"no-cors\"</code>","position":{"start":{"line":74,"column":11,"offset":5214},"end":{"line":74,"column":28,"offset":5231},"indent":[]}},{"type":"text","value":" only allows a limited set of headers in the request:","position":{"start":{"line":74,"column":28,"offset":5231},"end":{"line":74,"column":81,"offset":5284},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":5204},"end":{"line":74,"column":81,"offset":5284},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Accept</code>","position":{"start":{"line":76,"column":5,"offset":5290},"end":{"line":76,"column":13,"offset":5298},"indent":[]}}],"position":{"start":{"line":76,"column":5,"offset":5290},"end":{"line":76,"column":13,"offset":5298},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":5286},"end":{"line":76,"column":13,"offset":5298},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Accept-Language</code>","position":{"start":{"line":77,"column":5,"offset":5303},"end":{"line":77,"column":22,"offset":5320},"indent":[]}}],"position":{"start":{"line":77,"column":5,"offset":5303},"end":{"line":77,"column":22,"offset":5320},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":5299},"end":{"line":77,"column":22,"offset":5320},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Content-Language</code>","position":{"start":{"line":78,"column":5,"offset":5325},"end":{"line":78,"column":23,"offset":5343},"indent":[]}}],"position":{"start":{"line":78,"column":5,"offset":5325},"end":{"line":78,"column":23,"offset":5343},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":5321},"end":{"line":78,"column":23,"offset":5343},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Content-Type</code>","position":{"start":{"line":79,"column":5,"offset":5348},"end":{"line":79,"column":19,"offset":5362},"indent":[]}},{"type":"text","value":" with a value of ","position":{"start":{"line":79,"column":19,"offset":5362},"end":{"line":79,"column":36,"offset":5379},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">application/x-www-form-urlencoded</code>","position":{"start":{"line":79,"column":36,"offset":5379},"end":{"line":79,"column":71,"offset":5414},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":79,"column":71,"offset":5414},"end":{"line":79,"column":73,"offset":5416},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">multipart/form-data</code>","position":{"start":{"line":79,"column":73,"offset":5416},"end":{"line":79,"column":94,"offset":5437},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":79,"column":94,"offset":5437},"end":{"line":79,"column":99,"offset":5442},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">text/plain</code>","position":{"start":{"line":79,"column":99,"offset":5442},"end":{"line":79,"column":111,"offset":5454},"indent":[]}}],"position":{"start":{"line":79,"column":5,"offset":5348},"end":{"line":79,"column":111,"offset":5454},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":5344},"end":{"line":79,"column":111,"offset":5454},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":5286},"end":{"line":79,"column":111,"offset":5454},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Sending a request with credentials included","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#sending_a_request_with_credentials_included","children":[{"type":"text","value":"Sending a request with credentials included","position":{"start":{"line":81,"column":6,"offset":5461},"end":{"line":81,"column":49,"offset":5504},"indent":[]}}],"position":{"start":{"line":81,"column":5,"offset":5460},"end":{"line":81,"column":225,"offset":5680},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":5456},"end":{"line":81,"column":225,"offset":5680},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To cause browsers to send a request with credentials included on both same-origin and cross-origin calls, add ","position":{"start":{"line":83,"column":1,"offset":5682},"end":{"line":83,"column":111,"offset":5792},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">credentials: 'include'</code>","position":{"start":{"line":83,"column":111,"offset":5792},"end":{"line":83,"column":135,"offset":5816},"indent":[]}},{"type":"text","value":" to the ","position":{"start":{"line":83,"column":135,"offset":5816},"end":{"line":83,"column":143,"offset":5824},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">init</code>","position":{"start":{"line":83,"column":143,"offset":5824},"end":{"line":83,"column":149,"offset":5830},"indent":[]}},{"type":"text","value":" object you pass to the ","position":{"start":{"line":83,"column":149,"offset":5830},"end":{"line":83,"column":173,"offset":5854},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":83,"column":173,"offset":5854},"end":{"line":83,"column":182,"offset":5863},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":83,"column":182,"offset":5863},"end":{"line":83,"column":190,"offset":5871},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":5682},"end":{"line":83,"column":190,"offset":5871},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'include'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":85,"column":1,"offset":5873},"end":{"line":91,"column":4,"offset":5946},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":93,"column":3,"offset":5950},"end":{"line":93,"column":8,"offset":5955},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5948},"end":{"line":93,"column":10,"offset":5957},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":93,"column":10,"offset":5957},"end":{"line":93,"column":11,"offset":5958},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Access-Control-Allow-Origin</code>","position":{"start":{"line":93,"column":11,"offset":5958},"end":{"line":93,"column":40,"offset":5987},"indent":[]}},{"type":"text","value":" is prohibited from using a wildcard for requests with ","position":{"start":{"line":93,"column":40,"offset":5987},"end":{"line":93,"column":95,"offset":6042},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">credentials: 'include'</code>","position":{"start":{"line":93,"column":95,"offset":6042},"end":{"line":93,"column":119,"offset":6066},"indent":[]}},{"type":"text","value":". In such cases, the exact origin must be provided; even if you are using a CORS unblocker extension, the requests will still fail.","position":{"start":{"line":93,"column":119,"offset":6066},"end":{"line":93,"column":250,"offset":6197},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5948},"end":{"line":93,"column":250,"offset":6197},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":95,"column":3,"offset":6201},"end":{"line":95,"column":8,"offset":6206},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":6199},"end":{"line":95,"column":10,"offset":6208},"indent":[]}},{"type":"text","value":" Browsers should not send credentials in ","position":{"start":{"line":95,"column":10,"offset":6208},"end":{"line":95,"column":51,"offset":6249},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"preflight requests","position":{"start":{"line":95,"column":52,"offset":6250},"end":{"line":95,"column":70,"offset":6268},"indent":[]}}],"position":{"start":{"line":95,"column":51,"offset":6249},"end":{"line":95,"column":71,"offset":6269},"indent":[]}},{"type":"text","value":" irrespective of this setting. For more information see: ","position":{"start":{"line":95,"column":71,"offset":6269},"end":{"line":95,"column":128,"offset":6326},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#requests_with_credentials","children":[{"type":"text","value":"CORS > Requests with credentials","position":{"start":{"line":95,"column":129,"offset":6327},"end":{"line":95,"column":161,"offset":6359},"indent":[]}}],"position":{"start":{"line":95,"column":128,"offset":6326},"end":{"line":95,"column":244,"offset":6442},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":95,"column":244,"offset":6442},"end":{"line":95,"column":245,"offset":6443},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":6199},"end":{"line":95,"column":245,"offset":6443},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you only want to send credentials if the request URL is on the same origin as the calling script, add ","position":{"start":{"line":97,"column":1,"offset":6445},"end":{"line":97,"column":106,"offset":6550},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">credentials: 'same-origin'</code>","position":{"start":{"line":97,"column":106,"offset":6550},"end":{"line":97,"column":134,"offset":6578},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":97,"column":134,"offset":6578},"end":{"line":97,"column":135,"offset":6579},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":6445},"end":{"line":97,"column":135,"offset":6579},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token comment\">// The calling script is on the origin 'https://example.com'</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":99,"column":1,"offset":6581},"end":{"line":107,"column":4,"offset":6720},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To instead ensure browsers don't include credentials in the request, use ","position":{"start":{"line":109,"column":1,"offset":6722},"end":{"line":109,"column":74,"offset":6795},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">credentials: 'omit'</code>","position":{"start":{"line":109,"column":74,"offset":6795},"end":{"line":109,"column":95,"offset":6816},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":109,"column":95,"offset":6816},"end":{"line":109,"column":96,"offset":6817},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6722},"end":{"line":109,"column":96,"offset":6817},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'omit'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":111,"column":1,"offset":6819},"end":{"line":117,"column":4,"offset":6888},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading JSON data","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_json_data","children":[{"type":"text","value":"Uploading JSON data","position":{"start":{"line":119,"column":6,"offset":6895},"end":{"line":119,"column":25,"offset":6914},"indent":[]}}],"position":{"start":{"line":119,"column":5,"offset":6894},"end":{"line":119,"column":153,"offset":7042},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":6890},"end":{"line":119,"column":153,"offset":7042},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":121,"column":1,"offset":7044},"end":{"line":121,"column":5,"offset":7048},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":121,"column":6,"offset":7049},"end":{"line":121,"column":15,"offset":7058},"indent":[]}}],"position":{"start":{"line":121,"column":5,"offset":7048},"end":{"line":121,"column":72,"offset":7115},"indent":[]}},{"type":"text","value":" to POST JSON-encoded data.","position":{"start":{"line":121,"column":72,"offset":7115},"end":{"line":121,"column":99,"offset":7142},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":7044},"end":{"line":121,"column":99,"offset":7142},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'example'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'PUT'</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":123,"column":1,"offset":7144},"end":{"line":142,"column":4,"offset":7501},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading a file","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_a_file","children":[{"type":"text","value":"Uploading a file","position":{"start":{"line":144,"column":6,"offset":7508},"end":{"line":144,"column":22,"offset":7524},"indent":[]}}],"position":{"start":{"line":144,"column":5,"offset":7507},"end":{"line":144,"column":144,"offset":7646},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":7503},"end":{"line":144,"column":144,"offset":7646},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Files can be uploaded using an HTML ","position":{"start":{"line":146,"column":1,"offset":7648},"end":{"line":146,"column":37,"offset":7684},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input type=\"file\" /></code>","position":{"start":{"line":146,"column":37,"offset":7684},"end":{"line":146,"column":60,"offset":7707},"indent":[]}},{"type":"text","value":" input element, ","position":{"start":{"line":146,"column":60,"offset":7707},"end":{"line":146,"column":76,"offset":7723},"indent":[]}},{"type":"link","title":"FormData()","url":"https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData","children":[{"type":"html","value":"<code class=\"language-text\">FormData()</code>","position":{"start":{"line":146,"column":77,"offset":7724},"end":{"line":146,"column":89,"offset":7736},"indent":[]}}],"position":{"start":{"line":146,"column":76,"offset":7723},"end":{"line":146,"column":171,"offset":7818},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":146,"column":171,"offset":7818},"end":{"line":146,"column":176,"offset":7823},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":146,"column":177,"offset":7824},"end":{"line":146,"column":186,"offset":7833},"indent":[]}}],"position":{"start":{"line":146,"column":176,"offset":7823},"end":{"line":146,"column":243,"offset":7890},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":146,"column":243,"offset":7890},"end":{"line":146,"column":244,"offset":7891},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":7648},"end":{"line":146,"column":244,"offset":7891},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fileField <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">,</span> fileField<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/profile/avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> formData\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":148,"column":1,"offset":7893},"end":{"line":168,"column":4,"offset":8321},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading multiple files","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_multiple_files","children":[{"type":"text","value":"Uploading multiple files","position":{"start":{"line":170,"column":6,"offset":8328},"end":{"line":170,"column":30,"offset":8352},"indent":[]}}],"position":{"start":{"line":170,"column":5,"offset":8327},"end":{"line":170,"column":168,"offset":8490},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":8323},"end":{"line":170,"column":168,"offset":8490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Files can be uploaded using an HTML ","position":{"start":{"line":172,"column":1,"offset":8492},"end":{"line":172,"column":37,"offset":8528},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;input type=\"file\" multiple /></code>","position":{"start":{"line":172,"column":37,"offset":8528},"end":{"line":172,"column":69,"offset":8560},"indent":[]}},{"type":"text","value":" input element, ","position":{"start":{"line":172,"column":69,"offset":8560},"end":{"line":172,"column":85,"offset":8576},"indent":[]}},{"type":"link","title":"FormData()","url":"https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData","children":[{"type":"html","value":"<code class=\"language-text\">FormData()</code>","position":{"start":{"line":172,"column":86,"offset":8577},"end":{"line":172,"column":98,"offset":8589},"indent":[]}}],"position":{"start":{"line":172,"column":85,"offset":8576},"end":{"line":172,"column":180,"offset":8671},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":172,"column":180,"offset":8671},"end":{"line":172,"column":185,"offset":8676},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":172,"column":186,"offset":8677},"end":{"line":172,"column":195,"offset":8686},"indent":[]}}],"position":{"start":{"line":172,"column":185,"offset":8676},"end":{"line":172,"column":252,"offset":8743},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":172,"column":252,"offset":8743},"end":{"line":172,"column":253,"offset":8744},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":8492},"end":{"line":172,"column":253,"offset":8744},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> photos <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"][multiple]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'My Vegas Vacation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> photos<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">photos_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> photos<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":174,"column":1,"offset":8746},"end":{"line":196,"column":4,"offset":9236},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Processing a text file line by line","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#processing_a_text_file_line_by_line","children":[{"type":"text","value":"Processing a text file line by line","position":{"start":{"line":198,"column":6,"offset":9243},"end":{"line":198,"column":41,"offset":9278},"indent":[]}}],"position":{"start":{"line":198,"column":5,"offset":9242},"end":{"line":198,"column":201,"offset":9438},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":9238},"end":{"line":198,"column":201,"offset":9438},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The chunks that are read from a response are not broken neatly at line boundaries and are Uint8Arrays, not strings. If you want to fetch a text file and process it line by line, it is up to you to handle these complications. The following example shows one way to do this by creating a line iterator (for simplicity, it assumes the text is UTF-8, and doesn't handle fetch errors).","position":{"start":{"line":200,"column":1,"offset":9440},"end":{"line":200,"column":381,"offset":9820},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":9440},"end":{"line":200,"column":381,"offset":9820},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">makeTextFileLineIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileURL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>fileURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> readerDone <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chunk <span class=\"token operator\">=</span> chunk <span class=\"token operator\">?</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\n|\\r|\\r\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gm</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readerDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> remainder <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> readerDone <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      chunk <span class=\"token operator\">=</span> remainder <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">?</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      startIndex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">yield</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startIndex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">&lt;</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// last line didn't end in a newline char</span>\n    <span class=\"token keyword\">yield</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> line <span class=\"token keyword\">of</span> <span class=\"token function\">makeTextFileLineIterator</span><span class=\"token punctuation\">(</span>urlOfFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">processLine</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":202,"column":1,"offset":9822},"end":{"line":244,"column":4,"offset":10890},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Checking that the fetch was successful","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#checking_that_the_fetch_was_successful","children":[{"type":"text","value":"Checking that the fetch was successful","position":{"start":{"line":246,"column":6,"offset":10897},"end":{"line":246,"column":44,"offset":10935},"indent":[]}}],"position":{"start":{"line":246,"column":5,"offset":10896},"end":{"line":246,"column":210,"offset":11101},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":10892},"end":{"line":246,"column":210,"offset":11101},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":248,"column":1,"offset":11103},"end":{"line":248,"column":3,"offset":11105},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":248,"column":4,"offset":11106},"end":{"line":248,"column":13,"offset":11115},"indent":[]}}],"position":{"start":{"line":248,"column":3,"offset":11105},"end":{"line":248,"column":70,"offset":11172},"indent":[]}},{"type":"text","value":" promise will reject with a ","position":{"start":{"line":248,"column":70,"offset":11172},"end":{"line":248,"column":98,"offset":11200},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError","children":[{"type":"html","value":"<code class=\"language-text\">TypeError</code>","position":{"start":{"line":248,"column":99,"offset":11201},"end":{"line":248,"column":110,"offset":11212},"indent":[]}}],"position":{"start":{"line":248,"column":98,"offset":11200},"end":{"line":248,"column":203,"offset":11305},"indent":[]}},{"type":"text","value":" when a network error is encountered or CORS is misconfigured on the server-side, although this usually means permission issues or similar — a 404 does not constitute a network error, for example. An accurate check for a successful ","position":{"start":{"line":248,"column":203,"offset":11305},"end":{"line":248,"column":435,"offset":11537},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":248,"column":435,"offset":11537},"end":{"line":248,"column":444,"offset":11546},"indent":[]}},{"type":"text","value":" would include checking that the promise resolved, then checking that the ","position":{"start":{"line":248,"column":444,"offset":11546},"end":{"line":248,"column":518,"offset":11620},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/ok","children":[{"type":"html","value":"<code class=\"language-text\">Response.ok</code>","position":{"start":{"line":248,"column":519,"offset":11621},"end":{"line":248,"column":532,"offset":11634},"indent":[]}}],"position":{"start":{"line":248,"column":518,"offset":11620},"end":{"line":248,"column":595,"offset":11697},"indent":[]}},{"type":"text","value":" property has a value of true. The code would look something like this:","position":{"start":{"line":248,"column":595,"offset":11697},"end":{"line":248,"column":666,"offset":11768},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":11103},"end":{"line":248,"column":666,"offset":11768},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fetch('flowers.jpg')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not OK');\n    }\n    return response.blob();\n  })\n  .then(myBlob => {\n    myImage.src = URL.createObjectURL(myBlob);\n  })\n  .catch(error => {\n    console.error('There has been a problem with your fetch operation:', error);\n  });</code></pre></div>","position":{"start":{"line":250,"column":1,"offset":11770},"end":{"line":264,"column":4,"offset":12116},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Supplying your own request object","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_your_own_request_object","children":[{"type":"text","value":"Supplying your own request object","position":{"start":{"line":266,"column":6,"offset":12123},"end":{"line":266,"column":39,"offset":12156},"indent":[]}}],"position":{"start":{"line":266,"column":5,"offset":12122},"end":{"line":266,"column":195,"offset":12312},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":12118},"end":{"line":266,"column":195,"offset":12312},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of passing a path to the resource you want to request into the ","position":{"start":{"line":268,"column":1,"offset":12314},"end":{"line":268,"column":72,"offset":12385},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":268,"column":72,"offset":12385},"end":{"line":268,"column":81,"offset":12394},"indent":[]}},{"type":"text","value":" call, you can create a request object using the ","position":{"start":{"line":268,"column":81,"offset":12394},"end":{"line":268,"column":130,"offset":12443},"indent":[]}},{"type":"link","title":"Request()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Request/Request","children":[{"type":"html","value":"<code class=\"language-text\">Request()</code>","position":{"start":{"line":268,"column":131,"offset":12444},"end":{"line":268,"column":142,"offset":12455},"indent":[]}}],"position":{"start":{"line":268,"column":130,"offset":12443},"end":{"line":268,"column":221,"offset":12534},"indent":[]}},{"type":"text","value":" constructor, and pass that in as a ","position":{"start":{"line":268,"column":221,"offset":12534},"end":{"line":268,"column":257,"offset":12570},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":268,"column":257,"offset":12570},"end":{"line":268,"column":266,"offset":12579},"indent":[]}},{"type":"text","value":" method argument:","position":{"start":{"line":268,"column":266,"offset":12579},"end":{"line":268,"column":283,"offset":12596},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":12314},"end":{"line":268,"column":283,"offset":12596},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const myHeaders = new Headers();\n\nconst myRequest = new Request('flowers.jpg', {\n  method: 'GET',\n  headers: myHeaders,\n  mode: 'cors',\n  cache: 'default',\n});\n\nfetch(myRequest)\n  .then(response => response.blob())\n  .then(myBlob => {\n    myImage.src = URL.createObjectURL(myBlob);\n  });</code></pre></div>","position":{"start":{"line":270,"column":1,"offset":12598},"end":{"line":285,"column":4,"offset":12893},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Request()</code>","position":{"start":{"line":287,"column":1,"offset":12895},"end":{"line":287,"column":12,"offset":12906},"indent":[]}},{"type":"text","value":" accepts exactly the same parameters as the ","position":{"start":{"line":287,"column":12,"offset":12906},"end":{"line":287,"column":56,"offset":12950},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fetch()</code>","position":{"start":{"line":287,"column":56,"offset":12950},"end":{"line":287,"column":65,"offset":12959},"indent":[]}},{"type":"text","value":" method. You can even pass in an existing request object to create a copy of it:","position":{"start":{"line":287,"column":65,"offset":12959},"end":{"line":287,"column":145,"offset":13039},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":12895},"end":{"line":287,"column":145,"offset":13039},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const anotherRequest = new Request(myRequest, myInit);</code></pre></div>","position":{"start":{"line":289,"column":1,"offset":13041},"end":{"line":291,"column":4,"offset":13103},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is pretty useful, as request and response bodies are one use only. Making a copy like this allows you to make use of the request/response again while varying the ","position":{"start":{"line":293,"column":1,"offset":13105},"end":{"line":293,"column":168,"offset":13272},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">init</code>","position":{"start":{"line":293,"column":168,"offset":13272},"end":{"line":293,"column":174,"offset":13278},"indent":[]}},{"type":"text","value":" options if desired. The copy must be made before the body is read, and reading the body in the copy will also mark it as read in the original request.","position":{"start":{"line":293,"column":174,"offset":13278},"end":{"line":293,"column":325,"offset":13429},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":13105},"end":{"line":293,"column":325,"offset":13429},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":295,"column":3,"offset":13433},"end":{"line":295,"column":8,"offset":13438},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":13431},"end":{"line":295,"column":10,"offset":13440},"indent":[]}},{"type":"text","value":" There is also a ","position":{"start":{"line":295,"column":10,"offset":13440},"end":{"line":295,"column":27,"offset":13457},"indent":[]}},{"type":"link","title":"clone()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Request/clone","children":[{"type":"html","value":"<code class=\"language-text\">clone()</code>","position":{"start":{"line":295,"column":28,"offset":13458},"end":{"line":295,"column":37,"offset":13467},"indent":[]}}],"position":{"start":{"line":295,"column":27,"offset":13457},"end":{"line":295,"column":112,"offset":13542},"indent":[]}},{"type":"text","value":" method that creates a copy. Both methods of creating a copy will fail if the body of the original request or response has already been read, but reading the body of a cloned response or request will not cause it to be marked as read in the original.","position":{"start":{"line":295,"column":112,"offset":13542},"end":{"line":295,"column":362,"offset":13792},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":13431},"end":{"line":295,"column":362,"offset":13792},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":297,"column":1,"offset":13794},"end":{"line":297,"column":5,"offset":13798},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Headers","children":[{"type":"html","value":"<code class=\"language-text\">Headers</code>","position":{"start":{"line":297,"column":6,"offset":13799},"end":{"line":297,"column":15,"offset":13808},"indent":[]}}],"position":{"start":{"line":297,"column":5,"offset":13798},"end":{"line":297,"column":74,"offset":13867},"indent":[]}},{"type":"text","value":" interface allows you to create your own headers object via the ","position":{"start":{"line":297,"column":74,"offset":13867},"end":{"line":297,"column":138,"offset":13931},"indent":[]}},{"type":"link","title":"Headers()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers","children":[{"type":"html","value":"<code class=\"language-text\">Headers()</code>","position":{"start":{"line":297,"column":139,"offset":13932},"end":{"line":297,"column":150,"offset":13943},"indent":[]}}],"position":{"start":{"line":297,"column":138,"offset":13931},"end":{"line":297,"column":229,"offset":14022},"indent":[]}},{"type":"text","value":" constructor. A headers object is a simple multi-map of names to values:","position":{"start":{"line":297,"column":229,"offset":14022},"end":{"line":297,"column":301,"offset":14094},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":13794},"end":{"line":297,"column":301,"offset":14094},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const content = 'Hello World';\nconst myHeaders = new Headers();\nmyHeaders.append('Content-Type', 'text/plain');\nmyHeaders.append('Content-Length', content.length.toString());\nmyHeaders.append('X-Custom-Header', 'ProcessThisImmediately');</code></pre></div>","position":{"start":{"line":299,"column":1,"offset":14096},"end":{"line":305,"column":4,"offset":14341},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The same can be achieved by passing an array of arrays or an object literal to the constructor:","position":{"start":{"line":307,"column":1,"offset":14343},"end":{"line":307,"column":96,"offset":14438},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":14343},"end":{"line":307,"column":96,"offset":14438},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const myHeaders = new Headers({\n  'Content-Type': 'text/plain',\n  'Content-Length': content.length.toString(),\n  'X-Custom-Header': 'ProcessThisImmediately'\n});</code></pre></div>","position":{"start":{"line":309,"column":1,"offset":14440},"end":{"line":315,"column":4,"offset":14608},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The contents can be queried and retrieved:","position":{"start":{"line":317,"column":1,"offset":14610},"end":{"line":317,"column":43,"offset":14652},"indent":[]}}],"position":{"start":{"line":317,"column":1,"offset":14610},"end":{"line":317,"column":43,"offset":14652},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(myHeaders.has('Content-Type')); // true\nconsole.log(myHeaders.has('Set-Cookie')); // false\nmyHeaders.set('Content-Type', 'text/html');\nmyHeaders.append('X-Custom-Header', 'AnotherValue');\n\nconsole.log(myHeaders.get('Content-Length')); // 11\nconsole.log(myHeaders.get('X-Custom-Header')); // ['ProcessThisImmediately', 'AnotherValue']\n\nmyHeaders.delete('X-Custom-Header');\nconsole.log(myHeaders.get('X-Custom-Header')); // null</code></pre></div>","position":{"start":{"line":319,"column":1,"offset":14654},"end":{"line":330,"column":4,"offset":15100},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some of these operations are only useful in ","position":{"start":{"line":332,"column":1,"offset":15102},"end":{"line":332,"column":45,"offset":15146},"indent":[]}},{"type":"link","title":"ServiceWorkers","url":"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API","children":[{"type":"html","value":"<code class=\"language-text\">ServiceWorkers</code>","position":{"start":{"line":332,"column":46,"offset":15147},"end":{"line":332,"column":62,"offset":15163},"indent":[]}}],"position":{"start":{"line":332,"column":45,"offset":15146},"end":{"line":332,"column":149,"offset":15250},"indent":[]}},{"type":"text","value":", but they provide a much nicer API for manipulating headers.","position":{"start":{"line":332,"column":149,"offset":15250},"end":{"line":332,"column":210,"offset":15311},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":15102},"end":{"line":332,"column":210,"offset":15311},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All of the Headers methods throw a ","position":{"start":{"line":334,"column":1,"offset":15313},"end":{"line":334,"column":36,"offset":15348},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TypeError</code>","position":{"start":{"line":334,"column":36,"offset":15348},"end":{"line":334,"column":47,"offset":15359},"indent":[]}},{"type":"text","value":" if a header name is used that is not a valid HTTP Header name. The mutation operations will throw a ","position":{"start":{"line":334,"column":47,"offset":15359},"end":{"line":334,"column":148,"offset":15460},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TypeError</code>","position":{"start":{"line":334,"column":148,"offset":15460},"end":{"line":334,"column":159,"offset":15471},"indent":[]}},{"type":"text","value":" if there is an immutable guard (","position":{"start":{"line":334,"column":159,"offset":15471},"end":{"line":334,"column":192,"offset":15504},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#guard","children":[{"type":"text","value":"see below","position":{"start":{"line":334,"column":193,"offset":15505},"end":{"line":334,"column":202,"offset":15514},"indent":[]}}],"position":{"start":{"line":334,"column":192,"offset":15504},"end":{"line":334,"column":281,"offset":15593},"indent":[]}},{"type":"text","value":"). Otherwise, they fail silently. For example:","position":{"start":{"line":334,"column":281,"offset":15593},"end":{"line":334,"column":327,"offset":15639},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":15313},"end":{"line":334,"column":327,"offset":15639},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const myResponse = Response.error();\ntry {\n  myResponse.headers.set('Origin', 'http://mybank.com');\n} catch (e) {\n  console.log('Cannot pretend to be a bank!');\n}</code></pre></div>","position":{"start":{"line":336,"column":1,"offset":15641},"end":{"line":343,"column":4,"offset":15811},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A good use case for headers is checking whether the content type is correct before you process it further. For example:","position":{"start":{"line":345,"column":1,"offset":15813},"end":{"line":345,"column":120,"offset":15932},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":15813},"end":{"line":345,"column":120,"offset":15932},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fetch(myRequest)\n  .then(response => {\n     const contentType = response.headers.get('content-type');\n     if (!contentType || !contentType.includes('application/json')) {\n       throw new TypeError(\"Oops, we haven't got JSON!\");\n     }\n     return response.json();\n  })\n  .then(data => {\n      /* process your data further */\n  })\n  .catch(error => console.error(error));</code></pre></div>","position":{"start":{"line":347,"column":1,"offset":15934},"end":{"line":360,"column":4,"offset":16314},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Guard","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#guard","children":[{"type":"text","value":"Guard","position":{"start":{"line":362,"column":6,"offset":16321},"end":{"line":362,"column":11,"offset":16326},"indent":[]}}],"position":{"start":{"line":362,"column":5,"offset":16320},"end":{"line":362,"column":111,"offset":16426},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":16316},"end":{"line":362,"column":111,"offset":16426},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since headers can be sent in requests and received in responses, and have various limitations about what information can and should be mutable, headers' objects have a ","position":{"start":{"line":364,"column":1,"offset":16428},"end":{"line":364,"column":169,"offset":16596},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"guard","position":{"start":{"line":364,"column":170,"offset":16597},"end":{"line":364,"column":175,"offset":16602},"indent":[]}}],"position":{"start":{"line":364,"column":169,"offset":16596},"end":{"line":364,"column":176,"offset":16603},"indent":[]}},{"type":"text","value":" property. This is not exposed to the Web, but it affects which mutation operations are allowed on the headers object.","position":{"start":{"line":364,"column":176,"offset":16603},"end":{"line":364,"column":294,"offset":16721},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":16428},"end":{"line":364,"column":294,"offset":16721},"indent":[]}},{"type":"html","value":"</details>","position":{"start":{"line":368,"column":1,"offset":16725},"end":{"line":368,"column":11,"offset":16735},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Fetch","position":{"start":{"line":370,"column":3,"offset":16739},"end":{"line":370,"column":8,"offset":16744},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":16737},"end":{"line":370,"column":8,"offset":16744},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":372,"column":1,"offset":16746},"end":{"line":375,"column":4,"offset":16876},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Response","position":{"start":{"line":377,"column":5,"offset":16882},"end":{"line":377,"column":13,"offset":16890},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":16878},"end":{"line":377,"column":13,"offset":16890},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// response body (=> Promise)  res.json()       // parse via JSON (=> Promise)  res.status       //=> 200  res.statusText   //=> 'OK'  res.redirected   //=> false  res.ok           //=> true  res.url          //=> 'http://site.com/data.json'  res.type         //=> 'basic'                   //   ('cors' 'default' 'error'                   //    'opaque' 'opaqueredirect')</span></code></pre></div>","position":{"start":{"line":379,"column":1,"offset":16892},"end":{"line":382,"column":4,"offset":17329},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n  res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":384,"column":1,"offset":17331},"end":{"line":387,"column":4,"offset":17379},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Request options","position":{"start":{"line":389,"column":5,"offset":17385},"end":{"line":389,"column":20,"offset":17400},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":17381},"end":{"line":389,"column":20,"offset":17400},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// post body  body: JSON.stringify(...),</span></code></pre></div>","position":{"start":{"line":391,"column":1,"offset":17402},"end":{"line":394,"column":4,"offset":17521},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>    <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>","position":{"start":{"line":396,"column":1,"offset":17523},"end":{"line":399,"column":4,"offset":17584},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// send cookies  credentials: 'include',     // send cookies, even in CORS</span></code></pre></div>","position":{"start":{"line":401,"column":1,"offset":17586},"end":{"line":404,"column":4,"offset":17703},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":406,"column":1,"offset":17705},"end":{"line":409,"column":4,"offset":17720},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Catching errors","position":{"start":{"line":411,"column":5,"offset":17726},"end":{"line":411,"column":20,"offset":17741},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":17722},"end":{"line":411,"column":20,"offset":17741},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>checkStatus<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":413,"column":1,"offset":17743},"end":{"line":416,"column":4,"offset":17795},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkStatus</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token keyword\">return</span> res  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>    <span class=\"token keyword\">let</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>    err<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> res    <span class=\"token keyword\">throw</span> err  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":418,"column":1,"offset":17797},"end":{"line":421,"column":4,"offset":17986},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Non-2xx responses are still successful requests. Use another function to turn them to errors.","position":{"start":{"line":423,"column":1,"offset":17988},"end":{"line":423,"column":94,"offset":18081},"indent":[]}}],"position":{"start":{"line":423,"column":1,"offset":17988},"end":{"line":423,"column":94,"offset":18081},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using with node.js","position":{"start":{"line":425,"column":5,"offset":18087},"end":{"line":425,"column":23,"offset":18105},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":18083},"end":{"line":425,"column":23,"offset":18105},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isomorphic-fetch'</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":427,"column":1,"offset":18107},"end":{"line":430,"column":4,"offset":18161},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"See: ","position":{"start":{"line":432,"column":1,"offset":18163},"end":{"line":432,"column":6,"offset":18168},"indent":[]}},{"type":"link","title":null,"url":"https://npmjs.com/package/isomorphic-fetch","children":[{"type":"text","value":"isomorphic-fetch","position":{"start":{"line":432,"column":7,"offset":18169},"end":{"line":432,"column":23,"offset":18185},"indent":[]}}],"position":{"start":{"line":432,"column":6,"offset":18168},"end":{"line":432,"column":68,"offset":18230},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":432,"column":68,"offset":18230},"end":{"line":432,"column":69,"offset":18231},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"(npmjs.com)","position":{"start":{"line":432,"column":70,"offset":18232},"end":{"line":432,"column":81,"offset":18243},"indent":[]}}],"position":{"start":{"line":432,"column":69,"offset":18231},"end":{"line":432,"column":82,"offset":18244},"indent":[]}}],"position":{"start":{"line":432,"column":1,"offset":18163},"end":{"line":432,"column":82,"offset":18244},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":433,"column":1,"offset":18245}}}}