{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-23cee82940ff05f9b711c50f4feb6598-gatsby-remark-prismjs-","val":"<h1>React Patterns:</h1>\n<iframe height=\"600px\" width=\"1000px\" sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://codesandbox.io/embed/lucid-pateu-ln8ex?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react patterns\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   >\n</iframe>\n<br>\n<h2>React Cheat Sheet</h2>\n<hr>\n<hr>\n<details>\n<summary>  See More </summary>\n<h3>Components</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//x</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//x</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"message-box\"</span><span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const el = document.body\nReactDOM.render(&lt;Hello name='John' />, el)</code></pre></div>\n<p>Use the <a href=\"https://jsfiddle.net/reactjs/69z2wepo/\">React.js jsfiddle</a> to start hacking. (or the unofficial <a href=\"http://jsbin.com/yafixat/edit?js,output\">jsbin</a>)</p>\n<h3>Import multiple exports</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Hello extends Component {\n  ...\n}</code></pre></div>\n<h3>Properties</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Video fullscreen={true} autoplay={false} /></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render () {\n  this.props.fullscreen\n  const { fullscreen, autoplay } = this.props\n  ···\n}</code></pre></div>\n<p>Use <code class=\"language-text\">this.props</code> to access properties passed to the component.</p>\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#using-props\">Properties</a></p>\n<h3>States</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">constructor(props) {\n  super(props)\n  this.state = { username: undefined }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.setState({ username: 'rstacruz' })</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render () {\n  this.state.username\n  const { username } = this.state\n  ···\n}</code></pre></div>\n<p>Use states (<code class=\"language-text\">this.state</code>) to manage dynamic data.</p>\n<p>With <a href=\"https://babeljs.io/\">Babel</a> you can use <a href=\"https://github.com/tc39/proposal-class-fields\">proposal-class-fields</a> and get rid of constructor</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Hello extends Component {\n  state = { username: undefined };\n  ...\n}</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#reactive-state\">States</a></p>\n<h3>Nesting</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return &lt;div>\n      &lt;UserAvatar src={avatar} />\n      &lt;UserProfile username={username} />\n    &lt;/div>\n  }\n}</code></pre></div>\n<p>As of React v16.2.0, fragments can be used to return multiple children without adding extra wrapping nodes to the DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {\n  Component,\n  Fragment\n} from 'react'\n\nclass Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return (\n      &lt;Fragment>\n        &lt;UserAvatar src={avatar} />\n        &lt;UserProfile username={username} />\n      &lt;/Fragment>\n    )\n  }\n}</code></pre></div>\n<p>Nest components to separate concerns.</p>\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#composing-components\">Composing Components</a></p>\n<h3>Children</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;AlertBox>\n  &lt;h1>You have pending notifications&lt;/h1>\n&lt;/AlertBox></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class AlertBox extends Component {\n  render () {\n    return &lt;div className='alert-box'>\n      {this.props.children}\n    &lt;/div>\n  }\n}</code></pre></div>\n<p>Children are passed as the <code class=\"language-text\">children</code> property.</p>\n<h2><a href=\"https://devhints.io/react#defaults\">#</a>Defaults</h2>\n<h3>Setting default props</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello.defaultProps = {\n  color: 'blue'\n}</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/docs/react-component.html#defaultprops\">defaultProps</a></p>\n<h3>Setting default state</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Hello extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { visible: true }\n  }\n}</code></pre></div>\n<p>Set the default state in the <code class=\"language-text\">constructor()</code>.</p>\n<p>And without constructor using <a href=\"https://babeljs.io/\">Babel</a> with <a href=\"https://github.com/tc39/proposal-class-fields\">proposal-class-fields</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Hello extends Component {\n  state = { visible: true }\n}</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state\">Setting the default state</a></p>\n<h2><a href=\"https://devhints.io/react#other-components\">#</a>Other components</h2>\n<h3>Functional components</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function MyComponent ({ name }) {\n  return &lt;div className='message-box'>\n    Hello {name}\n  &lt;/div>\n}</code></pre></div>\n<p>Functional components have no state. Also, their <code class=\"language-text\">props</code> are passed as the first parameter to a function.</p>\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">Function and Class Components</a></p>\n<h3>Pure components</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {PureComponent} from 'react'\n\nclass MessageBox extends PureComponent {\n  ···\n}</code></pre></div>\n<p>Performance-optimized version of <code class=\"language-text\">React.Component</code>. Doesn't rerender if props/state hasn't changed.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html#react.purecomponent\">Pure components</a></p>\n<h3>Component API</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.forceUpdate()</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.setState({ ... })\nthis.setState(state => { ... })</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.state\nthis.props</code></pre></div>\n<p>These methods and properties are available for <code class=\"language-text\">Component</code> instances.</p>\n<p>See: <a href=\"https://facebook.github.io/react/docs/component-api.html\">Component API</a></p>\n<h2><a href=\"https://devhints.io/react#lifecycle\">#</a>Lifecycle</h2>\n<h3>Mounting</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">constructor</code> <em>(props)</em></td>\n<td>Before rendering <a href=\"https://reactjs.org/docs/react-component.html#constructor\">#</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">componentWillMount()</code></td>\n<td><em>Don't use this</em> <a href=\"https://reactjs.org/docs/react-component.html#componentwillmount\">#</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">render()</code></td>\n<td>Render <a href=\"https://reactjs.org/docs/react-component.html#render\">#</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">componentDidMount()</code></td>\n<td>After rendering (DOM available) <a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">#</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">componentWillUnmount()</code></td>\n<td>Before DOM removal <a href=\"https://reactjs.org/docs/react-component.html#componentwillunmount\">#</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">componentDidCatch()</code></td>\n<td>Catch errors (16+) <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">#</a></td>\n</tr>\n</tbody>\n</table>\n<p>Set initial the state on <code class=\"language-text\">constructor()</code>. Add DOM event handlers, timers (etc) on <code class=\"language-text\">componentDidMount()</code>, then remove them on <code class=\"language-text\">componentWillUnmount()</code>.</p>\n<h3>Updating</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">componentDidUpdate</code> <em>(prevProps, prevState, snapshot)</em></td>\n<td>Use <code class=\"language-text\">setState()</code> here, but remember to compare props</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shouldComponentUpdate</code> <em>(newProps, newState)</em></td>\n<td>Skips <code class=\"language-text\">render()</code> if returns false</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">render()</code></td>\n<td>Render</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">componentDidUpdate</code> <em>(prevProps, prevState)</em></td>\n<td>Operate on the DOM here</td>\n</tr>\n</tbody>\n</table>\n<p>Called when parents change properties and <code class=\"language-text\">.setState()</code>. These are not called for initial renders.</p>\n<p>See: <a href=\"https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\">Component specs</a></p>\n<h2><a href=\"https://devhints.io/react#hooks-new\">#</a>Hooks (New)</h2>\n<h3>State Hook</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div>\n      &lt;p>You clicked {count} times&lt;/p>\n      &lt;button onClick={() => setCount(count + 1)}>\n        Click me\n      &lt;/button>\n    &lt;/div>\n  );\n}</code></pre></div>\n<p>Hooks are a new addition in React 16.8.</p>\n<p>See: <a href=\"https://reactjs.org/docs/hooks-overview.html\">Hooks at a Glance</a></p>\n<h3>Declaring multiple state variables</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}</code></pre></div>\n<h3>Effect hook</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n\n  return (\n    &lt;div>\n      &lt;p>You clicked {count} times&lt;/p>\n      &lt;button onClick={() => setCount(count + 1)}>\n        Click me\n      &lt;/button>\n    &lt;/div>\n  );\n}</code></pre></div>\n<p>If you're familiar with React class lifecycle methods, you can think of <code class=\"language-text\">useEffect</code> Hook as <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, and <code class=\"language-text\">componentWillUnmount</code> combined.</p>\n<p>By default, React runs the effects after every render — including the first render.</p>\n<h3>Building your own hooks</h3>\n<h4>Define FriendStatus</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  }, [props.friend.id]);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}</code></pre></div>\n<p>Effects may also optionally specify how to “clean up” after them by returning a function.</p>\n<h4>Use FriendStatus</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a></p>\n<h3>Hooks API Reference</h3>\n<p>Also see: <a href=\"https://reactjs.org/docs/hooks-faq.html\">Hooks FAQ</a></p>\n<h4>Basic Hooks</h4>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useState</code><em>(initialState)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useEffect</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useContext</code><em>(MyContext)</em></td>\n<td>value returned from <code class=\"language-text\">React.createContext</code></td>\n</tr>\n</tbody>\n</table>\n<p>Full details: <a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\">Basic Hooks</a></p>\n<h4>Additional Hooks</h4>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useReducer</code><em>(reducer, initialArg, init)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useCallback</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useMemo</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useRef</code><em>(initialValue)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useImperativeHandle</code><em>(ref, () => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useLayoutEffect</code></td>\n<td>identical to <code class=\"language-text\">useEffect</code>, but it fires synchronously after all DOM mutations</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useDebugValue</code><em>(value)</em></td>\n<td>display a label for custom hooks in React DevTools</td>\n</tr>\n</tbody>\n</table>\n<p>Full details: <a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\">Additional Hooks</a></p>\n<h2><a href=\"https://devhints.io/react#dom-nodes\">#</a>DOM nodes</h2>\n<h3>References</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MyComponent extends Component {\n  render () {\n    return &lt;div>\n      &lt;input ref={el => this.input = el} />\n    &lt;/div>\n  }\n\n  componentDidMount () {\n    this.input.focus()\n  }\n}</code></pre></div>\n<p>Allows access to DOM nodes.</p>\n<p>See: <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs and the DOM</a></p>\n<h3>DOM Events</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MyComponent extends Component {\n  render () {\n    &lt;input type=\"text\"\n        value={this.state.value}\n        onChange={event => this.onChange(event)} />\n  }\n\n  onChange (event) {\n    this.setState({ value: event.target.value })\n  }\n}</code></pre></div>\n<p>Pass functions to attributes like <code class=\"language-text\">onChange</code>.</p>\n<p>See: <a href=\"https://reactjs.org/docs/events.html\">Events</a></p>\n<h2><a href=\"https://devhints.io/react#other-features\">#</a>Other features</h2>\n<h3>Transferring props</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;VideoPlayer src=\"video.mp4\" /></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class VideoPlayer extends Component {\n  render () {\n    return &lt;VideoEmbed {...this.props} />\n  }\n}</code></pre></div>\n<p>Propagates <code class=\"language-text\">src=\"...\"</code> down to the sub-component.</p>\n<p>See <a href=\"https://facebook.github.io/react/docs/transferring-props.html\">Transferring props</a></p>\n<h3>Top-level API</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">React.createClass({ ... })\nReact.isValidElement(c)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ReactDOM.render(&lt;Component />, domnode, [callback])\nReactDOM.unmountComponentAtNode(domnode)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ReactDOMServer.renderToString(&lt;Component />)\nReactDOMServer.renderToStaticMarkup(&lt;Component />)</code></pre></div>\n<p>There are more, but these are most common.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html\">React top-level API</a></p>\n<h2><a href=\"https://devhints.io/react#jsx-patterns\">#</a>JSX patterns</h2>\n<h3>Style shorthand</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const style = { height: 10 }\nreturn &lt;div style={style}>\n&lt;/div></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return &lt;div style={{ margin: 0, padding: 0 }}>\n&lt;/div></code></pre></div>\n<p>See: <a href=\"https://reactjs.org/tips/inline-styles.html\">Inline styles</a></p>\n<h3>Inner HTML</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function markdownify() { return \"&lt;p>...&lt;/p>\"; }\n&lt;div dangerouslySetInnerHTML={{__html: markdownify()}} /></code></pre></div>\n<p>See: <a href=\"https://reactjs.org/tips/dangerously-set-inner-html.html\">Dangerously set innerHTML</a></p>\n<h3>Lists</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class TodoList extends Component {\n  render () {\n    const { items } = this.props\n\n    return &lt;ul>\n      {items.map(item =>\n        &lt;TodoItem item={item} key={item.key} />)}\n    &lt;/ul>\n  }\n}</code></pre></div>\n<p>Always supply a <code class=\"language-text\">key</code> property.</p>\n<h3>Conditionals</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Fragment>\n  {showMyComponent\n    ? &lt;MyComponent />\n    : &lt;OtherComponent />}\n&lt;/Fragment></code></pre></div>\n<h3>Short-circuit evaluation</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Fragment>\n  {showPopup &amp;&amp; &lt;Popup />}\n  ...\n&lt;/Fragment></code></pre></div>\n<h2><a href=\"https://devhints.io/react#new-features\">#</a>New features</h2>\n<h3>Returning multiple elements</h3>\n<p>You can return multiple elements as arrays or fragments.</p>\n<h4>Arrays</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render () {\n  // Don't forget the keys!\n  return [\n    &lt;li key=\"A\">First item&lt;/li>,\n    &lt;li key=\"B\">Second item&lt;/li>\n  ]\n}</code></pre></div>\n<h4>Fragments</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render () {\n  // Fragments don't require keys!\n  return (\n    &lt;Fragment>\n      &lt;li>First item&lt;/li>\n      &lt;li>Second item&lt;/li>\n    &lt;/Fragment>\n  )\n}</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n<h3>Returning strings</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render() {\n  return 'Look ma, no spans!';\n}</code></pre></div>\n<p>You can return just a string.</p>\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n<h3>Errors</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MyComponent extends Component {\n  ···\n  componentDidCatch (error, info) {\n    this.setState({ error })\n  }\n}</code></pre></div>\n<p>Catch errors via <code class=\"language-text\">componentDidCatch</code>. (React 16+)</p>\n<p>See: <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">Error handling in React 16</a></p>\n<h3>Portals</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render () {\n  return React.createPortal(\n    this.props.children,\n    document.getElementById('menu')\n  )\n}</code></pre></div>\n<p>This renders <code class=\"language-text\">this.props.children</code> into any location in the DOM.</p>\n<p>See: <a href=\"https://reactjs.org/docs/portals.html\">Portals</a></p>\n<h3>Hydration</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const el = document.getElementById('app')\nReactDOM.hydrate(&lt;App />, el)</code></pre></div>\n<p>Use <code class=\"language-text\">ReactDOM.hydrate</code> instead of using <code class=\"language-text\">ReactDOM.render</code> if you're rendering over the output of <a href=\"https://reactjs.org/docs/react-dom-server.html\">ReactDOMServer</a>.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">Hydrate</a></p>\n<h2><a href=\"https://devhints.io/react#property-validation\">#</a>Property validation</h2>\n<h3>PropTypes</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import PropTypes from 'prop-types'</code></pre></div>\n<p>See: <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">Typechecking with PropTypes</a></p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">any</code></td>\n<td>Anything</td>\n</tr>\n</tbody>\n</table>\n<h4>Basic</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">string</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">number</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">func</code></td>\n<td>Function</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bool</code></td>\n<td>True or false</td>\n</tr>\n</tbody>\n</table>\n<h4>Enum</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">oneOf</code><em>(any)</em></td>\n<td>Enum types</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">oneOfType</code><em>(type array)</em></td>\n<td>Union</td>\n</tr>\n</tbody>\n</table>\n<h4>Array</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">array</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">arrayOf</code><em>(…)</em></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Object</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">object</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">objectOf</code><em>(…)</em></td>\n<td>Object with values of a certain type</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">instanceOf</code><em>(…)</em></td>\n<td>Instance of a class</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shape</code><em>(…)</em></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Elements</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">element</code></td>\n<td>React element</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">node</code></td>\n<td>DOM node</td>\n</tr>\n</tbody>\n</table>\n<h4>Required</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">(···).isRequired</code></td>\n<td>Required</td>\n</tr>\n</tbody>\n</table>\n<h3>Basic types</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyComponent.propTypes = {\n  email:      PropTypes.string,\n  seats:      PropTypes.number,\n  callback:   PropTypes.func,\n  isClosed:   PropTypes.bool,\n  any:        PropTypes.any\n}</code></pre></div>\n<h3>Required types</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  name:  PropTypes.string.isRequired\n}</code></pre></div>\n<h3>Elements</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  // React element\n  element: PropTypes.element,\n\n  // num, string, element, or an array of those\n  node: PropTypes.node\n}</code></pre></div>\n<h3>Enumerables (oneOf)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  direction: PropTypes.oneOf([\n    'left', 'right'\n  ])\n}</code></pre></div>\n<h3>Arrays and objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  list: PropTypes.array,\n  ages: PropTypes.arrayOf(PropTypes.number),\n  user: PropTypes.object,\n  user: PropTypes.objectOf(PropTypes.number),\n  message: PropTypes.instanceOf(Message)\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    age:  PropTypes.number\n  })\n}</code></pre></div>\n<p>Use <code class=\"language-text\">.array[Of]</code>, <code class=\"language-text\">.object[Of]</code>, <code class=\"language-text\">.instanceOf</code>, <code class=\"language-text\">.shape</code>.</p>\n<h3>Custom validation</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCo.propTypes = {\n  customProp: (props, key, componentName) => {\n    if (!/matchme/.test(props[key])) {\n      return new Error('Validation failed!')\n    }\n  }\n}</code></pre></div>\n<hr>\n<hr>\n<h1>React:</h1>\n<ul>\n<li><code class=\"language-text\">&lt;script src=\"https://unpkg.com/react@15/dist/react.js\"> &lt;/script></code></li>\n<li><code class=\"language-text\">$ npm install react --save</code></li>\n<li><code class=\"language-text\">$ bower install react --save</code></li>\n</ul>\n<p>React DOM:</p>\n<ul>\n<li><code class=\"language-text\">&lt;script src=\"https://unpkg.com/react-dom@15/dist/react-dom.js\"> &lt;/script></code></li>\n<li><code class=\"language-text\">$ npm install react-dom</code></li>\n<li><code class=\"language-text\">$ bower install react-dom --save</code></li>\n</ul>\n<h2>Rendering</h2>\n<h3>Rendering (ES5)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HackHall.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'menu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Rendering (ES5+JSX)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Link name<span class=\"token operator\">=</span><span class=\"token string\">\"HackHall.com\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'menu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Server-side Rendering</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> ReactDOMServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HackHall.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HackHall.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Components</h2>\n<h3>ES5</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> Link <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">displayName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Link'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'btn'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Click ->'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>ES5 + JSX</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> Link <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>a className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                Click <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>ES6 + JSX</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>a className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                Click <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<hr>\n<hr>\n<details>\n<summary>  </summary>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save react       // declarative and flexible JavaScript library <span class=\"token keyword\">for</span> building UI\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save react-dom   // serves as the entry point of the DOM-related rendering paths\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save prop-types  // runtime <span class=\"token builtin class-name\">type</span> checking <span class=\"token keyword\">for</span> React props and similar objects</code></pre></div>\n<p>// notes: don't forget the command lines</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * REACT\n * https://reactjs.org/docs/react-api.html\n * ******************************************************************************************* */</span>\n\n<span class=\"token comment\">// Create and return a new React element of the given type.</span>\n<span class=\"token comment\">// Code written with JSX will be converted to use React.createElement().</span>\n<span class=\"token comment\">// You will not typically invoke React.createElement() directly if you are using JSX.</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Clone and return a new React element using element as the starting point.</span>\n<span class=\"token comment\">// The resulting element will have the original element's props with the new props merged in shallowly.</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Verifies the object is a React element. Returns true or false.</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\n\nReact<span class=\"token punctuation\">.</span>Children  <span class=\"token comment\">// provides utilities for dealing with the this.props.children opaque data structure.</span>\n\n<span class=\"token comment\">// Invokes a function on every immediate child contained within children with this set to thisArg.</span>\nReact<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Like React.Children.map() but does not return an array.</span>\nReact<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Returns the total number of components in children,</span>\n<span class=\"token comment\">// equal to the number of times that a callback passed to map or forEach would be invoked.</span>\nReact<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Verifies that children has only one child (a React element) and returns it.</span>\n<span class=\"token comment\">// Otherwise this method throws an error.</span>\nReact<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Returns the children opaque data structure as a flat array with keys assigned to each child.</span>\n<span class=\"token comment\">// Useful if you want to manipulate collections of children in your render methods,</span>\n<span class=\"token comment\">// especially if you want to reorder or slice this.props.children before passing it down.</span>\nReact<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The React.Fragment component lets you return multiple elements in a render() method without creating an additional DOM element</span>\n<span class=\"token comment\">// You can also use it with the shorthand &lt;></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> syntax<span class=\"token punctuation\">.</span>\nReact<span class=\"token punctuation\">.</span>Fragment\n\n<span class=\"token comment\">/* *******************************************************************************************\n * REACT.COMPONENT\n * React.Component is an abstract base class, so it rarely makes sense to refer to React.Component\n * directly. Instead, you will typically subclass it, and define at least a render() method.\n * https://reactjs.org/docs/react-component.html\n * ******************************************************************************************* */</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Will be called before it is mounted</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call this method before any other statement</span>\n    <span class=\"token comment\">// or this.props will be undefined in the constructor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The constructor is also often used to bind event handlers to the class instance.</span>\n    <span class=\"token comment\">// Binding makes sure the method has access to component attributes like this.props and this.state</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The constructor is the right place to initialize state.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// In rare cases, it's okay to initialize state based on props.</span>\n      <span class=\"token comment\">// This effectively \"forks\" the props and sets the state with the initial props.</span>\n      <span class=\"token comment\">// If you \"fork\" props by using them for state, you might also want to implement componentWillReceiveProps(nextProps)</span>\n      <span class=\"token comment\">// to keep the state up-to-date with them. But lifting state up is often easier and less bug-prone.</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>initialColor\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Enqueues changes to the component state and</span>\n  <span class=\"token comment\">// tells React that this component and its children need to be re-rendered with the updated state.</span>\n  <span class=\"token comment\">// setState() does not always immediately update the component. It may batch or defer the update until later.</span>\n  <span class=\"token comment\">// This makes reading this.state right after calling setState() a potential pitfall.</span>\n  <span class=\"token comment\">// Instead, use componentDidUpdate or a setState callback.</span>\n  <span class=\"token comment\">// You may optionally pass an object as the first argument to setState() instead of a function.</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updater<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked just before mounting occurs (before render())</span>\n  <span class=\"token comment\">// This is the only lifecycle hook called on server rendering.</span>\n  <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked immediately after a component is mounted.</span>\n  <span class=\"token comment\">// Initialization that requires DOM nodes should go here.</span>\n  <span class=\"token comment\">// If you need to load data from a remote endpoint, this is a good place to instantiate the network request.</span>\n  <span class=\"token comment\">// This method is a good place to set up any subscriptions. If you do that, don't forget to unsubscribe in componentWillUnmount().</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked before a mounted component receives new props.</span>\n  <span class=\"token comment\">// If you need to update the state in response to prop changes (for example, to reset it),</span>\n  <span class=\"token comment\">// you may compare this.props and nextProps and perform state transitions using this.setState() in this method.</span>\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Let React know if a component's output is not affected by the current change in state or props.</span>\n  <span class=\"token comment\">// The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.</span>\n  <span class=\"token comment\">// shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true.</span>\n  <span class=\"token comment\">// This method is not called for the initial render or when forceUpdate() is used.</span>\n  <span class=\"token comment\">// Returning false does not prevent child components from re-rendering when their state changes.</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked just before rendering when new props or state are being received.</span>\n  <span class=\"token comment\">// Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.</span>\n  <span class=\"token comment\">// Note that you cannot call this.setState() here; nor should you do anything else</span>\n  <span class=\"token comment\">// (e.g. dispatch a Redux action) that would trigger an update to a React component before componentWillUpdate() returns.</span>\n  <span class=\"token comment\">// If you need to update state in response to props changes, use componentWillReceiveProps() instead.</span>\n  <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked immediately after updating occurs. This method is not called for the initial render.</span>\n  <span class=\"token comment\">// Use this as an opportunity to operate on the DOM when the component has been updated.</span>\n  <span class=\"token comment\">// This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Invoked immediately before a component is unmounted and destroyed.</span>\n  <span class=\"token comment\">// Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests,</span>\n  <span class=\"token comment\">// or cleaning up any subscriptions that were created in componentDidMount().</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Error boundaries are React components that catch JavaScript errors anywhere in their child component tree,</span>\n  <span class=\"token comment\">// log those errors, and display a fallback UI instead of the component tree that crashed.</span>\n  <span class=\"token comment\">// Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.</span>\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// This method is required.</span>\n  <span class=\"token comment\">// It should be pure, meaning that it does not modify component state,</span>\n  <span class=\"token comment\">// it returns the same result each time it's invoked, and</span>\n  <span class=\"token comment\">// it does not directly interact with the browser (use lifecycle methods for this)</span>\n  <span class=\"token comment\">// It must return one of the following types: react elements, string and numbers, portals, null or booleans.</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contains the props that were defined by the caller of this component.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Contains data specific to this component that may change over time.</span>\n    <span class=\"token comment\">// The state is user-defined, and it should be a plain JavaScript object.</span>\n    <span class=\"token comment\">// If you don't use it in render(), it shouldn't be in the state.</span>\n    <span class=\"token comment\">// For example, you can put timer IDs directly on the instance.</span>\n    <span class=\"token comment\">// Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made.</span>\n    <span class=\"token comment\">// Treat this.state as if it were immutable.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Comment goes here */</span><span class=\"token punctuation\">}</span>\n        Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Can be defined as a property on the component class itself, to set the default props for the class.</span>\n<span class=\"token comment\">// This is used for undefined props, but not for null props.</span>\nComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncomponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// By default, when your component's state or props change, your component will re-render.</span>\n<span class=\"token comment\">// If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().</span>\n<span class=\"token comment\">// Normally you should try to avoid all uses of forceUpdate() and only read from this.props and this.state in render().</span>\ncomponent<span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * REACT.DOM\n * The react-dom package provides DOM-specific methods that can be used at the top level of\n * your app and as an escape hatch to get outside of the React model if you need to.\n * Most of your components should not need to use this module.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */</span>\n\n<span class=\"token comment\">// Render a React element into the DOM in the supplied container and return a reference</span>\n<span class=\"token comment\">// to the component (or returns null for stateless components).</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Same as render(), but is used to hydrate a container whose HTML contents were rendered</span>\n<span class=\"token comment\">// by ReactDOMServer. React will attempt to attach event listeners to the existing markup.</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Remove a mounted React component from the DOM and clean up its event handlers and state.</span>\n<span class=\"token comment\">// If no component was mounted in the container, calling this function does nothing.</span>\n<span class=\"token comment\">// Returns true if a component was unmounted and false if there was no component to unmount.</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// If this component has been mounted into the DOM, this returns the corresponding native browser</span>\n<span class=\"token comment\">// DOM element. This method is useful for reading values out of the DOM, such as form field values</span>\n<span class=\"token comment\">// and performing DOM measurements. In most cases, you can attach a ref to the DOM node and avoid</span>\n<span class=\"token comment\">// using findDOMNode at all.</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Creates a portal. Portals provide a way to render children into a DOM node that exists outside</span>\n<span class=\"token comment\">// the hierarchy of the DOM component.</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * REACTDOMSERVER\n * The ReactDOMServer object enables you to render components to static markup.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */</span>\n\n<span class=\"token comment\">// Render a React element to its initial HTML. React will return an HTML string.</span>\n<span class=\"token comment\">// You can use this method to generate HTML on the server and send the markup down on the initial</span>\n<span class=\"token comment\">// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Similar to renderToString, except this doesn't create extra DOM attributes that React uses</span>\n<span class=\"token comment\">// internally, such as data-reactroot. This is useful if you want to use React as a simple static</span>\n<span class=\"token comment\">// page generator, as stripping away the extra attributes can save some bytes.</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Render a React element to its initial HTML. Returns a Readable stream that outputs an HTML string.</span>\n<span class=\"token comment\">// The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return.</span>\n<span class=\"token comment\">// You can use this method to generate HTML on the server and send the markup down on the initial</span>\n<span class=\"token comment\">// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Similar to renderToNodeStream, except this doesn't create extra DOM attributes that React uses</span>\n<span class=\"token comment\">// internally, such as data-reactroot. This is useful if you want to use React as a simple static</span>\n<span class=\"token comment\">// page generator, as stripping away the extra attributes can save some bytes.</span>\nReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* *******************************************************************************************\n * TYPECHECKING WITH PROPTYPES\n * https://reactjs.org/docs/typechecking-with-proptypes.html\n * ******************************************************************************************* */</span>\n\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You can declare that a prop is a specific JS type. By default, these</span>\n  <span class=\"token comment\">// are all optional.</span>\n  <span class=\"token literal-property property\">optionalArray</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalBool</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalNumber</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalObject</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalString</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalSymbol</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Anything that can be rendered: numbers, strings, elements or an array</span>\n  <span class=\"token comment\">// (or fragment) containing these types.</span>\n  <span class=\"token literal-property property\">optionalNode</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A React element.</span>\n  <span class=\"token literal-property property\">optionalElement</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also declare that a prop is an instance of a class. This uses</span>\n  <span class=\"token comment\">// JS's instanceof operator.</span>\n  <span class=\"token literal-property property\">optionalMessage</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can ensure that your prop is limited to specific values by treating</span>\n  <span class=\"token comment\">// it as an enum.</span>\n  <span class=\"token literal-property property\">optionalEnum</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'News'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Photos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object that could be one of many types</span>\n  <span class=\"token literal-property property\">optionalUnion</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOfType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An array of a certain type</span>\n  <span class=\"token literal-property property\">optionalArrayOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object with property values of a certain type</span>\n  <span class=\"token literal-property property\">optionalObjectOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">objectOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object taking on a particular shape</span>\n  <span class=\"token literal-property property\">optionalObjectWithShape</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can chain any of the above with `isRequired` to make sure a warning</span>\n  <span class=\"token comment\">// is shown if the prop isn't provided.</span>\n  <span class=\"token literal-property property\">requiredFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A value of any data type</span>\n  <span class=\"token literal-property property\">requiredAny</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also specify a custom validator. It should return an Error</span>\n  <span class=\"token comment\">// object if the validation fails. Don't `console.warn` or throw, as this</span>\n  <span class=\"token comment\">// won't work inside `oneOfType`.</span>\n  <span class=\"token function-variable function\">customProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span>\n  <span class=\"token comment\">// It should return an Error object if the validation fails. The validator</span>\n  <span class=\"token comment\">// will be called for each key in the array or object. The first two</span>\n  <span class=\"token comment\">// arguments of the validator are the array or object itself, and the</span>\n  <span class=\"token comment\">// current item's key.</span>\n  <span class=\"token literal-property property\">customArrayProp</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propValue<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> propFullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>propValue<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propFullName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<hr>\n<h2>Advanced Components</h2>\n<h3>Options (ES5)</h3>\n<ul>\n<li><code class=\"language-text\">propTypes object</code>: Type validation in development mode</li>\n<li><code class=\"language-text\">getDefaultProps function()</code>: object of default props</li>\n<li><code class=\"language-text\">getInitialState function()</code>: object of the initial state</li>\n</ul>\n<p>ES5:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> Link <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">propTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initialCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'btn'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">onClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Click ->'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'webapplog.com'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">' (Clicked: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token string\">')'</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES5 + JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> Link <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">propTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initialCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>a onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                Click <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'webapplog.com'</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">(</span>Clicked<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES6 + JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>initialCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>a onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                Click <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'webapplog.com'</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">(</span>Clicked<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nLink<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initialCount</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nLink<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initialCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Lifecycle Events</h2>\n<p>Modern React lifecycle methods (v16+)\n<img src=\"DZ-97vzW4AAbcZj.jpg\"></p>\n<p>Legacy Lifecycle Events:</p>\n<ul>\n<li><code class=\"language-text\">componentWillMount function()</code></li>\n<li><code class=\"language-text\">componentDidMount function()</code></li>\n<li><code class=\"language-text\">componentWillReceiveProps function(nextProps)</code></li>\n<li><code class=\"language-text\">shouldComponentUpdate function(nextProps, nextState)-> bool</code></li>\n<li><code class=\"language-text\">componentWillUpdate function(nextProps, nextState)</code></li>\n<li><code class=\"language-text\">componentDidUpdate function(prevProps, prevState)</code></li>\n<li><code class=\"language-text\">componentWillUnmount function()</code></li>\n</ul>\n<p>Sequence of lifecycle events:</p>\n<p><img src=\"lifecycle-events.png\"></p>\n<p>Inspired by <a href=\"http://react.tips\">http://react.tips</a></p>\n<h2>Special Props</h2>\n<ul>\n<li><code class=\"language-text\">key</code>: Unique identifier for an element to turn arrays/lists into hashes for better performance, e.g., <code class=\"language-text\">key={id}</code></li>\n<li><code class=\"language-text\">ref</code>: Reference to an element via <code class=\"language-text\">this.refs.NAME</code>, e.g., <code class=\"language-text\">ref=\"email\"</code> will create <code class=\"language-text\">this.refs.email</code> DOM node or <code class=\"language-text\">ReactDOM.findDOMNode(this.refs.email)</code></li>\n<li><code class=\"language-text\">style</code>: Accept an object of styles, instead of a string (immutable since v0.14), e.g., <code class=\"language-text\">style={{color: red}}</code></li>\n<li><code class=\"language-text\">className</code>: the HTML <code class=\"language-text\">class</code> attribute, e.g., <code class=\"language-text\">className=\"btn\"</code></li>\n<li><code class=\"language-text\">htmlFor</code>: the HTML <code class=\"language-text\">for</code> attribute, e.g., <code class=\"language-text\">htmlFor=\"email\"</code></li>\n<li><code class=\"language-text\">dangerouslySetInnerHTML</code>: raw HTML by providing an object with the key <code class=\"language-text\">__html</code></li>\n<li><code class=\"language-text\">children</code>: content of the element via <code class=\"language-text\">this.props.children</code>, e.g., <code class=\"language-text\">this.props.children[0]</code></li>\n<li><code class=\"language-text\">data-NAME</code>: custom attribute, e.g., <code class=\"language-text\">data-tooltip-text=\"...\"</code></li>\n</ul>\n<h2>propTypes</h2>\n<p>Types available under <code class=\"language-text\">React.PropTypes</code>:</p>\n<ul>\n<li><code class=\"language-text\">any</code></li>\n<li><code class=\"language-text\">array</code></li>\n<li><code class=\"language-text\">bool</code></li>\n<li><code class=\"language-text\">element</code></li>\n<li><code class=\"language-text\">func</code></li>\n<li><code class=\"language-text\">node</code></li>\n<li><code class=\"language-text\">number</code></li>\n<li><code class=\"language-text\">object</code></li>\n<li><code class=\"language-text\">string</code></li>\n</ul>\n<p>To make required, append <code class=\"language-text\">.isRequired</code>.</p>\n<p>More methods:</p>\n<ul>\n<li><code class=\"language-text\">instanceOf(constructor)</code></li>\n<li><code class=\"language-text\">oneOf(['News', 'Photos'])</code></li>\n<li><code class=\"language-text\">oneOfType([propType, propType])</code></li>\n</ul>\n<h3>Custom Validation</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token literal-property property\">propTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">customProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">regExPattern</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Validation failed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Component Properties and Methods</h2>\n<p>Properties:</p>\n<ul>\n<li><code class=\"language-text\">this.refs</code>: Lists components with a <code class=\"language-text\">ref</code> prop</li>\n<li><code class=\"language-text\">this.props</code>: Any props passed to an element (immutable)</li>\n<li><code class=\"language-text\">this.state</code>: State set by setState and getInitialState (muttable) — avoid setting state manually with <code class=\"language-text\">this.state=...</code></li>\n<li><code class=\"language-text\">this.isMounted</code>: Flag whether the element has a corresponding DOM node or not</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><code class=\"language-text\">setState(changes)</code>: Change state (partially) to <code class=\"language-text\">this.state</code> and trigger re-render</li>\n<li><code class=\"language-text\">replaceState(newState)</code>: Replace <code class=\"language-text\">this.state</code> and trigger re-render</li>\n<li><code class=\"language-text\">forceUpdate()</code>: Trigger DOM re-render immediately</li>\n</ul>\n<h2>React Addons</h2>\n<p>As npm modules:</p>\n<ul>\n<li><a href=\"http://facebook.github.io/react/docs/animation.html\"><code class=\"language-text\">react-addons-css-transition-group</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/perf.html\"><code class=\"language-text\">react-addons-perf</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/test-utils.html\"><code class=\"language-text\">react-addons-test-utils</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/pure-render-mixin.html\"><code class=\"language-text\">react-addons-pure-render-mixin</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/two-way-binding-helpers.html\"><code class=\"language-text\">react-addons-linked-state-mixin</code></a></li>\n<li><code class=\"language-text\">react-addons-clone-with-props</code></li>\n<li><code class=\"language-text\">react-addons-create-fragment</code></li>\n<li><code class=\"language-text\">react-addons-css-transition-group</code></li>\n<li><code class=\"language-text\">react-addons-linked-state-mixin</code></li>\n<li><code class=\"language-text\">react-addons-pure-render-mixin</code></li>\n<li><code class=\"language-text\">react-addons-shallow-compare</code></li>\n<li><code class=\"language-text\">react-addons-transition-group</code></li>\n<li><a href=\"http://facebook.github.io/react/docs/update.html\"><code class=\"language-text\">react-addons-update</code></a></li>\n</ul>\n<h2>React Components</h2>\n<ul>\n<li><a href=\"https://github.com/brillout/awesome-react-components\">https://github.com/brillout/awesome-react-components</a> and <a href=\"http://devarchy.com/react-components\">http://devarchy.com/react-components</a>: List of React components</li>\n<li><a href=\"http://www.material-ui.com\">Material-UI</a>: Material design React components</li>\n<li><a href=\"http://react-toolbox.com\">http://react-toolbox.com</a>: Set of React components that implement Google Material Design specification</li>\n<li><a href=\"https://js.coach\">https://js.coach</a>: Opinionated catalog of open source JS (mostly React) packages</li>\n<li><a href=\"https://react.rocks\">https://react.rocks</a>: Catalog of React components</li>\n<li><a href=\"https://khan.github.io/react-components\">https://khan.github.io/react-components</a>: Khan Academy React components</li>\n<li><a href=\"http://www.reactjsx.com\">http://www.reactjsx.com</a>: Registry of React components</li>\n</ul>"}