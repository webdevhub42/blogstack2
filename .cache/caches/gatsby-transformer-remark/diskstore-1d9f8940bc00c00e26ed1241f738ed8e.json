{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-88224b1e1b7d770d37f705619e8c0186-gatsby-remark-prismjs-","val":"<p>If there's one great thing in Node.js packages, it's that they all agreed on using Semantic Versioning for their version numbering.</p>\n<p>The Semantic Versioning concept is simple: all versions have 3 digits: <code class=\"language-text\">x.y.z</code>.</p>\n<ul>\n<li>the first digit is the major version</li>\n<li>the second digit is the minor version</li>\n<li>the third digit is the patch version</li>\n</ul>\n<p>When you make a new release, you don't just up a number as you please, but you have rules:</p>\n<ul>\n<li>you up the major version when you make incompatible API changes</li>\n<li>you up the minor version when you add functionality in a backward-compatible manner</li>\n<li>you up the patch version when you make backward-compatible bug fixes</li>\n</ul>\n<p>The convention is adopted all across programming languages, and it is very important that every <code class=\"language-text\">npm</code> package adheres to it, because the whole system depends on that.</p>\n<p>Why is that so important?</p>\n<p>Because <code class=\"language-text\">npm</code> set some rules we can use in the <code class=\"language-text\">package.json</code> file to choose which versions it can update our packages to, when we run <code class=\"language-text\">npm update</code>.</p>\n<p>The rules use those symbols:</p>\n<ul>\n<li><code class=\"language-text\">^</code></li>\n<li><code class=\"language-text\">~</code></li>\n<li><code class=\"language-text\">></code></li>\n<li><code class=\"language-text\">>=</code></li>\n<li><code class=\"language-text\">&lt;</code></li>\n<li><code class=\"language-text\">&lt;=</code></li>\n<li><code class=\"language-text\">=</code></li>\n<li><code class=\"language-text\">-</code></li>\n<li><code class=\"language-text\">||</code></li>\n</ul>\n<p>Let's see those rules in detail:</p>\n<ul>\n<li><code class=\"language-text\">^</code>: It will only do updates that do not change the leftmost non-zero number. If you write <code class=\"language-text\">^0.13.0</code>, when running <code class=\"language-text\">npm update</code>, it can update to <code class=\"language-text\">0.13.1</code>, <code class=\"language-text\">0.13.2</code>, and so on, but not to <code class=\"language-text\">0.14.0</code> or above. If you write <code class=\"language-text\">^1.13.0</code>, when running <code class=\"language-text\">npm update</code>, it can update to <code class=\"language-text\">1.13.1</code>, <code class=\"language-text\">1.14.0</code> and so on, but will not update to <code class=\"language-text\">2.0.0</code> or above.</li>\n<li><code class=\"language-text\">~</code>: if you write <code class=\"language-text\">~0.13.0</code>, when running <code class=\"language-text\">npm update</code> it can update to patch releases: <code class=\"language-text\">0.13.1</code> is ok, but <code class=\"language-text\">0.14.0</code> is not.</li>\n<li><code class=\"language-text\">></code>: you accept any version higher than the one you specify</li>\n<li><code class=\"language-text\">>=</code>: you accept any version equal to or higher than the one you specify</li>\n<li><code class=\"language-text\">&lt;=</code>: you accept any version equal or lower to the one you specify</li>\n<li><code class=\"language-text\">&lt;</code>: you accept any version lower to the one you specify</li>\n<li><code class=\"language-text\">=</code>: you accept that exact version</li>\n<li><code class=\"language-text\">-</code>: you accept a range of versions. Example: <code class=\"language-text\">2.1.0 - 2.6.2</code></li>\n<li><code class=\"language-text\">||</code>: you combine sets. Example: <code class=\"language-text\">&lt; 2.1 || > 2.6</code></li>\n</ul>\n<p>You can combine some of those notations, for example use <code class=\"language-text\">1.0.0 || >=1.1.0 &lt;1.2.0</code> to either use 1.0.0 or one release from 1.1.0 up, but lower than 1.2.0.</p>\n<p>There are other rules, too:</p>\n<ul>\n<li>no symbol: you accept only that specific version you specify (<code class=\"language-text\">1.2.1</code>)</li>\n<li><code class=\"language-text\">latest</code>: you want to use the latest version available</li>\n</ul>"}