{"expireTime":9007200911870449000,"key":"transformer-remark-markdown-ast-24b0d56a05f7aaccf5b5bfdc1f955498-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"html","value":"<!--StartFragment-->","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":21,"offset":22},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"1. Array","position":{"start":{"line":4,"column":5,"offset":30},"end":{"line":4,"column":13,"offset":38},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":13,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The most basic of all data structures, an array stores data in memory for later use. Each array has a fixed number of cells decided on its creation, and each cell has a corresponding numeric index used to select its data. Whenever you’d like to use the array, all you need are the desired indices, and you can access any of the data within.","position":{"start":{"line":6,"column":1,"offset":42},"end":{"line":6,"column":341,"offset":382},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":42},"end":{"line":6,"column":341,"offset":382},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","alt":"alt-text","position":{"start":{"line":8,"column":2,"offset":387},"end":{"line":8,"column":279,"offset":664},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":386},"end":{"line":8,"column":546,"offset":931},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":386},"end":{"line":8,"column":546,"offset":931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":10,"column":1,"offset":935},"end":{"line":10,"column":11,"offset":945},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":935},"end":{"line":10,"column":11,"offset":945},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Simple to create and use.","position":{"start":{"line":12,"column":5,"offset":953},"end":{"line":12,"column":30,"offset":978},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":953},"end":{"line":12,"column":30,"offset":978},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":949},"end":{"line":12,"column":30,"offset":978},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Foundational building block for complex data structures","position":{"start":{"line":13,"column":5,"offset":984},"end":{"line":13,"column":60,"offset":1039},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":984},"end":{"line":13,"column":60,"offset":1039},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":980},"end":{"line":13,"column":60,"offset":1039},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":949},"end":{"line":13,"column":60,"offset":1039},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":15,"column":1,"offset":1043},"end":{"line":15,"column":14,"offset":1056},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1043},"end":{"line":15,"column":14,"offset":1056},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fixed size","position":{"start":{"line":17,"column":5,"offset":1064},"end":{"line":17,"column":15,"offset":1074},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":1064},"end":{"line":17,"column":15,"offset":1074},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1060},"end":{"line":17,"column":15,"offset":1074},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Expensive to insert/delete or resequence values","position":{"start":{"line":18,"column":5,"offset":1080},"end":{"line":18,"column":52,"offset":1127},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":1080},"end":{"line":18,"column":52,"offset":1127},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1076},"end":{"line":18,"column":52,"offset":1127},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to sort","position":{"start":{"line":19,"column":5,"offset":1133},"end":{"line":19,"column":24,"offset":1152},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":1133},"end":{"line":19,"column":24,"offset":1152},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1129},"end":{"line":19,"column":24,"offset":1152},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1060},"end":{"line":19,"column":24,"offset":1152},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications","children":[],"position":{"start":{"line":21,"column":6,"offset":1161},"end":{"line":21,"column":104,"offset":1259},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":21,"column":104,"offset":1259},"end":{"line":21,"column":116,"offset":1271},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1156},"end":{"line":21,"column":116,"offset":1271},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basic spreadsheets","position":{"start":{"line":23,"column":5,"offset":1279},"end":{"line":23,"column":23,"offset":1297},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":1279},"end":{"line":23,"column":23,"offset":1297},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1275},"end":{"line":23,"column":23,"offset":1297},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Within complex structures such as hash tables","position":{"start":{"line":24,"column":5,"offset":1303},"end":{"line":24,"column":50,"offset":1348},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":1303},"end":{"line":24,"column":50,"offset":1348},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1299},"end":{"line":24,"column":50,"offset":1348},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1275},"end":{"line":24,"column":50,"offset":1348},"indent":[1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":26,"column":1,"offset":1352},"end":{"line":27,"column":1,"offset":1355},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":27,"column":1,"offset":1355},"end":{"line":27,"column":2,"offset":1356},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1352},"end":{"line":27,"column":2,"offset":1356},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#2-queues","children":[],"position":{"start":{"line":29,"column":5,"offset":1364},"end":{"line":29,"column":99,"offset":1458},"indent":[]}},{"type":"text","value":"2. Queues","position":{"start":{"line":29,"column":99,"offset":1458},"end":{"line":29,"column":108,"offset":1467},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1360},"end":{"line":29,"column":108,"offset":1467},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Queues are conceptually similar to stacks; both are sequential structures, but queues process elements in the order they were entered rather than the most recent element.","position":{"start":{"line":31,"column":1,"offset":1471},"end":{"line":31,"column":171,"offset":1641},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1471},"end":{"line":31,"column":171,"offset":1641},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a result, queues can be thought of as a FIFO (First In, First Out) version of stacks. These are helpful as a buffer for requests, storing each request in the order it was received until it can be processed.","position":{"start":{"line":33,"column":1,"offset":1645},"end":{"line":33,"column":210,"offset":1854},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1645},"end":{"line":33,"column":210,"offset":1854},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","alt":"alt-text","position":{"start":{"line":35,"column":2,"offset":1859},"end":{"line":35,"column":279,"offset":2136},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1858},"end":{"line":35,"column":546,"offset":2403},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1858},"end":{"line":35,"column":546,"offset":2403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a visual, consider a single-lane tunnel: the first car to enter is the first car to exit. If other cars should wish to exit, but the first stops, all cars will have to wait for the first to exit before they can proceed.","position":{"start":{"line":37,"column":1,"offset":2407},"end":{"line":37,"column":224,"offset":2630},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2407},"end":{"line":37,"column":224,"offset":2630},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":39,"column":1,"offset":2634},"end":{"line":39,"column":11,"offset":2644},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2634},"end":{"line":39,"column":11,"offset":2644},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":41,"column":5,"offset":2652},"end":{"line":41,"column":17,"offset":2664},"indent":[]}}],"position":{"start":{"line":41,"column":5,"offset":2652},"end":{"line":41,"column":17,"offset":2664},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2648},"end":{"line":41,"column":17,"offset":2664},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Orders data in the order it was received","position":{"start":{"line":42,"column":5,"offset":2670},"end":{"line":42,"column":45,"offset":2710},"indent":[]}}],"position":{"start":{"line":42,"column":5,"offset":2670},"end":{"line":42,"column":45,"offset":2710},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2666},"end":{"line":42,"column":45,"offset":2710},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Low runtime","position":{"start":{"line":43,"column":5,"offset":2716},"end":{"line":43,"column":16,"offset":2727},"indent":[]}}],"position":{"start":{"line":43,"column":5,"offset":2716},"end":{"line":43,"column":16,"offset":2727},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2712},"end":{"line":43,"column":16,"offset":2727},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2648},"end":{"line":43,"column":16,"offset":2727},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":45,"column":1,"offset":2731},"end":{"line":45,"column":14,"offset":2744},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2731},"end":{"line":45,"column":14,"offset":2744},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can only retrieve the oldest element","position":{"start":{"line":47,"column":5,"offset":2752},"end":{"line":47,"column":41,"offset":2788},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2752},"end":{"line":47,"column":41,"offset":2788},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2748},"end":{"line":47,"column":41,"offset":2788},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2748},"end":{"line":47,"column":41,"offset":2788},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-1","children":[],"position":{"start":{"line":49,"column":6,"offset":2797},"end":{"line":49,"column":106,"offset":2897},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":49,"column":106,"offset":2897},"end":{"line":49,"column":118,"offset":2909},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2792},"end":{"line":49,"column":118,"offset":2909},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Effective as a buffer when receiving frequent data","position":{"start":{"line":51,"column":5,"offset":2917},"end":{"line":51,"column":55,"offset":2967},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":2917},"end":{"line":51,"column":55,"offset":2967},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2913},"end":{"line":51,"column":55,"offset":2967},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Convenient way to store order-sensitive data such as stored voicemails","position":{"start":{"line":52,"column":5,"offset":2973},"end":{"line":52,"column":75,"offset":3043},"indent":[]}}],"position":{"start":{"line":52,"column":5,"offset":2973},"end":{"line":52,"column":75,"offset":3043},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2969},"end":{"line":52,"column":75,"offset":3043},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ensures the oldest data is processed first","position":{"start":{"line":53,"column":5,"offset":3049},"end":{"line":53,"column":47,"offset":3091},"indent":[]}}],"position":{"start":{"line":53,"column":5,"offset":3049},"end":{"line":53,"column":47,"offset":3091},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3045},"end":{"line":53,"column":47,"offset":3091},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2913},"end":{"line":53,"column":47,"offset":3091},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":55,"column":1,"offset":3095},"end":{"line":56,"column":1,"offset":3098},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":56,"column":1,"offset":3098},"end":{"line":56,"column":2,"offset":3099},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3095},"end":{"line":56,"column":2,"offset":3099},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#3-linked-list","children":[],"position":{"start":{"line":58,"column":5,"offset":3107},"end":{"line":58,"column":104,"offset":3206},"indent":[]}},{"type":"text","value":"3. Linked List","position":{"start":{"line":58,"column":104,"offset":3206},"end":{"line":58,"column":118,"offset":3220},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3103},"end":{"line":58,"column":118,"offset":3220},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Linked lists are a data structure which, unlike the previous three, does not use physical placement of data in memory. This means that, rather than indexes or positions, linked lists use a referencing system: elements are stored in nodes that contain a pointer to the next node, repeating until all nodes are linked.","position":{"start":{"line":60,"column":1,"offset":3224},"end":{"line":60,"column":317,"offset":3540},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3224},"end":{"line":60,"column":317,"offset":3540},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This system allows efficient insertion and removal of items without the need for reorganization.","position":{"start":{"line":62,"column":1,"offset":3544},"end":{"line":62,"column":97,"offset":3640},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3544},"end":{"line":62,"column":97,"offset":3640},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","alt":"alt-text","position":{"start":{"line":64,"column":2,"offset":3645},"end":{"line":64,"column":279,"offset":3922},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3644},"end":{"line":64,"column":546,"offset":4189},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3644},"end":{"line":64,"column":546,"offset":4189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":66,"column":1,"offset":4193},"end":{"line":66,"column":11,"offset":4203},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4193},"end":{"line":66,"column":11,"offset":4203},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Efficient insertion and removal of new elements","position":{"start":{"line":68,"column":5,"offset":4211},"end":{"line":68,"column":52,"offset":4258},"indent":[]}}],"position":{"start":{"line":68,"column":5,"offset":4211},"end":{"line":68,"column":52,"offset":4258},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4207},"end":{"line":68,"column":52,"offset":4258},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Less complex than restructuring an array","position":{"start":{"line":69,"column":5,"offset":4264},"end":{"line":69,"column":45,"offset":4304},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":4264},"end":{"line":69,"column":45,"offset":4304},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4260},"end":{"line":69,"column":45,"offset":4304},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4207},"end":{"line":69,"column":45,"offset":4304},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":71,"column":1,"offset":4308},"end":{"line":71,"column":14,"offset":4321},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4308},"end":{"line":71,"column":14,"offset":4321},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Uses more memory than arrays","position":{"start":{"line":73,"column":5,"offset":4329},"end":{"line":73,"column":33,"offset":4357},"indent":[]}}],"position":{"start":{"line":73,"column":5,"offset":4329},"end":{"line":73,"column":33,"offset":4357},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4325},"end":{"line":73,"column":33,"offset":4357},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to retrieve a specific element","position":{"start":{"line":74,"column":5,"offset":4363},"end":{"line":74,"column":47,"offset":4405},"indent":[]}}],"position":{"start":{"line":74,"column":5,"offset":4363},"end":{"line":74,"column":47,"offset":4405},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4359},"end":{"line":74,"column":47,"offset":4405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to traverse the list backward","position":{"start":{"line":75,"column":5,"offset":4411},"end":{"line":75,"column":46,"offset":4452},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":4411},"end":{"line":75,"column":46,"offset":4452},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":4407},"end":{"line":75,"column":46,"offset":4452},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4325},"end":{"line":75,"column":46,"offset":4452},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-2","children":[],"position":{"start":{"line":77,"column":6,"offset":4461},"end":{"line":77,"column":106,"offset":4561},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":77,"column":106,"offset":4561},"end":{"line":77,"column":118,"offset":4573},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4456},"end":{"line":77,"column":118,"offset":4573},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best used when data must be added and removed in quick succession from unknown locations","position":{"start":{"line":79,"column":5,"offset":4581},"end":{"line":79,"column":93,"offset":4669},"indent":[]}}],"position":{"start":{"line":79,"column":5,"offset":4581},"end":{"line":79,"column":93,"offset":4669},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4577},"end":{"line":79,"column":93,"offset":4669},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4577},"end":{"line":79,"column":93,"offset":4669},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":81,"column":1,"offset":4673},"end":{"line":82,"column":1,"offset":4676},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":82,"column":1,"offset":4676},"end":{"line":82,"column":2,"offset":4677},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4673},"end":{"line":82,"column":2,"offset":4677},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#4-trees","children":[],"position":{"start":{"line":84,"column":5,"offset":4685},"end":{"line":84,"column":98,"offset":4778},"indent":[]}},{"type":"text","value":"4. Trees","position":{"start":{"line":84,"column":98,"offset":4778},"end":{"line":84,"column":106,"offset":4786},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":4681},"end":{"line":84,"column":106,"offset":4786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Trees are another relation-based data structure, which specialize in representing hierarchical structures. Like a linked list, nodes contain both elements of data and pointers marking its relation to immediate nodes.","position":{"start":{"line":86,"column":1,"offset":4790},"end":{"line":86,"column":217,"offset":5006},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4790},"end":{"line":86,"column":217,"offset":5006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each tree has a “root” node, off of which all other nodes branch. The root contains references to all elements directly below it, which are known as its “child nodes”. This continues, with each child node, branching off into more child nodes.","position":{"start":{"line":88,"column":1,"offset":5010},"end":{"line":88,"column":243,"offset":5252},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":5010},"end":{"line":88,"column":243,"offset":5252},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes. A common type of tree is the “binary search tree” which is used to easily search stored data.","position":{"start":{"line":90,"column":1,"offset":5256},"end":{"line":90,"column":202,"offset":5457},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5256},"end":{"line":90,"column":202,"offset":5457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These search operations are highly efficient, as its search duration is dependent not on the number of nodes but on the number of levels down the tree.","position":{"start":{"line":92,"column":1,"offset":5461},"end":{"line":92,"column":152,"offset":5612},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":5461},"end":{"line":92,"column":152,"offset":5612},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","alt":"alt-text","position":{"start":{"line":94,"column":2,"offset":5617},"end":{"line":94,"column":279,"offset":5894},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5616},"end":{"line":94,"column":546,"offset":6161},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5616},"end":{"line":94,"column":546,"offset":6161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This type of tree is defined by four strict rules:","position":{"start":{"line":96,"column":1,"offset":6165},"end":{"line":96,"column":51,"offset":6215},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":6165},"end":{"line":96,"column":51,"offset":6215},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The left subtree contains only nodes with elements lesser than the root.","position":{"start":{"line":98,"column":4,"offset":6222},"end":{"line":98,"column":76,"offset":6294},"indent":[]}}],"position":{"start":{"line":98,"column":4,"offset":6222},"end":{"line":98,"column":76,"offset":6294},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6219},"end":{"line":98,"column":76,"offset":6294},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The right subtree contains only nodes with elements greater than the root.","position":{"start":{"line":99,"column":4,"offset":6299},"end":{"line":99,"column":78,"offset":6373},"indent":[]}}],"position":{"start":{"line":99,"column":4,"offset":6299},"end":{"line":99,"column":78,"offset":6373},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":6296},"end":{"line":99,"column":78,"offset":6373},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Left and right subtrees must also be a binary search tree. They must follow the above rules with the “root” of their tree.","position":{"start":{"line":100,"column":4,"offset":6378},"end":{"line":100,"column":126,"offset":6500},"indent":[]}}],"position":{"start":{"line":100,"column":4,"offset":6378},"end":{"line":100,"column":126,"offset":6500},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":6375},"end":{"line":100,"column":126,"offset":6500},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There can be no duplicate nodes, i.e. no two nodes can have the same value.","position":{"start":{"line":101,"column":4,"offset":6505},"end":{"line":101,"column":79,"offset":6580},"indent":[]}}],"position":{"start":{"line":101,"column":4,"offset":6505},"end":{"line":101,"column":79,"offset":6580},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":6502},"end":{"line":101,"column":79,"offset":6580},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6219},"end":{"line":101,"column":79,"offset":6580},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":103,"column":1,"offset":6584},"end":{"line":103,"column":11,"offset":6594},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":6584},"end":{"line":103,"column":11,"offset":6594},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ideal for storing hierarchical relationships","position":{"start":{"line":105,"column":5,"offset":6602},"end":{"line":105,"column":49,"offset":6646},"indent":[]}}],"position":{"start":{"line":105,"column":5,"offset":6602},"end":{"line":105,"column":49,"offset":6646},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6598},"end":{"line":105,"column":49,"offset":6646},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":106,"column":5,"offset":6652},"end":{"line":106,"column":17,"offset":6664},"indent":[]}}],"position":{"start":{"line":106,"column":5,"offset":6652},"end":{"line":106,"column":17,"offset":6664},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":6648},"end":{"line":106,"column":17,"offset":6664},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Quick at insert and delete operations","position":{"start":{"line":107,"column":5,"offset":6670},"end":{"line":107,"column":42,"offset":6707},"indent":[]}}],"position":{"start":{"line":107,"column":5,"offset":6670},"end":{"line":107,"column":42,"offset":6707},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6666},"end":{"line":107,"column":42,"offset":6707},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In a binary search tree, inserted nodes are sequenced immediately.","position":{"start":{"line":108,"column":5,"offset":6713},"end":{"line":108,"column":71,"offset":6779},"indent":[]}}],"position":{"start":{"line":108,"column":5,"offset":6713},"end":{"line":108,"column":71,"offset":6779},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":6709},"end":{"line":108,"column":71,"offset":6779},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are efficient at searches; length is only O(height)O(height).","position":{"start":{"line":109,"column":5,"offset":6785},"end":{"line":109,"column":86,"offset":6866},"indent":[]}}],"position":{"start":{"line":109,"column":5,"offset":6785},"end":{"line":109,"column":86,"offset":6866},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6781},"end":{"line":109,"column":86,"offset":6866},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6598},"end":{"line":109,"column":86,"offset":6866},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":111,"column":1,"offset":6870},"end":{"line":111,"column":14,"offset":6883},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":6870},"end":{"line":111,"column":14,"offset":6883},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Slow to rearrange nodes","position":{"start":{"line":113,"column":5,"offset":6891},"end":{"line":113,"column":28,"offset":6914},"indent":[]}}],"position":{"start":{"line":113,"column":5,"offset":6891},"end":{"line":113,"column":28,"offset":6914},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6887},"end":{"line":113,"column":28,"offset":6914},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Child nodes hold no information about their parent node","position":{"start":{"line":114,"column":5,"offset":6920},"end":{"line":114,"column":60,"offset":6975},"indent":[]}}],"position":{"start":{"line":114,"column":5,"offset":6920},"end":{"line":114,"column":60,"offset":6975},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":6916},"end":{"line":114,"column":60,"offset":6975},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are not as fast as the more complicated hash table","position":{"start":{"line":115,"column":5,"offset":6981},"end":{"line":115,"column":75,"offset":7051},"indent":[]}}],"position":{"start":{"line":115,"column":5,"offset":6981},"end":{"line":115,"column":75,"offset":7051},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6977},"end":{"line":115,"column":75,"offset":7051},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees can degenerate into linear search (scanning all elements) if not implemented with balanced subtrees.","position":{"start":{"line":116,"column":5,"offset":7057},"end":{"line":116,"column":125,"offset":7177},"indent":[]}}],"position":{"start":{"line":116,"column":5,"offset":7057},"end":{"line":116,"column":125,"offset":7177},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":7053},"end":{"line":116,"column":125,"offset":7177},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6887},"end":{"line":116,"column":125,"offset":7177},"indent":[1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-3","children":[],"position":{"start":{"line":118,"column":6,"offset":7186},"end":{"line":118,"column":106,"offset":7286},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":118,"column":106,"offset":7286},"end":{"line":118,"column":118,"offset":7298},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":7181},"end":{"line":118,"column":118,"offset":7298},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Storing hierarchical data such as a file location.","position":{"start":{"line":120,"column":5,"offset":7306},"end":{"line":120,"column":55,"offset":7356},"indent":[]}}],"position":{"start":{"line":120,"column":5,"offset":7306},"end":{"line":120,"column":55,"offset":7356},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7302},"end":{"line":120,"column":55,"offset":7356},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are excellent for tasks needing searching or ordering of data.","position":{"start":{"line":121,"column":5,"offset":7362},"end":{"line":121,"column":87,"offset":7444},"indent":[]}}],"position":{"start":{"line":121,"column":5,"offset":7362},"end":{"line":121,"column":87,"offset":7444},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":7358},"end":{"line":121,"column":87,"offset":7444},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7302},"end":{"line":121,"column":87,"offset":7444},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"*","position":{"start":{"line":123,"column":5,"offset":7452},"end":{"line":123,"column":7,"offset":7454},"indent":[]}},{"type":"text","value":"Enjoying the article?","position":{"start":{"line":123,"column":7,"offset":7454},"end":{"line":123,"column":28,"offset":7475},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7450},"end":{"line":123,"column":30,"offset":7477},"indent":[]}},{"type":"text","value":" Scroll down to","position":{"start":{"line":123,"column":30,"offset":7477},"end":{"line":123,"column":45,"offset":7492},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":123,"column":45,"offset":7492},"end":{"line":123,"column":47,"offset":7494},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":47,"offset":7494},"end":{"line":123,"column":48,"offset":7495},"indent":[]}},{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://www.educative.io/blog/blog-newsletter-annoucement","children":[{"type":"text","value":"sign up","position":{"start":{"line":123,"column":50,"offset":7497},"end":{"line":123,"column":57,"offset":7504},"indent":[]}}],"position":{"start":{"line":123,"column":49,"offset":7496},"end":{"line":123,"column":117,"offset":7564},"indent":[]}}],"position":{"start":{"line":123,"column":48,"offset":7495},"end":{"line":123,"column":118,"offset":7565},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":118,"offset":7565},"end":{"line":123,"column":119,"offset":7566},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"for our free, bi-monthly newsletter.","position":{"start":{"line":123,"column":120,"offset":7567},"end":{"line":123,"column":156,"offset":7603},"indent":[]}}],"position":{"start":{"line":123,"column":119,"offset":7566},"end":{"line":123,"column":157,"offset":7604},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7450},"end":{"line":123,"column":157,"offset":7604},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":7448},"end":{"line":123,"column":157,"offset":7604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":125,"column":1,"offset":7608},"end":{"line":125,"column":2,"offset":7609},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":7608},"end":{"line":125,"column":2,"offset":7609},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#5-graphs","children":[],"position":{"start":{"line":127,"column":5,"offset":7617},"end":{"line":127,"column":99,"offset":7711},"indent":[]}},{"type":"text","value":"5. Graphs","position":{"start":{"line":127,"column":99,"offset":7711},"end":{"line":127,"column":108,"offset":7720},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":7613},"end":{"line":127,"column":108,"offset":7720},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphs are a relation-based data structure helpful for storing web-like relationships. Each node, or vertex, as they’re called in graphs, has a title (A, B, C, etc.), a value contained within, and a list of links (called edges) it has with other vertices.","position":{"start":{"line":129,"column":1,"offset":7724},"end":{"line":129,"column":256,"offset":7979},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":7724},"end":{"line":129,"column":256,"offset":7979},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","alt":"alt-text","position":{"start":{"line":131,"column":2,"offset":7984},"end":{"line":131,"column":279,"offset":8261},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7983},"end":{"line":131,"column":546,"offset":8528},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7983},"end":{"line":131,"column":546,"offset":8528},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, each circle is a vertex, and each line is an edge. If produced in writing, this structure would look like:","position":{"start":{"line":133,"column":1,"offset":8532},"end":{"line":133,"column":129,"offset":8660},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":8532},"end":{"line":133,"column":129,"offset":8660},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"V = {a, b, c, d}","position":{"start":{"line":135,"column":2,"offset":8665},"end":{"line":135,"column":18,"offset":8681},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8664},"end":{"line":135,"column":19,"offset":8682},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8664},"end":{"line":135,"column":19,"offset":8682},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"E = {ab, ac, bc, cd}","position":{"start":{"line":137,"column":2,"offset":8687},"end":{"line":137,"column":22,"offset":8707},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8686},"end":{"line":137,"column":23,"offset":8708},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8686},"end":{"line":137,"column":23,"offset":8708},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While hard to visualize at first, this structure is invaluable in conveying relationship charts in textual form, anything from circuitry to train networks.","position":{"start":{"line":139,"column":1,"offset":8712},"end":{"line":139,"column":156,"offset":8867},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":8712},"end":{"line":139,"column":156,"offset":8867},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":141,"column":1,"offset":8871},"end":{"line":141,"column":11,"offset":8881},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":8871},"end":{"line":141,"column":11,"offset":8881},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can quickly convey visuals over text","position":{"start":{"line":143,"column":5,"offset":8889},"end":{"line":143,"column":41,"offset":8925},"indent":[]}}],"position":{"start":{"line":143,"column":5,"offset":8889},"end":{"line":143,"column":41,"offset":8925},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8885},"end":{"line":143,"column":41,"offset":8925},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Usable to model a diverse number of subjects so long as they contain a relational structure","position":{"start":{"line":144,"column":5,"offset":8931},"end":{"line":144,"column":96,"offset":9022},"indent":[]}}],"position":{"start":{"line":144,"column":5,"offset":8931},"end":{"line":144,"column":96,"offset":9022},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":8927},"end":{"line":144,"column":96,"offset":9022},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8885},"end":{"line":144,"column":96,"offset":9022},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":146,"column":1,"offset":9026},"end":{"line":146,"column":14,"offset":9039},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":9026},"end":{"line":146,"column":14,"offset":9039},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"At a higher level, text can be time-consuming to convert to an image.","position":{"start":{"line":148,"column":5,"offset":9047},"end":{"line":148,"column":74,"offset":9116},"indent":[]}}],"position":{"start":{"line":148,"column":5,"offset":9047},"end":{"line":148,"column":74,"offset":9116},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":9043},"end":{"line":148,"column":74,"offset":9116},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It can be difficult to see the existing edges or how many edges a given vertex has connected to it","position":{"start":{"line":149,"column":5,"offset":9122},"end":{"line":149,"column":103,"offset":9220},"indent":[]}}],"position":{"start":{"line":149,"column":5,"offset":9122},"end":{"line":149,"column":103,"offset":9220},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":9118},"end":{"line":149,"column":103,"offset":9220},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":9043},"end":{"line":149,"column":103,"offset":9220},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-4","children":[],"position":{"start":{"line":151,"column":6,"offset":9229},"end":{"line":151,"column":106,"offset":9329},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":151,"column":106,"offset":9329},"end":{"line":151,"column":118,"offset":9341},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":9224},"end":{"line":151,"column":118,"offset":9341},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Network representations","position":{"start":{"line":153,"column":5,"offset":9349},"end":{"line":153,"column":28,"offset":9372},"indent":[]}}],"position":{"start":{"line":153,"column":5,"offset":9349},"end":{"line":153,"column":28,"offset":9372},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9345},"end":{"line":153,"column":28,"offset":9372},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modeling social networks, such as Facebook.","position":{"start":{"line":154,"column":5,"offset":9378},"end":{"line":154,"column":48,"offset":9421},"indent":[]}}],"position":{"start":{"line":154,"column":5,"offset":9378},"end":{"line":154,"column":48,"offset":9421},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":9374},"end":{"line":154,"column":48,"offset":9421},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9345},"end":{"line":154,"column":48,"offset":9421},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":156,"column":1,"offset":9425},"end":{"line":156,"column":2,"offset":9426},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":9425},"end":{"line":156,"column":2,"offset":9426},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#6-hash-tables-map","children":[],"position":{"start":{"line":158,"column":5,"offset":9434},"end":{"line":158,"column":108,"offset":9537},"indent":[]}},{"type":"text","value":"6. Hash Tables (Map)","position":{"start":{"line":158,"column":108,"offset":9537},"end":{"line":158,"column":128,"offset":9557},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":9430},"end":{"line":158,"column":128,"offset":9557},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hash tables are a complex data structure capable of storing large amounts of information and retrieving specific elements efficiently. This data structure relies on the concept of key/value pairs, where the “key” is a searched string and the “value” is the data paired with that key.","position":{"start":{"line":160,"column":1,"offset":9561},"end":{"line":160,"column":284,"offset":9844},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":9561},"end":{"line":160,"column":284,"offset":9844},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","alt":"alt-text","position":{"start":{"line":162,"column":2,"offset":9849},"end":{"line":162,"column":279,"offset":10126},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9848},"end":{"line":162,"column":546,"offset":10393},"indent":[]}},{"type":"text","value":" Each searched key is converted from its string form into a numerical value, called a hash, using a predefined hash function. This hash then points to a storage bucket – a smaller subgroup within the table. It then searches the bucket for the originally entered key and returns the value associated with that key.","position":{"start":{"line":162,"column":546,"offset":10393},"end":{"line":162,"column":859,"offset":10706},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9848},"end":{"line":162,"column":859,"offset":10706},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":164,"column":1,"offset":10710},"end":{"line":164,"column":11,"offset":10720},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":10710},"end":{"line":164,"column":11,"offset":10720},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Key can be in any form, while array’s indices must be integers","position":{"start":{"line":166,"column":5,"offset":10728},"end":{"line":166,"column":67,"offset":10790},"indent":[]}}],"position":{"start":{"line":166,"column":5,"offset":10728},"end":{"line":166,"column":67,"offset":10790},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10724},"end":{"line":166,"column":67,"offset":10790},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Highly efficient search function","position":{"start":{"line":167,"column":5,"offset":10796},"end":{"line":167,"column":37,"offset":10828},"indent":[]}}],"position":{"start":{"line":167,"column":5,"offset":10796},"end":{"line":167,"column":37,"offset":10828},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":10792},"end":{"line":167,"column":37,"offset":10828},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant number of operations for each search","position":{"start":{"line":168,"column":5,"offset":10834},"end":{"line":168,"column":50,"offset":10879},"indent":[]}}],"position":{"start":{"line":168,"column":5,"offset":10834},"end":{"line":168,"column":50,"offset":10879},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":10830},"end":{"line":168,"column":50,"offset":10879},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant cost for insertion or deletion operations","position":{"start":{"line":169,"column":5,"offset":10885},"end":{"line":169,"column":55,"offset":10935},"indent":[]}}],"position":{"start":{"line":169,"column":5,"offset":10885},"end":{"line":169,"column":55,"offset":10935},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":10881},"end":{"line":169,"column":55,"offset":10935},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10724},"end":{"line":169,"column":55,"offset":10935},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":171,"column":1,"offset":10939},"end":{"line":171,"column":14,"offset":10952},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":10939},"end":{"line":171,"column":14,"offset":10952},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Collisions: an error caused when two keys convert to the same hash code or two hash codes point to the same value.","position":{"start":{"line":173,"column":5,"offset":10960},"end":{"line":173,"column":119,"offset":11074},"indent":[]}}],"position":{"start":{"line":173,"column":5,"offset":10960},"end":{"line":173,"column":119,"offset":11074},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10956},"end":{"line":173,"column":119,"offset":11074},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These errors can be common and often require an overhaul of the hash function.","position":{"start":{"line":174,"column":5,"offset":11080},"end":{"line":174,"column":83,"offset":11158},"indent":[]}}],"position":{"start":{"line":174,"column":5,"offset":11080},"end":{"line":174,"column":83,"offset":11158},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":11076},"end":{"line":174,"column":83,"offset":11158},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10956},"end":{"line":174,"column":83,"offset":11158},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-5","children":[],"position":{"start":{"line":176,"column":6,"offset":11167},"end":{"line":176,"column":106,"offset":11267},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":176,"column":106,"offset":11267},"end":{"line":176,"column":118,"offset":11279},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":11162},"end":{"line":176,"column":118,"offset":11279},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Database storage","position":{"start":{"line":178,"column":5,"offset":11287},"end":{"line":178,"column":21,"offset":11303},"indent":[]}}],"position":{"start":{"line":178,"column":5,"offset":11287},"end":{"line":178,"column":21,"offset":11303},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":11283},"end":{"line":178,"column":21,"offset":11303},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Address lookups by name","position":{"start":{"line":179,"column":5,"offset":11309},"end":{"line":179,"column":28,"offset":11332},"indent":[]}}],"position":{"start":{"line":179,"column":5,"offset":11309},"end":{"line":179,"column":28,"offset":11332},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":11305},"end":{"line":179,"column":28,"offset":11332},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":11283},"end":{"line":179,"column":28,"offset":11332},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Each hash table can be very different, from the types of the keys and values, to the way their hash functions work. Due to these differences and the multi-layered aspects of a hash table, it is nearly impossible to encapsulate so generally.","position":{"start":{"line":181,"column":1,"offset":11336},"end":{"line":181,"column":241,"offset":11576},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":11336},"end":{"line":181,"column":241,"offset":11576},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":183,"column":1,"offset":11580},"end":{"line":184,"column":1,"offset":11583},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":184,"column":1,"offset":11583},"end":{"line":184,"column":2,"offset":11584},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":11580},"end":{"line":184,"column":2,"offset":11584},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#data-structure-interview-questions","children":[],"position":{"start":{"line":186,"column":5,"offset":11592},"end":{"line":186,"column":125,"offset":11712},"indent":[]}},{"type":"text","value":"Data structure interview questions","position":{"start":{"line":186,"column":125,"offset":11712},"end":{"line":186,"column":159,"offset":11746},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":11588},"end":{"line":186,"column":159,"offset":11746},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For many developers and programmers, data structures are most important for ","position":{"start":{"line":188,"column":1,"offset":11750},"end":{"line":188,"column":77,"offset":11826},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/acing-the-javascript-interview-top-questions-explained","children":[{"type":"text","value":"cracking Javascript coding interviews","position":{"start":{"line":188,"column":78,"offset":11827},"end":{"line":188,"column":115,"offset":11864},"indent":[]}}],"position":{"start":{"line":188,"column":77,"offset":11826},"end":{"line":188,"column":202,"offset":11951},"indent":[]}},{"type":"text","value":". Questions and problems on data structures are fundamental to modern-day coding interviews. In fact, they have a lot to say over your hireability and entry-level rate as a candidate.","position":{"start":{"line":188,"column":202,"offset":11951},"end":{"line":188,"column":385,"offset":12134},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":11750},"end":{"line":188,"column":385,"offset":12134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Today, we will be going over seven common coding interview questions for JavaScript data structures, one for each of the data structures we discussed above. Each will also discuss its time complexity based on the ","position":{"start":{"line":190,"column":1,"offset":12138},"end":{"line":190,"column":214,"offset":12351},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/a-big-o-primer-for-beginning-devs","children":[{"type":"text","value":"BigO notation","position":{"start":{"line":190,"column":215,"offset":12352},"end":{"line":190,"column":228,"offset":12365},"indent":[]}}],"position":{"start":{"line":190,"column":214,"offset":12351},"end":{"line":190,"column":294,"offset":12431},"indent":[]}},{"type":"text","value":" theory.","position":{"start":{"line":190,"column":294,"offset":12431},"end":{"line":190,"column":302,"offset":12439},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":12138},"end":{"line":190,"column":302,"offset":12439},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":192,"column":1,"offset":12443},"end":{"line":192,"column":2,"offset":12444},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":12443},"end":{"line":192,"column":2,"offset":12444},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#array-remove-all-even-integers-from-an-array","children":[],"position":{"start":{"line":194,"column":6,"offset":12453},"end":{"line":194,"column":136,"offset":12583},"indent":[]}},{"type":"text","value":"Array: Remove all even integers from an array","position":{"start":{"line":194,"column":136,"offset":12583},"end":{"line":194,"column":181,"offset":12628},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":12448},"end":{"line":194,"column":181,"offset":12628},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":196,"column":3,"offset":12634},"end":{"line":196,"column":21,"offset":12652},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12632},"end":{"line":196,"column":23,"offset":12654},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":196,"column":23,"offset":12654},"end":{"line":196,"column":45,"offset":12676},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">removeEven(arr)</code>","position":{"start":{"line":196,"column":45,"offset":12676},"end":{"line":196,"column":62,"offset":12693},"indent":[]}},{"type":"text","value":", which takes an array arr in its input and removes all the even elements from a given array.","position":{"start":{"line":196,"column":62,"offset":12693},"end":{"line":196,"column":155,"offset":12786},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12632},"end":{"line":196,"column":155,"offset":12786},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":198,"column":3,"offset":12792},"end":{"line":198,"column":9,"offset":12798},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12790},"end":{"line":198,"column":11,"offset":12800},"indent":[]}},{"type":"text","value":" An array of random integers","position":{"start":{"line":198,"column":11,"offset":12800},"end":{"line":198,"column":39,"offset":12828},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12790},"end":{"line":198,"column":39,"offset":12828},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":200,"column":1,"offset":12832},"end":{"line":202,"column":4,"offset":12842},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":204,"column":3,"offset":12848},"end":{"line":204,"column":10,"offset":12855},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12846},"end":{"line":204,"column":12,"offset":12857},"indent":[]}},{"type":"text","value":" an array containing only odd integers","position":{"start":{"line":204,"column":12,"offset":12857},"end":{"line":204,"column":50,"offset":12895},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12846},"end":{"line":204,"column":50,"offset":12895},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":206,"column":1,"offset":12899},"end":{"line":208,"column":4,"offset":12909},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are two ways you could solve this coding problem in an interview. Let’s discuss each.","position":{"start":{"line":210,"column":1,"offset":12913},"end":{"line":210,"column":92,"offset":13004},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":12913},"end":{"line":210,"column":92,"offset":13004},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":212,"column":1,"offset":13008},"end":{"line":212,"column":2,"offset":13009},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":13008},"end":{"line":212,"column":2,"offset":13009},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #1: Doing it “by hand”","position":{"start":{"line":214,"column":3,"offset":13015},"end":{"line":214,"column":34,"offset":13046},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":13013},"end":{"line":214,"column":36,"offset":13048},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":13013},"end":{"line":214,"column":36,"offset":13048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789function removeEven(arr) { var odds = ","position":{"start":{"line":216,"column":1,"offset":13052},"end":{"line":216,"column":48,"offset":13099},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":48,"offset":13099},"end":{"line":216,"column":50,"offset":13101},"indent":[]}},{"type":"text","value":"] for (let number of arr) { if (number % 2 != 0) // Check if the item in the list is NOT even ('%' is the modulus symbol!) odds.push(number) //If it isn't even append it to the empty list } return odds // Return the new list}console.log(removeEven(","position":{"start":{"line":216,"column":50,"offset":13101},"end":{"line":216,"column":298,"offset":13349},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":298,"offset":13349},"end":{"line":216,"column":300,"offset":13351},"indent":[]}},{"type":"text","value":"3, 2, 41, 3, 34]))Run","position":{"start":{"line":216,"column":300,"offset":13351},"end":{"line":216,"column":321,"offset":13372},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":13052},"end":{"line":216,"column":321,"offset":13372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This approach starts with the first element of the array. If that current element is not even, it pushes this element into a new array. If it is even, it will move to the next element, repeating until it reaches the end of the array. In regards to time complexity, since the entire array has to be iterated over, this solution is in ","position":{"start":{"line":218,"column":1,"offset":13376},"end":{"line":218,"column":334,"offset":13709},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n).","position":{"start":{"line":218,"column":335,"offset":13710},"end":{"line":218,"column":344,"offset":13719},"indent":[]}}],"position":{"start":{"line":218,"column":334,"offset":13709},"end":{"line":218,"column":345,"offset":13720},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":13376},"end":{"line":218,"column":345,"offset":13720},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":220,"column":1,"offset":13724},"end":{"line":220,"column":2,"offset":13725},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":13724},"end":{"line":220,"column":2,"offset":13725},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #2: Using filter() and lambda function","position":{"start":{"line":222,"column":3,"offset":13731},"end":{"line":222,"column":50,"offset":13778},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13729},"end":{"line":222,"column":52,"offset":13780},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13729},"end":{"line":222,"column":52,"offset":13780},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"1234function removeEven(arr) { return arr.filter((v => (v % 2) != 0))}console.log(removeEven(","position":{"start":{"line":224,"column":1,"offset":13784},"end":{"line":224,"column":94,"offset":13877},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":224,"column":94,"offset":13877},"end":{"line":224,"column":96,"offset":13879},"indent":[]}},{"type":"text","value":"3,2,41,3,34]))","position":{"start":{"line":224,"column":96,"offset":13879},"end":{"line":224,"column":110,"offset":13893},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":13784},"end":{"line":224,"column":110,"offset":13893},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution also begins with the first element and checks if it is even. If it is even, it filters out this element. If not, skips to the next element, repeating this process until it reaches the end of the array.","position":{"start":{"line":226,"column":1,"offset":13897},"end":{"line":226,"column":216,"offset":14112},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":13897},"end":{"line":226,"column":216,"offset":14112},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The filter function uses lambda or arrow functions, which use shorter, simpler syntax. The filter filters out the element for which the lambda function returns false. The time complexity of this is the same as the time complexity of the previous solution.","position":{"start":{"line":228,"column":1,"offset":14116},"end":{"line":228,"column":256,"offset":14371},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":14116},"end":{"line":228,"column":256,"offset":14371},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":230,"column":1,"offset":14375},"end":{"line":230,"column":2,"offset":14376},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":14375},"end":{"line":230,"column":2,"offset":14376},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#stack-check-for-balanced-parentheses-using-a-stack","children":[],"position":{"start":{"line":232,"column":6,"offset":14385},"end":{"line":232,"column":142,"offset":14521},"indent":[]}},{"type":"text","value":"Stack: Check for balanced parentheses using a stack","position":{"start":{"line":232,"column":142,"offset":14521},"end":{"line":232,"column":193,"offset":14572},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":14380},"end":{"line":232,"column":193,"offset":14572},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":234,"column":3,"offset":14578},"end":{"line":234,"column":21,"offset":14596},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14576},"end":{"line":234,"column":23,"offset":14598},"indent":[]}},{"type":"text","value":" Implement the ","position":{"start":{"line":234,"column":23,"offset":14598},"end":{"line":234,"column":38,"offset":14613},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">isBalanced()</code>","position":{"start":{"line":234,"column":38,"offset":14613},"end":{"line":234,"column":52,"offset":14627},"indent":[]}},{"type":"text","value":" function to take a string containing only curly ","position":{"start":{"line":234,"column":52,"offset":14627},"end":{"line":234,"column":101,"offset":14676},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":234,"column":101,"offset":14676},"end":{"line":234,"column":105,"offset":14680},"indent":[]}},{"type":"text","value":", square ","position":{"start":{"line":234,"column":105,"offset":14680},"end":{"line":234,"column":114,"offset":14689},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":234,"column":114,"offset":14689},"end":{"line":234,"column":118,"offset":14693},"indent":[]}},{"type":"text","value":", and round ","position":{"start":{"line":234,"column":118,"offset":14693},"end":{"line":234,"column":130,"offset":14705},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">()</code>","position":{"start":{"line":234,"column":130,"offset":14705},"end":{"line":234,"column":134,"offset":14709},"indent":[]}},{"type":"text","value":" parentheses. The function should tell us if all the parentheses in the string are balanced. This means that every opening parenthesis will have a closing one. For example, ","position":{"start":{"line":234,"column":134,"offset":14709},"end":{"line":234,"column":307,"offset":14882},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{[]}</code>","position":{"start":{"line":234,"column":307,"offset":14882},"end":{"line":234,"column":313,"offset":14888},"indent":[]}},{"type":"text","value":" is balanced, but ","position":{"start":{"line":234,"column":313,"offset":14888},"end":{"line":234,"column":331,"offset":14906},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{[}]</code>","position":{"start":{"line":234,"column":331,"offset":14906},"end":{"line":234,"column":337,"offset":14912},"indent":[]}},{"type":"text","value":" is not.","position":{"start":{"line":234,"column":337,"offset":14912},"end":{"line":234,"column":345,"offset":14920},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14576},"end":{"line":234,"column":345,"offset":14920},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":236,"column":3,"offset":14926},"end":{"line":236,"column":9,"offset":14932},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14924},"end":{"line":236,"column":11,"offset":14934},"indent":[]}},{"type":"text","value":" A string consisting solely of ","position":{"start":{"line":236,"column":11,"offset":14934},"end":{"line":236,"column":42,"offset":14965},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(</code>","position":{"start":{"line":236,"column":42,"offset":14965},"end":{"line":236,"column":45,"offset":14968},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":45,"offset":14968},"end":{"line":236,"column":47,"offset":14970},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">)</code>","position":{"start":{"line":236,"column":47,"offset":14970},"end":{"line":236,"column":50,"offset":14973},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":50,"offset":14973},"end":{"line":236,"column":52,"offset":14975},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{</code>","position":{"start":{"line":236,"column":52,"offset":14975},"end":{"line":236,"column":55,"offset":14978},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":55,"offset":14978},"end":{"line":236,"column":57,"offset":14980},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">}</code>","position":{"start":{"line":236,"column":57,"offset":14980},"end":{"line":236,"column":60,"offset":14983},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":60,"offset":14983},"end":{"line":236,"column":62,"offset":14985},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[</code>","position":{"start":{"line":236,"column":62,"offset":14985},"end":{"line":236,"column":65,"offset":14988},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":236,"column":65,"offset":14988},"end":{"line":236,"column":70,"offset":14993},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">]</code>","position":{"start":{"line":236,"column":70,"offset":14993},"end":{"line":236,"column":73,"offset":14996},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14924},"end":{"line":236,"column":73,"offset":14996},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":238,"column":1,"offset":15000},"end":{"line":240,"column":4,"offset":15010},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":242,"column":3,"offset":15016},"end":{"line":242,"column":10,"offset":15023},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":15014},"end":{"line":242,"column":12,"offset":15025},"indent":[]}},{"type":"text","value":" Returns ","position":{"start":{"line":242,"column":12,"offset":15025},"end":{"line":242,"column":21,"offset":15034},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":242,"column":21,"offset":15034},"end":{"line":242,"column":28,"offset":15041},"indent":[]}},{"type":"text","value":" if the expression doesn’t have balanced parentheses. If it does, the function returns ","position":{"start":{"line":242,"column":28,"offset":15041},"end":{"line":242,"column":115,"offset":15128},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">True</code>","position":{"start":{"line":242,"column":115,"offset":15128},"end":{"line":242,"column":121,"offset":15134},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":242,"column":121,"offset":15134},"end":{"line":242,"column":122,"offset":15135},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":15014},"end":{"line":242,"column":122,"offset":15135},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":244,"column":1,"offset":15139},"end":{"line":246,"column":4,"offset":15149},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we can simply use a stack of characters. Look below at the code to see how it works.","position":{"start":{"line":248,"column":1,"offset":15153},"end":{"line":248,"column":108,"offset":15260},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":15153},"end":{"line":248,"column":108,"offset":15260},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsStack.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Stack { constructor() { this.items = ","position":{"start":{"line":250,"column":1,"offset":15264},"end":{"line":250,"column":143,"offset":15406},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":250,"column":143,"offset":15406},"end":{"line":250,"column":145,"offset":15408},"indent":[]}},{"type":"text","value":"]; this.top = null; } getTop() { if (this.items.length == 0) return null; return this.top; } isEmpty() { return this.items.length == 0; } size() { return this.items.length; } push(element) { this.items.push(element); this.top = element; } pop() { if (this.items.length != 0) { if (this.items.length == 1) { this.top = null; return this.items.pop();Run","position":{"start":{"line":250,"column":145,"offset":15408},"end":{"line":250,"column":496,"offset":15759},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":15264},"end":{"line":250,"column":496,"offset":15759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This process will iterate over the string one character at a time. We can determine that the string is unbalanced based on two factors:","position":{"start":{"line":252,"column":1,"offset":15763},"end":{"line":252,"column":136,"offset":15898},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":15763},"end":{"line":252,"column":136,"offset":15898},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The stack is empty.","position":{"start":{"line":254,"column":4,"offset":15905},"end":{"line":254,"column":23,"offset":15924},"indent":[]}}],"position":{"start":{"line":254,"column":4,"offset":15905},"end":{"line":254,"column":23,"offset":15924},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15902},"end":{"line":254,"column":23,"offset":15924},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The top element in the stack is not the right type.","position":{"start":{"line":255,"column":4,"offset":15929},"end":{"line":255,"column":55,"offset":15980},"indent":[]}}],"position":{"start":{"line":255,"column":4,"offset":15929},"end":{"line":255,"column":55,"offset":15980},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":15926},"end":{"line":255,"column":55,"offset":15980},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15902},"end":{"line":255,"column":55,"offset":15980},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If either of these conditions is true, we return ","position":{"start":{"line":257,"column":1,"offset":15984},"end":{"line":257,"column":50,"offset":16033},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":257,"column":50,"offset":16033},"end":{"line":257,"column":57,"offset":16040},"indent":[]}},{"type":"text","value":". If the parenthesis is an opening parenthesis, it is pushed into the stack. If by the end all are balanced, the stack will be empty. If it is not empty, we return ","position":{"start":{"line":257,"column":57,"offset":16040},"end":{"line":257,"column":221,"offset":16204},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":257,"column":221,"offset":16204},"end":{"line":257,"column":228,"offset":16211},"indent":[]}},{"type":"text","value":". Since we traverse the string exp only once, the time complexity is ","position":{"start":{"line":257,"column":228,"offset":16211},"end":{"line":257,"column":297,"offset":16280},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":257,"column":298,"offset":16281},"end":{"line":257,"column":302,"offset":16285},"indent":[]}}],"position":{"start":{"line":257,"column":297,"offset":16280},"end":{"line":257,"column":303,"offset":16286},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":257,"column":303,"offset":16286},"end":{"line":257,"column":304,"offset":16287},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":15984},"end":{"line":257,"column":304,"offset":16287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":259,"column":1,"offset":16291},"end":{"line":259,"column":2,"offset":16292},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":16291},"end":{"line":259,"column":2,"offset":16292},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#queue-generate-binary-numbers-from-1-to-n","children":[],"position":{"start":{"line":261,"column":6,"offset":16301},"end":{"line":261,"column":133,"offset":16428},"indent":[]}},{"type":"text","value":"Queue: Generate Binary Numbers from 1 to n","position":{"start":{"line":261,"column":133,"offset":16428},"end":{"line":261,"column":175,"offset":16470},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":16296},"end":{"line":261,"column":175,"offset":16470},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":263,"column":3,"offset":16476},"end":{"line":263,"column":21,"offset":16494},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16474},"end":{"line":263,"column":23,"offset":16496},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":263,"column":23,"offset":16496},"end":{"line":263,"column":45,"offset":16518},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findBin(n)</code>","position":{"start":{"line":263,"column":45,"offset":16518},"end":{"line":263,"column":57,"offset":16530},"indent":[]}},{"type":"text","value":", which will generate binary numbers from ","position":{"start":{"line":263,"column":57,"offset":16530},"end":{"line":263,"column":99,"offset":16572},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":263,"column":99,"offset":16572},"end":{"line":263,"column":102,"offset":16575},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":263,"column":102,"offset":16575},"end":{"line":263,"column":106,"offset":16579},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">n</code>","position":{"start":{"line":263,"column":106,"offset":16579},"end":{"line":263,"column":109,"offset":16582},"indent":[]}},{"type":"text","value":" in the form of a string using a queue.","position":{"start":{"line":263,"column":109,"offset":16582},"end":{"line":263,"column":148,"offset":16621},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16474},"end":{"line":263,"column":148,"offset":16621},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":265,"column":3,"offset":16627},"end":{"line":265,"column":9,"offset":16633},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16625},"end":{"line":265,"column":11,"offset":16635},"indent":[]}},{"type":"text","value":" A positive integer n","position":{"start":{"line":265,"column":11,"offset":16635},"end":{"line":265,"column":32,"offset":16656},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16625},"end":{"line":265,"column":32,"offset":16656},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":267,"column":1,"offset":16660},"end":{"line":269,"column":4,"offset":16670},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":271,"column":3,"offset":16676},"end":{"line":271,"column":10,"offset":16683},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16674},"end":{"line":271,"column":12,"offset":16685},"indent":[]}},{"type":"text","value":" Returns binary numbers in the form of strings from ","position":{"start":{"line":271,"column":12,"offset":16685},"end":{"line":271,"column":64,"offset":16737},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":271,"column":64,"offset":16737},"end":{"line":271,"column":67,"offset":16740},"indent":[]}},{"type":"text","value":" up to ","position":{"start":{"line":271,"column":67,"offset":16740},"end":{"line":271,"column":74,"offset":16747},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">n</code>","position":{"start":{"line":271,"column":74,"offset":16747},"end":{"line":271,"column":77,"offset":16750},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16674},"end":{"line":271,"column":77,"offset":16750},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":273,"column":1,"offset":16754},"end":{"line":275,"column":4,"offset":16764},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is using a queue to generate new numbers from previous numbers. Let’s break that down.","position":{"start":{"line":277,"column":1,"offset":16768},"end":{"line":277,"column":125,"offset":16892},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":16768},"end":{"line":277,"column":125,"offset":16892},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsQueue.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Queue { constructor() { this.items = ","position":{"start":{"line":279,"column":1,"offset":16896},"end":{"line":279,"column":143,"offset":17038},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":143,"offset":17038},"end":{"line":279,"column":145,"offset":17040},"indent":[]}},{"type":"text","value":"]; this.front = null; this.back = null; } isEmpty() { return this.items.length == 0; } getFront() { if (this.items.length != 0) { return this.items","position":{"start":{"line":279,"column":145,"offset":17040},"end":{"line":279,"column":292,"offset":17187},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":292,"offset":17187},"end":{"line":279,"column":294,"offset":17189},"indent":[]}},{"type":"text","value":"0]; } else return null; } size() { return this.items.length; } enqueue(element) { this.items.push(element); }Run","position":{"start":{"line":279,"column":294,"offset":17189},"end":{"line":279,"column":406,"offset":17301},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":16896},"end":{"line":279,"column":406,"offset":17301},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The key is to generate consecutive binary numbers by appending 0 and 1 to previous binary numbers. To clarify,","position":{"start":{"line":281,"column":1,"offset":17305},"end":{"line":281,"column":111,"offset":17415},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":17305},"end":{"line":281,"column":111,"offset":17415},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"10 and 11 can be generated if 0 and 1 are appended to 1.","position":{"start":{"line":283,"column":5,"offset":17423},"end":{"line":283,"column":61,"offset":17479},"indent":[]}}],"position":{"start":{"line":283,"column":5,"offset":17423},"end":{"line":283,"column":61,"offset":17479},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":17419},"end":{"line":283,"column":61,"offset":17479},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"100 and 101 are generated if 0 and 1 are appended to 10.","position":{"start":{"line":284,"column":5,"offset":17485},"end":{"line":284,"column":61,"offset":17541},"indent":[]}}],"position":{"start":{"line":284,"column":5,"offset":17485},"end":{"line":284,"column":61,"offset":17541},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":17481},"end":{"line":284,"column":61,"offset":17541},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":17419},"end":{"line":284,"column":61,"offset":17541},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Once we generate a binary number, it is then enqueued to a queue so that new binary numbers can be generated if we append 0 and 1 when that number will be enqueued.","position":{"start":{"line":286,"column":1,"offset":17545},"end":{"line":286,"column":165,"offset":17709},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":17545},"end":{"line":286,"column":165,"offset":17709},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since a queue follows the ","position":{"start":{"line":288,"column":1,"offset":17713},"end":{"line":288,"column":27,"offset":17739},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"First-In First-Out","position":{"start":{"line":288,"column":28,"offset":17740},"end":{"line":288,"column":46,"offset":17758},"indent":[]}}],"position":{"start":{"line":288,"column":27,"offset":17739},"end":{"line":288,"column":47,"offset":17759},"indent":[]}},{"type":"text","value":" property, the enqueued binary numbers are dequeued so that the resulting array is mathematically correct.","position":{"start":{"line":288,"column":47,"offset":17759},"end":{"line":288,"column":153,"offset":17865},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":17713},"end":{"line":288,"column":153,"offset":17865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Look at the code above. On line 7, ","position":{"start":{"line":290,"column":1,"offset":17869},"end":{"line":290,"column":36,"offset":17904},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":290,"column":36,"offset":17904},"end":{"line":290,"column":39,"offset":17907},"indent":[]}},{"type":"text","value":" is enqueued. To generate the sequence of binary numbers, a number is dequeued and stored in the array ","position":{"start":{"line":290,"column":39,"offset":17907},"end":{"line":290,"column":142,"offset":18010},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">result</code>","position":{"start":{"line":290,"column":142,"offset":18010},"end":{"line":290,"column":150,"offset":18018},"indent":[]}},{"type":"text","value":". On lines 11-12, we append ","position":{"start":{"line":290,"column":150,"offset":18018},"end":{"line":290,"column":178,"offset":18046},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":290,"column":178,"offset":18046},"end":{"line":290,"column":181,"offset":18049},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":290,"column":181,"offset":18049},"end":{"line":290,"column":186,"offset":18054},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":290,"column":186,"offset":18054},"end":{"line":290,"column":189,"offset":18057},"indent":[]}},{"type":"text","value":" to produce the next numbers.","position":{"start":{"line":290,"column":189,"offset":18057},"end":{"line":290,"column":218,"offset":18086},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":17869},"end":{"line":290,"column":218,"offset":18086},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Those new numbers are also enqueued at lines 14-15. The queue will take integer values, so it converts the string to an integer as it is enqueued.","position":{"start":{"line":292,"column":1,"offset":18090},"end":{"line":292,"column":147,"offset":18236},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":18090},"end":{"line":292,"column":147,"offset":18236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The time complexity of this solution is in ","position":{"start":{"line":294,"column":1,"offset":18240},"end":{"line":294,"column":44,"offset":18283},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n)","position":{"start":{"line":294,"column":45,"offset":18284},"end":{"line":294,"column":53,"offset":18292},"indent":[]}}],"position":{"start":{"line":294,"column":44,"offset":18283},"end":{"line":294,"column":54,"offset":18293},"indent":[]}},{"type":"text","value":" since constant-time operations are executed for n times.","position":{"start":{"line":294,"column":54,"offset":18293},"end":{"line":294,"column":111,"offset":18350},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":18240},"end":{"line":294,"column":111,"offset":18350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":296,"column":1,"offset":18354},"end":{"line":296,"column":2,"offset":18355},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":18354},"end":{"line":296,"column":2,"offset":18355},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#linked-list-reverse-a-linked-list","children":[],"position":{"start":{"line":298,"column":6,"offset":18364},"end":{"line":298,"column":125,"offset":18483},"indent":[]}},{"type":"text","value":"Linked List: Reverse a linked list","position":{"start":{"line":298,"column":125,"offset":18483},"end":{"line":298,"column":159,"offset":18517},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":18359},"end":{"line":298,"column":159,"offset":18517},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":300,"column":3,"offset":18523},"end":{"line":300,"column":21,"offset":18541},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18521},"end":{"line":300,"column":23,"offset":18543},"indent":[]}},{"type":"text","value":" Write the ","position":{"start":{"line":300,"column":23,"offset":18543},"end":{"line":300,"column":34,"offset":18554},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">reverse</code>","position":{"start":{"line":300,"column":34,"offset":18554},"end":{"line":300,"column":43,"offset":18563},"indent":[]}},{"type":"text","value":" function to take a singly linked list and reverse it in place.","position":{"start":{"line":300,"column":43,"offset":18563},"end":{"line":300,"column":106,"offset":18626},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18521},"end":{"line":300,"column":106,"offset":18626},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":302,"column":3,"offset":18632},"end":{"line":302,"column":9,"offset":18638},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18630},"end":{"line":302,"column":11,"offset":18640},"indent":[]}},{"type":"text","value":" a singly linked list","position":{"start":{"line":302,"column":11,"offset":18640},"end":{"line":302,"column":32,"offset":18661},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18630},"end":{"line":302,"column":32,"offset":18661},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":304,"column":1,"offset":18665},"end":{"line":306,"column":4,"offset":18675},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":308,"column":3,"offset":18681},"end":{"line":308,"column":10,"offset":18688},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18679},"end":{"line":308,"column":12,"offset":18690},"indent":[]}},{"type":"text","value":" a reverse linked list","position":{"start":{"line":308,"column":12,"offset":18690},"end":{"line":308,"column":34,"offset":18712},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18679},"end":{"line":308,"column":34,"offset":18712},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":310,"column":1,"offset":18716},"end":{"line":312,"column":4,"offset":18726},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is by using iterative pointer manipulation. Let’s take a look.","position":{"start":{"line":314,"column":1,"offset":18730},"end":{"line":314,"column":101,"offset":18830},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":18730},"end":{"line":314,"column":101,"offset":18830},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class LinkedList { constructor() { this.head = null; } //Insertion At Head insertAtHead(newData) { let tempNode = new Node(newData); tempNode.nextElement = this.head; this.head = tempNode; return this; //returning the updated list } isEmpty() { return (this.head == null); } //function to print the linked list printList() { if (this.isEmpty()) { console.log(\"Empty List\"); return false; } else { let temp = this.head; while (temp != null) { process.stdout.write(String(temp.data)); process.stdout.write(\" -> \"); temp = temp.nextElement;Run","position":{"start":{"line":316,"column":1,"offset":18834},"end":{"line":316,"column":686,"offset":19519},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":18834},"end":{"line":316,"column":686,"offset":19519},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use a loop to iterate through the input list. For a ","position":{"start":{"line":318,"column":1,"offset":19523},"end":{"line":318,"column":56,"offset":19578},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":318,"column":56,"offset":19578},"end":{"line":318,"column":65,"offset":19587},"indent":[]}},{"type":"text","value":" node, its link with the ","position":{"start":{"line":318,"column":65,"offset":19587},"end":{"line":318,"column":90,"offset":19612},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":318,"column":90,"offset":19612},"end":{"line":318,"column":100,"offset":19622},"indent":[]}},{"type":"text","value":" node is reversed. then, ","position":{"start":{"line":318,"column":100,"offset":19622},"end":{"line":318,"column":125,"offset":19647},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":318,"column":125,"offset":19647},"end":{"line":318,"column":131,"offset":19653},"indent":[]}},{"type":"text","value":" stores the next node in the list. Let’s break that down by line.","position":{"start":{"line":318,"column":131,"offset":19653},"end":{"line":318,"column":196,"offset":19718},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":19523},"end":{"line":318,"column":196,"offset":19718},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 22- Store the ","position":{"start":{"line":320,"column":5,"offset":19726},"end":{"line":320,"column":24,"offset":19745},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":320,"column":24,"offset":19745},"end":{"line":320,"column":33,"offset":19754},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":320,"column":33,"offset":19754},"end":{"line":320,"column":41,"offset":19762},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nextElement</code>","position":{"start":{"line":320,"column":41,"offset":19762},"end":{"line":320,"column":54,"offset":19775},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":320,"column":54,"offset":19775},"end":{"line":320,"column":58,"offset":19779},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":320,"column":58,"offset":19779},"end":{"line":320,"column":64,"offset":19785},"indent":[]}}],"position":{"start":{"line":320,"column":5,"offset":19726},"end":{"line":320,"column":64,"offset":19785},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19722},"end":{"line":320,"column":64,"offset":19785},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 23 - Set ","position":{"start":{"line":321,"column":5,"offset":19791},"end":{"line":321,"column":19,"offset":19805},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":321,"column":19,"offset":19805},"end":{"line":321,"column":28,"offset":19814},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":321,"column":28,"offset":19814},"end":{"line":321,"column":36,"offset":19822},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nextElement</code>","position":{"start":{"line":321,"column":36,"offset":19822},"end":{"line":321,"column":49,"offset":19835},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":321,"column":49,"offset":19835},"end":{"line":321,"column":53,"offset":19839},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":321,"column":53,"offset":19839},"end":{"line":321,"column":63,"offset":19849},"indent":[]}}],"position":{"start":{"line":321,"column":5,"offset":19791},"end":{"line":321,"column":63,"offset":19849},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":19787},"end":{"line":321,"column":63,"offset":19849},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 24 - Make the ","position":{"start":{"line":322,"column":5,"offset":19855},"end":{"line":322,"column":24,"offset":19874},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":322,"column":24,"offset":19874},"end":{"line":322,"column":33,"offset":19883},"indent":[]}},{"type":"text","value":" node the new ","position":{"start":{"line":322,"column":33,"offset":19883},"end":{"line":322,"column":47,"offset":19897},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":322,"column":47,"offset":19897},"end":{"line":322,"column":57,"offset":19907},"indent":[]}},{"type":"text","value":" for the next iteration","position":{"start":{"line":322,"column":57,"offset":19907},"end":{"line":322,"column":80,"offset":19930},"indent":[]}}],"position":{"start":{"line":322,"column":5,"offset":19855},"end":{"line":322,"column":80,"offset":19930},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":19851},"end":{"line":322,"column":80,"offset":19930},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 25 - Use ","position":{"start":{"line":323,"column":5,"offset":19936},"end":{"line":323,"column":19,"offset":19950},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":323,"column":19,"offset":19950},"end":{"line":323,"column":25,"offset":19956},"indent":[]}},{"type":"text","value":" to go to the next node","position":{"start":{"line":323,"column":25,"offset":19956},"end":{"line":323,"column":48,"offset":19979},"indent":[]}}],"position":{"start":{"line":323,"column":5,"offset":19936},"end":{"line":323,"column":48,"offset":19979},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":19932},"end":{"line":323,"column":48,"offset":19979},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 29 - We reset the ","position":{"start":{"line":324,"column":5,"offset":19985},"end":{"line":324,"column":28,"offset":20008},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">head</code>","position":{"start":{"line":324,"column":28,"offset":20008},"end":{"line":324,"column":34,"offset":20014},"indent":[]}},{"type":"text","value":" pointer to point at the last node","position":{"start":{"line":324,"column":34,"offset":20014},"end":{"line":324,"column":68,"offset":20048},"indent":[]}}],"position":{"start":{"line":324,"column":5,"offset":19985},"end":{"line":324,"column":68,"offset":20048},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":19981},"end":{"line":324,"column":68,"offset":20048},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19722},"end":{"line":324,"column":68,"offset":20048},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since the list is traversed only once, the algorithm runs in ","position":{"start":{"line":326,"column":1,"offset":20052},"end":{"line":326,"column":62,"offset":20113},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":326,"column":63,"offset":20114},"end":{"line":326,"column":67,"offset":20118},"indent":[]}}],"position":{"start":{"line":326,"column":62,"offset":20113},"end":{"line":326,"column":68,"offset":20119},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":326,"column":68,"offset":20119},"end":{"line":326,"column":69,"offset":20120},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":20052},"end":{"line":326,"column":69,"offset":20120},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":328,"column":1,"offset":20124},"end":{"line":328,"column":2,"offset":20125},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":20124},"end":{"line":328,"column":2,"offset":20125},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#tree-find-the-minimum-value-in-a-binary-search-tree","children":[],"position":{"start":{"line":330,"column":6,"offset":20134},"end":{"line":330,"column":143,"offset":20271},"indent":[]}},{"type":"text","value":"Tree: Find the Minimum Value in a Binary Search Tree","position":{"start":{"line":330,"column":143,"offset":20271},"end":{"line":330,"column":195,"offset":20323},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":20129},"end":{"line":330,"column":195,"offset":20323},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":332,"column":3,"offset":20329},"end":{"line":332,"column":21,"offset":20347},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":20327},"end":{"line":332,"column":23,"offset":20349},"indent":[]}},{"type":"text","value":" Use the ","position":{"start":{"line":332,"column":23,"offset":20349},"end":{"line":332,"column":32,"offset":20358},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findMin(root)</code>","position":{"start":{"line":332,"column":32,"offset":20358},"end":{"line":332,"column":47,"offset":20373},"indent":[]}},{"type":"text","value":" function to find the minimum value in a Binary Search Tree.","position":{"start":{"line":332,"column":47,"offset":20373},"end":{"line":332,"column":107,"offset":20433},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":20327},"end":{"line":332,"column":107,"offset":20433},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":334,"column":3,"offset":20439},"end":{"line":334,"column":9,"offset":20445},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":20437},"end":{"line":334,"column":11,"offset":20447},"indent":[]}},{"type":"text","value":" a root node for a binary search tree","position":{"start":{"line":334,"column":11,"offset":20447},"end":{"line":334,"column":48,"offset":20484},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":20437},"end":{"line":334,"column":48,"offset":20484},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":336,"column":1,"offset":20488},"end":{"line":338,"column":4,"offset":20498},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":340,"column":3,"offset":20504},"end":{"line":340,"column":10,"offset":20511},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20502},"end":{"line":340,"column":12,"offset":20513},"indent":[]}},{"type":"text","value":" the smallest integer value from that binary search tree","position":{"start":{"line":340,"column":12,"offset":20513},"end":{"line":340,"column":68,"offset":20569},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20502},"end":{"line":340,"column":68,"offset":20569},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":342,"column":1,"offset":20573},"end":{"line":344,"column":4,"offset":20583},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at an easy solution for this problem.","position":{"start":{"line":346,"column":1,"offset":20587},"end":{"line":346,"column":49,"offset":20635},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":20587},"end":{"line":346,"column":49,"offset":20635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":348,"column":1,"offset":20639},"end":{"line":348,"column":2,"offset":20640},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":20639},"end":{"line":348,"column":2,"offset":20640},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution: Iterative ","position":{"start":{"line":350,"column":3,"offset":20646},"end":{"line":350,"column":23,"offset":20666},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findMin( )</code>","position":{"start":{"line":350,"column":23,"offset":20666},"end":{"line":350,"column":35,"offset":20678},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20644},"end":{"line":350,"column":37,"offset":20680},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20644},"end":{"line":350,"column":37,"offset":20680},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution begins by checking if the root is ","position":{"start":{"line":352,"column":1,"offset":20684},"end":{"line":352,"column":49,"offset":20732},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":352,"column":49,"offset":20732},"end":{"line":352,"column":55,"offset":20738},"indent":[]}},{"type":"text","value":". It returns ","position":{"start":{"line":352,"column":55,"offset":20738},"end":{"line":352,"column":68,"offset":20751},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":352,"column":68,"offset":20751},"end":{"line":352,"column":74,"offset":20757},"indent":[]}},{"type":"text","value":" if so. It then moves to the left subtree and continues with each node’s left child until the left-most child is reached.","position":{"start":{"line":352,"column":74,"offset":20757},"end":{"line":352,"column":195,"offset":20878},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":20684},"end":{"line":352,"column":195,"offset":20878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsBinarySearchTree.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class BinarySearchTree { constructor(rootValue) { this.root = new Node(rootValue); } insert(currentNode, newValue) { if (currentNode === null) { currentNode = new Node(newValue); } else if (newValue < currentNode.val) { currentNode.leftChild = this.insert(currentNode.leftChild, newValue); } else { currentNode.rightChild = this.insert(currentNode.rightChild, newValue); } return currentNode; } insertBST(newValue) { if(this.root==null){ this.root=new Node(newValue); return; } this.insert(this.root, newValue); } preOrderPrint(currentNode) { if (currentNode !== null) { console.log(currentNode.val); this.preOrderPrint(currentNode.leftChild);Run\\","position":{"start":{"line":354,"column":1,"offset":20882},"end":{"line":354,"column":799,"offset":21680},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":20882},"end":{"line":354,"column":799,"offset":21680},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#graph-remove-edge","children":[],"position":{"start":{"line":356,"column":6,"offset":21689},"end":{"line":356,"column":109,"offset":21792},"indent":[]}},{"type":"text","value":"Graph: Remove Edge","position":{"start":{"line":356,"column":109,"offset":21792},"end":{"line":356,"column":127,"offset":21810},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":21684},"end":{"line":356,"column":127,"offset":21810},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":358,"column":3,"offset":21816},"end":{"line":358,"column":21,"offset":21834},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21814},"end":{"line":358,"column":23,"offset":21836},"indent":[]}},{"type":"text","value":" Implement the removeEdge function to take a source and a destination as arguments. It should detect if an edge exists between them.","position":{"start":{"line":358,"column":23,"offset":21836},"end":{"line":358,"column":155,"offset":21968},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21814},"end":{"line":358,"column":155,"offset":21968},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":360,"column":3,"offset":21974},"end":{"line":360,"column":9,"offset":21980},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21972},"end":{"line":360,"column":11,"offset":21982},"indent":[]}},{"type":"text","value":" A graph, a source, and a destination","position":{"start":{"line":360,"column":11,"offset":21982},"end":{"line":360,"column":48,"offset":22019},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21972},"end":{"line":360,"column":48,"offset":22019},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":"alt-text","position":{"start":{"line":362,"column":2,"offset":22024},"end":{"line":362,"column":15,"offset":22037},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":22023},"end":{"line":362,"column":99,"offset":22121},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":100,"offset":22122},"end":{"line":362,"column":453,"offset":22475},"indent":[]}}],"position":{"start":{"line":362,"column":99,"offset":22121},"end":{"line":362,"column":798,"offset":22820},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":799,"offset":22821},"end":{"line":362,"column":1162,"offset":23184},"indent":[]}}],"position":{"start":{"line":362,"column":798,"offset":22820},"end":{"line":362,"column":1517,"offset":23539},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":22023},"end":{"line":362,"column":1517,"offset":23539},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":364,"column":3,"offset":23545},"end":{"line":364,"column":10,"offset":23552},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23543},"end":{"line":364,"column":12,"offset":23554},"indent":[]}},{"type":"text","value":" A graph with the edge between the source and the destination removed.","position":{"start":{"line":364,"column":12,"offset":23554},"end":{"line":364,"column":82,"offset":23624},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23543},"end":{"line":364,"column":82,"offset":23624},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":366,"column":1,"offset":23628},"end":{"line":368,"column":4,"offset":23638},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":"alt-text","position":{"start":{"line":370,"column":2,"offset":23643},"end":{"line":370,"column":15,"offset":23656},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23642},"end":{"line":370,"column":99,"offset":23740},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":100,"offset":23741},"end":{"line":370,"column":453,"offset":24094},"indent":[]}}],"position":{"start":{"line":370,"column":99,"offset":23740},"end":{"line":370,"column":798,"offset":24439},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":799,"offset":24440},"end":{"line":370,"column":1162,"offset":24803},"indent":[]}}],"position":{"start":{"line":370,"column":798,"offset":24439},"end":{"line":370,"column":1517,"offset":25158},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23642},"end":{"line":370,"column":1517,"offset":25158},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution to this problem is fairly simple: we use Indexing and deletion. Take a look","position":{"start":{"line":372,"column":1,"offset":25162},"end":{"line":372,"column":89,"offset":25250},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":25162},"end":{"line":372,"column":89,"offset":25250},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsGraph.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const LinkedList = require('./LinkedList.js');const Node = require('./Node.js');module.exports = class Graph { constructor(vertices) { this.vertices = vertices; this.list = ","position":{"start":{"line":374,"column":1,"offset":25254},"end":{"line":374,"column":276,"offset":25529},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":276,"offset":25529},"end":{"line":374,"column":278,"offset":25531},"indent":[]}},{"type":"text","value":"]; var it; for (it = 0; it < vertices; it++) { let temp = new LinkedList(); this.list.push(temp); } } addEdge(source, destination) { if (source < this.vertices && destination < this.vertices) this.list","position":{"start":{"line":374,"column":278,"offset":25531},"end":{"line":374,"column":479,"offset":25732},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":479,"offset":25732},"end":{"line":374,"column":481,"offset":25734},"indent":[]}},{"type":"text","value":"source].insertAtHead(destination); return this; } printGraph() { console.log(\">>Adjacency List of Directed Graph<<\"); var i; for (i = 0; i < this.list.length; i++) { process.stdout.write(\"|\" + String(i) + \"| => \");Run","position":{"start":{"line":374,"column":481,"offset":25734},"end":{"line":374,"column":698,"offset":25951},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":25254},"end":{"line":374,"column":698,"offset":25951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since our vertices are stored in an array, we can access the ","position":{"start":{"line":376,"column":1,"offset":25955},"end":{"line":376,"column":62,"offset":26016},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">source</code>","position":{"start":{"line":376,"column":62,"offset":26016},"end":{"line":376,"column":70,"offset":26024},"indent":[]}},{"type":"text","value":" linked list. We then call the ","position":{"start":{"line":376,"column":70,"offset":26024},"end":{"line":376,"column":101,"offset":26055},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">delete</code>","position":{"start":{"line":376,"column":101,"offset":26055},"end":{"line":376,"column":109,"offset":26063},"indent":[]}},{"type":"text","value":" function for linked lists. The time complexity for this solution is O(E) since we may have to traverse E edges.","position":{"start":{"line":376,"column":109,"offset":26063},"end":{"line":376,"column":221,"offset":26175},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":25955},"end":{"line":376,"column":221,"offset":26175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":378,"column":1,"offset":26179},"end":{"line":378,"column":2,"offset":26180},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":26179},"end":{"line":378,"column":2,"offset":26180},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#hash-table-convert-max-heap-to-min-heap","children":[],"position":{"start":{"line":380,"column":6,"offset":26189},"end":{"line":380,"column":131,"offset":26314},"indent":[]}},{"type":"text","value":"Hash Table: Convert Max-Heap to Min-Heap","position":{"start":{"line":380,"column":131,"offset":26314},"end":{"line":380,"column":171,"offset":26354},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":26184},"end":{"line":380,"column":171,"offset":26354},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":382,"column":3,"offset":26360},"end":{"line":382,"column":21,"offset":26378},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":26358},"end":{"line":382,"column":23,"offset":26380},"indent":[]}},{"type":"text","value":" Implement the function ","position":{"start":{"line":382,"column":23,"offset":26380},"end":{"line":382,"column":47,"offset":26404},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">convertMax(maxHeap)</code>","position":{"start":{"line":382,"column":47,"offset":26404},"end":{"line":382,"column":68,"offset":26425},"indent":[]}},{"type":"text","value":" to convert a binary max-heap into a binary min-heap. ","position":{"start":{"line":382,"column":68,"offset":26425},"end":{"line":382,"column":122,"offset":26479},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":382,"column":122,"offset":26479},"end":{"line":382,"column":131,"offset":26488},"indent":[]}},{"type":"text","value":" should be an array in the ","position":{"start":{"line":382,"column":131,"offset":26488},"end":{"line":382,"column":158,"offset":26515},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":382,"column":158,"offset":26515},"end":{"line":382,"column":167,"offset":26524},"indent":[]}},{"type":"text","value":" format, i.e the parent is greater than its children.","position":{"start":{"line":382,"column":167,"offset":26524},"end":{"line":382,"column":220,"offset":26577},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":26358},"end":{"line":382,"column":220,"offset":26577},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":384,"column":3,"offset":26583},"end":{"line":384,"column":9,"offset":26589},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26581},"end":{"line":384,"column":11,"offset":26591},"indent":[]}},{"type":"text","value":" a Max-Heap","position":{"start":{"line":384,"column":11,"offset":26591},"end":{"line":384,"column":22,"offset":26602},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26581},"end":{"line":384,"column":22,"offset":26602},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":386,"column":1,"offset":26606},"end":{"line":388,"column":4,"offset":26616},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":390,"column":3,"offset":26622},"end":{"line":390,"column":10,"offset":26629},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26620},"end":{"line":390,"column":12,"offset":26631},"indent":[]}},{"type":"text","value":" returns the converted array","position":{"start":{"line":390,"column":12,"offset":26631},"end":{"line":390,"column":40,"offset":26659},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26620},"end":{"line":390,"column":40,"offset":26659},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":392,"column":1,"offset":26663},"end":{"line":394,"column":4,"offset":26673},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we must min heapify all parent nodes. Take a look.","position":{"start":{"line":396,"column":1,"offset":26677},"end":{"line":396,"column":74,"offset":26750},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":26677},"end":{"line":396,"column":74,"offset":26750},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789101112131415161718192021222324252627function minHeapify(heap, index) { var left = index ","position":{"start":{"line":398,"column":1,"offset":26754},"end":{"line":398,"column":98,"offset":26851},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":98,"offset":26851},"end":{"line":398,"column":100,"offset":26853},"indent":[]}},{"type":"text","value":" 2; var right = (index ","position":{"start":{"line":398,"column":100,"offset":26853},"end":{"line":398,"column":123,"offset":26876},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":123,"offset":26876},"end":{"line":398,"column":125,"offset":26878},"indent":[]}},{"type":"text","value":" 2) + 1; var smallest = index; if ((heap.length > left) && (heap","position":{"start":{"line":398,"column":125,"offset":26878},"end":{"line":398,"column":189,"offset":26942},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":189,"offset":26942},"end":{"line":398,"column":191,"offset":26944},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":191,"offset":26944},"end":{"line":398,"column":207,"offset":26960},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":207,"offset":26960},"end":{"line":398,"column":209,"offset":26962},"indent":[]}},{"type":"text","value":"left])) { smallest = left } if ((heap.length > right) && (heap","position":{"start":{"line":398,"column":209,"offset":26962},"end":{"line":398,"column":271,"offset":27024},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":271,"offset":27024},"end":{"line":398,"column":273,"offset":27026},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":273,"offset":27026},"end":{"line":398,"column":289,"offset":27042},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":289,"offset":27042},"end":{"line":398,"column":291,"offset":27044},"indent":[]}},{"type":"text","value":"right])) smallest = right if (smallest != index) { var tmp = heap","position":{"start":{"line":398,"column":291,"offset":27044},"end":{"line":398,"column":356,"offset":27109},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":356,"offset":27109},"end":{"line":398,"column":358,"offset":27111},"indent":[]}},{"type":"text","value":"smallest] heap","position":{"start":{"line":398,"column":358,"offset":27111},"end":{"line":398,"column":372,"offset":27125},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":372,"offset":27125},"end":{"line":398,"column":374,"offset":27127},"indent":[]}},{"type":"text","value":"smallest] = heap","position":{"start":{"line":398,"column":374,"offset":27127},"end":{"line":398,"column":390,"offset":27143},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":390,"offset":27143},"end":{"line":398,"column":392,"offset":27145},"indent":[]}},{"type":"text","value":"index] heap","position":{"start":{"line":398,"column":392,"offset":27145},"end":{"line":398,"column":403,"offset":27156},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":403,"offset":27156},"end":{"line":398,"column":405,"offset":27158},"indent":[]}},{"type":"text","value":"index] = tmp minHeapify(heap, smallest) } return heap;}function convertMax(maxHeap) { for (var i = Math.floor((maxHeap.length) / 2); i > -1; i--) maxHeap = minHeapify(maxHeap, i) return maxHeap}var maxHeap = ","position":{"start":{"line":398,"column":405,"offset":27158},"end":{"line":398,"column":613,"offset":27366},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":613,"offset":27366},"end":{"line":398,"column":615,"offset":27368},"indent":[]}},{"type":"text","value":"9,4,7,1,-2,6,5]console.log(convertMax(maxHeap))Run","position":{"start":{"line":398,"column":615,"offset":27368},"end":{"line":398,"column":665,"offset":27418},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":26754},"end":{"line":398,"column":665,"offset":27418},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We consider ","position":{"start":{"line":400,"column":1,"offset":27422},"end":{"line":400,"column":13,"offset":27434},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":400,"column":13,"offset":27434},"end":{"line":400,"column":22,"offset":27443},"indent":[]}},{"type":"text","value":" to be a regular array and reorder it to accurately represent a min-heap. You can see this done in the code above. The ","position":{"start":{"line":400,"column":22,"offset":27443},"end":{"line":400,"column":141,"offset":27562},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">convertMax()</code>","position":{"start":{"line":400,"column":141,"offset":27562},"end":{"line":400,"column":155,"offset":27576},"indent":[]}},{"type":"text","value":" function then restores the heap property on all nodes from the lowest parent node by calling the ","position":{"start":{"line":400,"column":155,"offset":27576},"end":{"line":400,"column":253,"offset":27674},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">minHeapify()</code>","position":{"start":{"line":400,"column":253,"offset":27674},"end":{"line":400,"column":267,"offset":27688},"indent":[]}},{"type":"text","value":" function. In regards to time complexity, this solution takes ","position":{"start":{"line":400,"column":267,"offset":27688},"end":{"line":400,"column":329,"offset":27750},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(nlog(n))O(nlog(n))","position":{"start":{"line":400,"column":330,"offset":27751},"end":{"line":400,"column":350,"offset":27771},"indent":[]}}],"position":{"start":{"line":400,"column":329,"offset":27750},"end":{"line":400,"column":351,"offset":27772},"indent":[]}},{"type":"text","value":" time.","position":{"start":{"line":400,"column":351,"offset":27772},"end":{"line":400,"column":357,"offset":27778},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":27422},"end":{"line":400,"column":357,"offset":27778},"indent":[]}},{"type":"html","value":"<!--EndFragment-->","position":{"start":{"line":402,"column":1,"offset":27782},"end":{"line":402,"column":19,"offset":27800},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":403,"column":1,"offset":27802}}}}