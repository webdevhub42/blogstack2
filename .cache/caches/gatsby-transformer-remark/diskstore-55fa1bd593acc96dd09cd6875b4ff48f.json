{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-321526cc38c65c5393ba878eb9180b8f-gatsby-remark-prismjs-","val":"<h3>Anonymous Closures</h3>\n<p>This is the fundamental construct that makes it all possible, and really is the single <strong>best feature of JavaScript</strong>. We'll simply create an anonymous function, and execute it immediately. All of the code that runs inside the function lives in a <strong>closure</strong>, which provides <strong>privacy</strong> and <strong>state</strong> throughout the lifetime of our application.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... all vars and functions are in this scope only</span>\n    <span class=\"token comment\">// still maintains access to all globals</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice the <code class=\"language-text\">()</code> around the anonymous function. This is required by the language, since statements that begin with the token <code class=\"language-text\">function</code> are always considered to be <strong>function declarations</strong>. Including <code class=\"language-text\">()</code> creates a <strong>function expression</strong> instead.</p>\n<h3>Global Import</h3>\n<p>JavaScript has a feature known as <strong>implied globals</strong>. Whenever a name is used, the interpreter walks the scope chain backwards looking for a <code class=\"language-text\">var</code> statement for that name. If none is found, that variable is assumed to be global. If it's used in an assignment, the global is created if it doesn't already exist. This means that using or creating global variables in an anonymous closure is easy. Unfortunately, this leads to hard-to-manage code, as it's not obvious (to humans) which variables are global in a given file.</p>\n<h6>Luckily, our anonymous function provides an easy alternative. By passing globals as parameters to our anonymous function, we <strong>import</strong> them into our code, which is both <strong>clearer</strong> and <strong>faster</strong> than implied globals. Here's an example:</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function ($, YAHOO) {\n// now have access to globals jQuery (as $) and YAHOO in this code\n}(jQuery, YAHOO));</code></pre></div>\n<h3>Module Export</h3>\n<p>Sometimes you don't just want to <em>use</em> globals, but you want to <em>declare</em> them. We can easily do this by exporting them, using the anonymous function's <strong>return value</strong>. Doing so will complete the basic module pattern, so here's a complete example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        privateVariable <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">privateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    my<span class=\"token punctuation\">.</span>moduleProperty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we've declared a global module named <code class=\"language-text\">MODULE</code>, with two public properties: a method named <code class=\"language-text\">MODULE.moduleMethod</code> and a variable named <code class=\"language-text\">MODULE.moduleProperty</code>. In addition, it maintains <strong>private internal state</strong> using the closure of the anonymous function. Also, we can easily import needed globals, using the pattern we learned above.</p>\n<h6>## Advanced Patterns</h6>\n<p>While the above is enough for many uses, we can take this pattern farther and create some very powerful, extensible constructs. Lets work through them one-by-one, continuing with our module named <code class=\"language-text\">MODULE</code>.</p>\n<h3>Augmentation</h3>\n<p>One limitation of the module pattern so far is that the entire module must be in one file. Anyone who has worked in a large code-base understands the value of splitting among multiple files. Luckily, we have a nice solution to <strong>augment modules</strong>. First, we import the module, then we add properties, then we export it. Here's an example, augmenting our <code class=\"language-text\">MODULE</code> from above:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">anotherMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// added method...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We use the <code class=\"language-text\">var</code> keyword again for consistency, even though it's not necessary. After this code has run, our module will have gained a new public method named <code class=\"language-text\">MODULE.anotherMethod</code>. This augmentation file will also maintain its own private internal state and imports.</p>\n<h3>Loose Augmentation</h3>\n<p>While our example above requires our initial module creation to be first, and the augmentation to happen second, that isn't always necessary. One of the best things a JavaScript application can do for performance is to load scripts asynchronously. We can create flexible multi-part modules that can load themselves in any order with <strong>loose augmentation</strong>. Each file should have the following structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let MODULE = (function (my) {\n// add capabilities...\n\n###### return my;\n}(MODULE || {}));</code></pre></div>\n<p>In this pattern, the <code class=\"language-text\">var</code> statement is always necessary. Note that the import will create the module if it does not already exist. This means you can use a tool like <a href=\"http://labjs.com/\">LABjs</a> and load all of your module files in parallel, without needing to block.</p>\n<h3>Tight Augmentation</h3>\n<p>While loose augmentation is great, it does place some limitations on your module. Most importantly, you cannot override module properties safely. You also cannot use module properties from other files during initialization (but you can at run-time after intialization). <strong>Tight augmentation</strong> implies a set loading order, but allows <strong>overrides</strong>. Here is a simple example (augmenting our original <code class=\"language-text\">MODULE</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> old_moduleMethod <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span>moduleMethod<span class=\"token punctuation\">;</span>\n\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// method override, has access to old through old_moduleMethod...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we've overridden <code class=\"language-text\">MODULE.moduleMethod</code>, but maintain a reference to the original method, if needed.</p>\n<h3>Cloning and Inheritance</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE_TWO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">old</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> old<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            my<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> old<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> super_moduleMethod <span class=\"token operator\">=</span> old<span class=\"token punctuation\">.</span>moduleMethod<span class=\"token punctuation\">;</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// override method on the clone, access to super through super_moduleMethod</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This pattern is perhaps the <strong>least flexible</strong> option. It does allow some neat compositions, but that comes at the expense of flexibility. As I've written it, properties which are objects or functions will <em>not</em> be duplicated, they will exist as one object with two references. Changing one will change the other. This could be fixed for objects with a recursive cloning process, but probably cannot be fixed for functions, except perhaps with <code class=\"language-text\">eval</code>. Nevertheless, I've included it for completeness.</p>\n<h3>Cross-File Private State</h3>\n<p>One severe limitation of splitting a module across multiple files is that each file maintains its own private state, and does not get access to the private state of the other files. This can be fixed. Here is an example of a loosely augmented module that will <strong>maintain private state</strong> across all augmentations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _private <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _seal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">=</span>\n            my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">||</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_private<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_seal<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_unseal<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _unseal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">=</span>\n            my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">||</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">=</span> _private<span class=\"token punctuation\">;</span>\n                my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">=</span> _seal<span class=\"token punctuation\">;</span>\n                my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">=</span> _unseal<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// permanent access to _private, _seal, and _unseal</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Any file can set properties on their local variable <code class=\"language-text\">_private</code>, and it will be immediately available to the others. Once this module has loaded completely, the application should call <code class=\"language-text\">MODULE._seal()</code>, which will prevent external access to the internal <code class=\"language-text\">_private</code>. If this module were to be augmented again, further in the application's lifetime, one of the internal methods, in any file, can call <code class=\"language-text\">_unseal()</code> before loading the new file, and call <code class=\"language-text\">_seal()</code> again after it has been executed. This pattern occurred to me today while I was at work, I have not seen this elsewhere. I think this is a very useful pattern, and would have been worth writing about all on its own.</p>\n<h3>Sub-modules</h3>\n<p>Our final advanced pattern is actually the simplest. There are many good cases for creating sub-modules. It is just like creating regular modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token constant\">MODULE</span><span class=\"token punctuation\">.</span>sub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n\n######   <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>While this may have been obvious, I thought it worth including. Sub-modules have all the advanced capabilities of normal modules, including augmentation and private state.</p>\n<h6>## Conclusions</h6>\n<p>Most of the advanced patterns can be combined with each other to create more useful patterns. If I had to advocate a route to take in designing a complex application, I'd combine <strong>loose augmentation</strong>, <strong>private state</strong>, and <strong>sub-modules</strong>.</p>\n<h6>I haven't touched on performance here at all, but I'd like to put in one quick note: The module pattern is <strong>good for performance</strong>. It minifies really well, which makes downloading the code faster. Using <strong>loose augmentation</strong> allows easy non-blocking parallel downloads, which also speeds up download speeds. Initialization time is probably a bit slower than other methods, but worth the trade-off. Run-time performance should suffer no penalties so long as globals are imported correctly, and will probably gain speed in sub-modules by shortening the reference chain with local variables.</h6>\n<h6>To close, here's an example of a sub-module that loads itself dynamically to its parent (creating it if it does not exist). I've left out private state for brevity, but including it would be simple. This code pattern allows an entire complex heirarchical code-base to be loaded completely in parallel with itself, sub-modules and all.</h6>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">UTIL</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> $</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>ajax <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>ajax <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ok, so I'm cheating a bit :)</span>\n        <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// etc...</span>\n\n######   <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UTIL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> jQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Summary:</h1>\n<details>\n<summary> recitation  </summary>\n<h3>Anonymous Closures</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... all vars and functions are in this scope only</span>\n    <span class=\"token comment\">// still maintains access to all globals</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Global Import</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$<span class=\"token punctuation\">,</span> <span class=\"token constant\">YAHOO</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// now have access to globals jQuery (as $) and YAHOO in this code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">,</span> <span class=\"token constant\">YAHOO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Module Export</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        privateVariable <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">privateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    my<span class=\"token punctuation\">.</span>moduleProperty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Advanced Patterns</h1>\n<h3>Augmentation</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">anotherMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// added method...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Loose Augmentation</h3>\n<p>In this pattern, the let statement is always necessary. Note that the import will create the module if it does not already exist. This means you can use a tool like LABjs and load all of your module files in parallel, without needing to block.</p>\n<h6>`<code class=\"language-text\"></code>js</h6>\n<p>//</p>\n<p>let MODULE = (function (my) {\n// add capabilities...</p>\n<h6>return my;</h6>\n<p>})(MODULE || {});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### Tight Augmentation\n\nHere we've overridden MODULE.moduleMethod, but maintain a reference to the original method, if needed.\n\n###### ```js\n//\nlet MODULE = (function (my) {\n    let old_moduleMethod = my.moduleMethod;\n\n    my.moduleMethod = function () {\n        // method override, has access to old through old_moduleMethod...\n    };\n\n    return my;\n})(MODULE);</code></pre></div>\n<h3>Cloning and Inheritance</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE_TWO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">old</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> old<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            my<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> old<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> super_moduleMethod <span class=\"token operator\">=</span> old<span class=\"token punctuation\">.</span>moduleMethod<span class=\"token punctuation\">;</span>\n    my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// override method on the clone, access to super through super_moduleMethod</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Cross-File Private State</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MODULE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _private <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _seal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">=</span>\n            my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">||</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_private<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_seal<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> my<span class=\"token punctuation\">.</span>_unseal<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _unseal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">=</span>\n            my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">||</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                my<span class=\"token punctuation\">.</span>_private <span class=\"token operator\">=</span> _private<span class=\"token punctuation\">;</span>\n                my<span class=\"token punctuation\">.</span>_seal <span class=\"token operator\">=</span> _seal<span class=\"token punctuation\">;</span>\n                my<span class=\"token punctuation\">.</span>_unseal <span class=\"token operator\">=</span> _unseal<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// permanent access to _private, _seal, and _unseal</span>\n\n    <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MODULE</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Sub-modules</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token constant\">MODULE</span><span class=\"token punctuation\">.</span>sub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> my <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n\n######   <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</details>"}