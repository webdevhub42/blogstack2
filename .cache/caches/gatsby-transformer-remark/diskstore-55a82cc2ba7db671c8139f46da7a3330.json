{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-98dc16d913d298e0c7b0b5355d2eea28-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/container-with-most-water/description/\">11. Container With Most Water</a></h2>\n<h3>Problem:</h3>\n<p>Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n<h3>Solution:</h3>\n<p>Greedy Algorithm.</p>\n<p>If we look at the simple brute force approach, where we choose one point at a time and calculate all the possible areas with other points on the right, it is easy to make a observation that we are narrowing down the horizontal distance.</p>\n<p>Greedy Algorithm can help us skip some of the conditions. It is base on a fact that the area between two columns are determined by the shorter one.</p>\n<p>Let's say we have pointer <code class=\"language-text\">l</code> and <code class=\"language-text\">r</code> at the begin and end of a distance, and the area is <code class=\"language-text\">area(l, r)</code>, how should we narrow down the distance?</p>\n<p>If <code class=\"language-text\">height[l] &lt; height[r]</code>, we know that the height of the area will never be greater than <code class=\"language-text\">height[l]</code> if we keep <code class=\"language-text\">l</code>. Now if we get rid of <code class=\"language-text\">r</code>, the area can only get smaller since the distance is shorter, and the height is at most <code class=\"language-text\">height[l]</code>.</p>\n<p>Here we conclude rule NO.1: Get rid of the smaller one.</p>\n<p>What if <code class=\"language-text\">height[l] == height[r]</code>? It is safe to get rid of both. We do not need any of them to constrain the max height of the rest points.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {number[]} height\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            l<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}