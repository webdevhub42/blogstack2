{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-3896dac96f3811dd59700b8ae4cd0369-gatsby-remark-prismjs-","val":"<h1>Async functions:</h1>\n<h2>Asynchronous JavaScript</h2>\n<p>Let's start with the <code class=\"language-text\">async</code> keyword. It can be placed before a function, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The word \"async\" before a function means one simple thing: a function always returns a promise. Other values are wrapped in a resolved promise automatically.</p>\n<p>For instance, this function returns a resolved promise with the result of <code class=\"language-text\">1</code>; let's test it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>...We could explicitly return a promise, which would be the same:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>So, <code class=\"language-text\">async</code> ensures that the function returns a promise, and wraps non-promises in it. Simple enough, right? But not only that. There's another keyword, <code class=\"language-text\">await</code>, that works only inside <code class=\"language-text\">async</code> functions, and it's pretty cool.</p>\n<h2><a href=\"#await\">Await</a></h2>\n<p>The syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// works only inside async functions</span>\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The keyword <code class=\"language-text\">await</code> makes JavaScript wait until that promise settles and returns its result.</p>\n<p>Here's an example with a promise that resolves in 1 second:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait until the promise resolves (*)</span>\n\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"done!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function execution \"pauses\" at the line <code class=\"language-text\">(*)</code> and resumes when the promise settles, with <code class=\"language-text\">result</code> becoming its result. So the code above shows \"done!\" in one second.</p>\n<p>Let's emphasize: <code class=\"language-text\">await</code> literally suspends the function execution until the promise settles, and then resumes it with the promise result. That doesn't cost any CPU resources, because the JavaScript engine can do other jobs in the meantime: execute other scripts, handle events, etc.</p>\n<p>It's just a more elegant syntax of getting the promise result than <code class=\"language-text\">promise.then</code>. And, it's easier to read and write.</p>\n<p>Can't use <code class=\"language-text\">await</code> in regular functions</p>\n<p>If we try to use <code class=\"language-text\">await</code> in a non-async function, there would be a syntax error:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Syntax error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We may get this error if we forget to put <code class=\"language-text\">async</code> before a function. As stated earlier, <code class=\"language-text\">await</code> only works inside an <code class=\"language-text\">async</code> function.</p>\n<p>Let's take the <code class=\"language-text\">showAvatar()</code> example from the chapter <a href=\"promise-chaining\">Promises chaining</a> and rewrite it using <code class=\"language-text\">async/await</code>:</p>\n<ol>\n<li>We'll need to replace <code class=\"language-text\">.then</code> calls with <code class=\"language-text\">await</code>.</li>\n<li>Also we should make the function <code class=\"language-text\">async</code> for them to work.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">showAvatar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// read our JSON</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article/promise-chaining/user.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// read github user</span>\n    <span class=\"token keyword\">let</span> githubResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.github.com/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> githubUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> githubResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// show the avatar</span>\n    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> githubUser<span class=\"token punctuation\">.</span>avatar_url<span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'promise-avatar-example'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// wait 3 seconds</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> githubUser<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showAvatar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pretty clean and easy to read, right? Much better than before.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> won't work in the top-level code\n\nPeople who are just starting to use </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> tend to forget the fact that we can't use </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> in top-level code. For example, this will not work:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// syntax error in top-level code</span>\n<span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article/promise-chaining/user.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But we can wrap it into an anonymous async function, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article/promise-chaining/user.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>P.S. New feature: starting from V8 engine version 8.9+, top-level await works in <a href=\"modules\">modules</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> accepts \"thenables\"\n\nLike </span><span class=\"token template-punctuation string\">`</span></span>promise<span class=\"token punctuation\">.</span>then<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">, </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> allows us to use thenable objects (those with a callable </span><span class=\"token template-punctuation string\">`</span></span>then<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> method). The idea is that a third-party object may not be a promise, but promise-compatible: if it supports </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span>then<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">, that's enough to use it with </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.\n\nHere's a demo </span><span class=\"token template-punctuation string\">`</span></span>Thenable<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> class; the </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> below accepts its instances:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Thenable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// resolve with this.num*2 after 1000ms</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (*)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// waits for 1 second, then result becomes 2</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thenable</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">await</code> gets a non-promise object with <code class=\"language-text\">.then</code>, it calls that method providing the built-in functions <code class=\"language-text\">resolve</code> and <code class=\"language-text\">reject</code> as arguments (just as it does for a regular <code class=\"language-text\">Promise</code> executor). Then <code class=\"language-text\">await</code> waits until one of them is called (in the example above it happens in the line <code class=\"language-text\">(*)</code>) and then proceeds with the result.</p>\n<p>Async class methods</p>\n<p>To declare an async class method, just prepend it with <code class=\"language-text\">async</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Waiter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Waiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 (this is the same as (result => alert(result)))</span></code></pre></div>\n<p>The meaning is the same: it ensures that the returned value is a promise and enables <code class=\"language-text\">await</code>.</p>\n<h2>[Error handling]</h2>\n<p>If a promise resolves normally, then <code class=\"language-text\">await promise</code> returns the result. But in the case of a rejection, it throws the error, just as if there were a <code class=\"language-text\">throw</code> statement at that line.</p>\n<p>This code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whoops!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>...is the same as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whoops!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In real situations, the promise may take some time before it rejects. In that case there will be a delay before <code class=\"language-text\">await</code> throws an error.</p>\n<p>We can catch that error using <code class=\"language-text\">try..catch</code>, the same way as a regular <code class=\"language-text\">throw</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://no-such-url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: failed to fetch</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the case of an error, the control jumps to the <code class=\"language-text\">catch</code> block. We can also wrap multiple lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/no-user-here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// catches errors both in fetch and response.json</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we don't have <code class=\"language-text\">try..catch</code>, then the promise generated by the call of the async function <code class=\"language-text\">f()</code> becomes rejected. We can append <code class=\"language-text\">.catch</code> to handle it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://no-such-url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// f() becomes a rejected promise</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: failed to fetch // (*)</span></code></pre></div>\n<p>If we forget to add <code class=\"language-text\">.catch</code> there, then we get an unhandled promise error (viewable in the console). We can catch such errors using a global <code class=\"language-text\">unhandledrejection</code> event handler as described in the chapter <a href=\"promise-error-handling\">Error handling with promises</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nasync<span class=\"token operator\">/</span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> and </span><span class=\"token template-punctuation string\">`</span></span>promise<span class=\"token punctuation\">.</span>then<span class=\"token operator\">/</span>catch</code></pre></div>\n<p>When we use <code class=\"language-text\">async/await</code>, we rarely need <code class=\"language-text\">.then</code>, because <code class=\"language-text\">await</code> handles the waiting for us. And we can use a regular <code class=\"language-text\">try..catch</code> instead of <code class=\"language-text\">.catch</code>. That's usually (but not always) more convenient.</p>\n<p>But at the top level of the code, when we're outside any <code class=\"language-text\">async</code> function, we're syntactically unable to use <code class=\"language-text\">await</code>, so it's a normal practice to add <code class=\"language-text\">.then/catch</code> to handle the final result or falling-through error, like in the line <code class=\"language-text\">(*)</code> of the example above.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nasync<span class=\"token operator\">/</span><span class=\"token keyword\">await</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> works well with </span><span class=\"token template-punctuation string\">`</span></span>Promise<span class=\"token punctuation\">.</span>all</code></pre></div>\n<p>When we need to wait for multiple promises, we can wrap them in <code class=\"language-text\">Promise.all</code> and then <code class=\"language-text\">await</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// wait for the array of results</span>\n<span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the case of an error, it propagates as usual, from the failed promise to <code class=\"language-text\">Promise.all</code>, and then becomes an exception that we can catch using <code class=\"language-text\">try..catch</code> around the call.</p>\n<h2><a href=\"#summary\">Summary</a></h2>\n<p>The <code class=\"language-text\">async</code> keyword before a function has two effects:</p>\n<ol>\n<li>Makes it always return a promise.</li>\n<li>Allows <code class=\"language-text\">await</code> to be used in it.</li>\n</ol>\n<p>The <code class=\"language-text\">await</code> keyword before a promise makes JavaScript wait until that promise settles, and then:</p>\n<ol>\n<li>If it's an error, the exception is generated --- same as if <code class=\"language-text\">throw error</code> were called at that very place.</li>\n<li>Otherwise, it returns the result.</li>\n</ol>\n<p>Together they provide a great framework to write asynchronous code that is easy to both read and write.</p>\n<p>With <code class=\"language-text\">async/await</code> we rarely need to write <code class=\"language-text\">promise.then/catch</code>, but we still shouldn't forget that they are based on promises, because sometimes (e.g. in the outermost scope) we have to use these methods. Also <code class=\"language-text\">Promise.all</code> is nice when we are waiting for many tasks simultaneously.</p>\n<h2>Cleaning up your asynchronous code with <code class=\"language-text\">await</code></h2>\n<p>REPLs have traditionally had a difficult time allowing you to interact with asynchronous code since they encourage a coding style where you evaluate expressions and use those results in the next field. But if you are using promises or callbacks, this breaks down because these results exist only in the callback, not the next line:</p>\n<p>In RunKit, you can use top-level <code class=\"language-text\">await</code> to get the same behavior of synchronous code.</p>\n<p>Now we can treat this code as synchronous, despite the fact that the code is still executing asynchronously.</p>\n<p>Let's look how. It helps to have a more complex example, where we need to do a few asynchronous operations in sequence. You can see how <code class=\"language-text\">await</code>, promises and callbacks achieve the same results, but the <code class=\"language-text\">await</code> style works better in a REPL:</p>\n<ul>\n<li>await</li>\n<li>promises</li>\n<li>callbacks</li>\n</ul>\n<p>Here, we use <code class=\"language-text\">await</code> on lines 4 and 8, and the results from each request remain in scope.</p>\n<p>Remember, <code class=\"language-text\">await</code> expects a <code class=\"language-text\">promise</code> so you can either write your own or use one of the many libraries that natively supports promises, and npm is full of packages that add promise support to existing libraries. Here are a few of our favorites:</p>\n<ul>\n<li><a href=\"https://npm.runkit.com/fs-promise\">fs-promise</a> - promise based filesystem api</li>\n<li><a href=\"https://npm.runkit.com/request-promise\">request-promise</a> - a wrapper around \"request\" for http stuff</li>\n<li><a href=\"https://npm.runkit.com/glob-promise\">glob-promise</a> - glob style filesystem queries</li>\n<li><a href=\"https://npm.runkit.com/bluebird\">bluebird</a> - general promise library with lots of utilities</li>\n</ul>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"http://rossboucher.com/await\">ES7 Async/Await presented at Brookyln.js</a></li>\n<li><a href=\"https://babeljs.io/\">Babel.js</a></li>\n<li><a href=\"https://github.com/lukehoban/ecmascript-asyncawait/\">ECMAScript's Proposal for async/await</a></li>\n<li><a href=\"https://esdiscuss.org/notes/2014-01-30#async-await\">ES Meeting Notes discussing on async/await</a></li>\n<li><a href=\"https://esdiscuss.org/topic/does-async-await-solve-a-real-problem\">Does async/await Solve a Real Problem?</a></li>\n<li><a href=\"https://thomashunter.name/blog/the-long-road-to-asyncawait-in-javascript/\">The Long Road to async/await in JavaScript</a></li>\n<li><a href=\"https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html\">async/await: The Hero JavaScript Deserved</a></li>\n</ul>"}