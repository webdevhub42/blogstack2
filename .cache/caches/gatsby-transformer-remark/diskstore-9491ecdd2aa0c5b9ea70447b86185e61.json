{"expireTime":9007200911870452000,"key":"transformer-remark-markdown-html-ast-7f1c3895b6a9effffca156c4ab3d3b42-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-common-prefix/description/"},"children":[{"type":"text","value":"14. Longest Common Prefix","position":{"start":{"line":3,"column":5,"offset":6},"end":{"line":3,"column":30,"offset":31}}}],"position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":97,"offset":98}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":97,"offset":98}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":5,"column":5,"offset":104},"end":{"line":5,"column":13,"offset":112}}}],"position":{"start":{"line":5,"column":1,"offset":100},"end":{"line":5,"column":13,"offset":112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Write a function to find the longest common prefix string amongst an array of strings.","position":{"start":{"line":7,"column":1,"offset":114},"end":{"line":7,"column":87,"offset":200}}}],"position":{"start":{"line":7,"column":1,"offset":114},"end":{"line":7,"column":87,"offset":200}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If there is no common prefix, return an empty string ","position":{"start":{"line":9,"column":1,"offset":202},"end":{"line":9,"column":54,"offset":255}}},{"type":"raw","value":"<code class=\"language-text\">\"\"</code>","position":{"start":{"line":9,"column":54,"offset":255},"end":{"line":9,"column":58,"offset":259}}},{"type":"text","value":".","position":{"start":{"line":9,"column":58,"offset":259},"end":{"line":9,"column":59,"offset":260}}}],"position":{"start":{"line":9,"column":1,"offset":202},"end":{"line":9,"column":59,"offset":260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":11,"column":3,"offset":264},"end":{"line":11,"column":13,"offset":274}}}],"position":{"start":{"line":11,"column":1,"offset":262},"end":{"line":11,"column":15,"offset":276}}}],"position":{"start":{"line":11,"column":1,"offset":262},"end":{"line":11,"column":15,"offset":276}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"</code></pre></div>","position":{"start":{"line":13,"column":1,"offset":278},"end":{"line":16,"column":4,"offset":332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":18,"column":3,"offset":336},"end":{"line":18,"column":13,"offset":346}}}],"position":{"start":{"line":18,"column":1,"offset":334},"end":{"line":18,"column":15,"offset":348}}}],"position":{"start":{"line":18,"column":1,"offset":334},"end":{"line":18,"column":15,"offset":348}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.</code></pre></div>","position":{"start":{"line":20,"column":1,"offset":350},"end":{"line":24,"column":4,"offset":463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":26,"column":3,"offset":467},"end":{"line":26,"column":8,"offset":472}}}],"position":{"start":{"line":26,"column":1,"offset":465},"end":{"line":26,"column":10,"offset":474}}}],"position":{"start":{"line":26,"column":1,"offset":465},"end":{"line":26,"column":10,"offset":474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All given inputs are in lowercase letters ","position":{"start":{"line":28,"column":1,"offset":476},"end":{"line":28,"column":43,"offset":518}}},{"type":"raw","value":"<code class=\"language-text\">a-z</code>","position":{"start":{"line":28,"column":43,"offset":518},"end":{"line":28,"column":48,"offset":523}}},{"type":"text","value":".","position":{"start":{"line":28,"column":48,"offset":523},"end":{"line":28,"column":49,"offset":524}}}],"position":{"start":{"line":28,"column":1,"offset":476},"end":{"line":28,"column":49,"offset":524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":30,"column":5,"offset":530},"end":{"line":30,"column":14,"offset":539}}}],"position":{"start":{"line":30,"column":1,"offset":526},"end":{"line":30,"column":14,"offset":539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":32,"column":6,"offset":546},"end":{"line":32,"column":9,"offset":549}}}],"position":{"start":{"line":32,"column":1,"offset":541},"end":{"line":32,"column":9,"offset":549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JavaScript specific solution. Get the min len then narrow down the prefix.","position":{"start":{"line":34,"column":1,"offset":551},"end":{"line":34,"column":75,"offset":625}}}],"position":{"start":{"line":34,"column":1,"offset":551},"end":{"line":34,"column":75,"offset":625}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string[]} strs\n * @return {string}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">longestCommonPrefix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> minLen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> anyStr <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>minLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> anyStr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> minLen<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":627},"end":{"line":55,"column":4,"offset":1074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":57,"column":6,"offset":1081},"end":{"line":57,"column":9,"offset":1084}}}],"position":{"start":{"line":57,"column":1,"offset":1076},"end":{"line":57,"column":9,"offset":1084}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string[]} strs\n * @return {string}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">longestCommonPrefix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":1086},"end":{"line":76,"column":4,"offset":1380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":78,"column":6,"offset":1387},"end":{"line":78,"column":11,"offset":1392}}}],"position":{"start":{"line":78,"column":1,"offset":1382},"end":{"line":78,"column":11,"offset":1392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"General solution. Build up the prefix.","position":{"start":{"line":80,"column":1,"offset":1394},"end":{"line":80,"column":39,"offset":1432}}}],"position":{"start":{"line":80,"column":1,"offset":1394},"end":{"line":80,"column":39,"offset":1432}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string[]} strs\n * @return {string}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">longestCommonPrefix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> strs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            prefix <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":82,"column":1,"offset":1434},"end":{"line":106,"column":4,"offset":1948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":108,"column":1,"offset":1950},"end":{"line":108,"column":4,"offset":1953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"☆","position":{"start":{"line":110,"column":1,"offset":1955},"end":{"line":110,"column":2,"offset":1956}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":3,"offset":1957},"end":{"line":110,"column":21,"offset":1975}}}],"position":{"start":{"line":110,"column":2,"offset":1956},"end":{"line":110,"column":22,"offset":1976}}},{"type":"text","value":"☆☆","position":{"start":{"line":110,"column":22,"offset":1976},"end":{"line":110,"column":24,"offset":1978}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":25,"offset":1979},"end":{"line":110,"column":43,"offset":1997}}}],"position":{"start":{"line":110,"column":24,"offset":1978},"end":{"line":110,"column":44,"offset":1998}}},{"type":"text","value":"☆☆","position":{"start":{"line":110,"column":44,"offset":1998},"end":{"line":110,"column":46,"offset":2000}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":110,"column":47,"offset":2001},"end":{"line":110,"column":65,"offset":2019}}}],"position":{"start":{"line":110,"column":46,"offset":2000},"end":{"line":110,"column":66,"offset":2020}}},{"type":"text","value":"☆","position":{"start":{"line":110,"column":66,"offset":2020},"end":{"line":110,"column":67,"offset":2021}}}],"position":{"start":{"line":110,"column":1,"offset":1955},"end":{"line":110,"column":67,"offset":2021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":112,"column":1,"offset":2023},"end":{"line":112,"column":4,"offset":2026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":114,"column":1,"offset":2028},"end":{"line":114,"column":4,"offset":2031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"☆","position":{"start":{"line":116,"column":1,"offset":2033},"end":{"line":116,"column":2,"offset":2034}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":116,"column":3,"offset":2035},"end":{"line":116,"column":21,"offset":2053}}}],"position":{"start":{"line":116,"column":2,"offset":2034},"end":{"line":116,"column":22,"offset":2054}}},{"type":"text","value":"☆☆","position":{"start":{"line":116,"column":22,"offset":2054},"end":{"line":116,"column":24,"offset":2056}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":": .｡. o(≧▽≦)o .｡.:","position":{"start":{"line":116,"column":25,"offset":2057},"end":{"line":116,"column":43,"offset":2075}}}],"position":{"start":{"line":116,"column":24,"offset":2056},"end":{"line":116,"column":44,"offset":2076}}},{"type":"text","value":"☆","position":{"start":{"line":116,"column":44,"offset":2076},"end":{"line":116,"column":45,"offset":2077}}}],"position":{"start":{"line":116,"column":1,"offset":2033},"end":{"line":116,"column":45,"offset":2077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":118,"column":1,"offset":2079},"end":{"line":118,"column":4,"offset":2082}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":119,"column":1,"offset":2083}}}}