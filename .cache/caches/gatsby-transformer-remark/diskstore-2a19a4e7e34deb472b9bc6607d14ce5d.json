{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-f18ded15676a0c6132691c0b84bdfa42-gatsby-remark-prismjs-","val":"<p>Use the File System Route API when you want to create dynamic pages e.g. to create individual blog post pages for your blog.</p>\n<p>You should be able to accomplish most common tasks with this file-based API. If you want more control over the page creation you should use the <a href=\"/docs/reference/config-files/gatsby-node#createPages\"><code class=\"language-text\">createPages</code></a> API.</p>\n<p>Dynamic pages can be created from collections in Gatsby's <a href=\"/docs/conceptual/graphql-concepts/\">GraphQL data layer</a> and to create <a href=\"/docs/how-to/routing/client-only-routes-and-user-authentication\">client-only routes</a>.</p>\n<p>A complete example showcasing all options can be found in <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/route-api\">Gatsby's examples folder</a>.</p>\n<h2>Collection routes</h2>\n<p>Imagine a Gatsby project that sources a <code class=\"language-text\">product.yaml</code> file and multiple Markdown blog posts. At build time, Gatsby will automatically <a href=\"/docs/glossary/#inference\">infer</a> the fields and create multiple <a href=\"/docs/glossary#node\">nodes</a> for both types (<code class=\"language-text\">Product</code> and <code class=\"language-text\">MarkdownRemark</code>).</p>\n<p>To create collection routes, use curly braces (<code class=\"language-text\">{ }</code>) in your filenames to signify dynamic URL segments that relate to a field within the node. Here are a few examples:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/products/{Product.name}.js</code> will generate a route like <code class=\"language-text\">/products/burger</code></li>\n<li><code class=\"language-text\">src/pages/products/{Product.fields__sku}.js</code> will generate a route like <code class=\"language-text\">/products/001923</code></li>\n<li><code class=\"language-text\">src/pages/blog/{MarkdownRemark.parent__(File)__name}.js</code> will generate a route like <code class=\"language-text\">/blog/learning-gatsby</code></li>\n</ul>\n<p>Gatsby creates a page for each node in a collection route. So if you have three markdown files that are blog posts, Gatsby will create the three pages from a collection route. As you add and remove markdown files, Gatsby will add and remove pages.</p>\n<p>Collection routes can be created for any GraphQL data type. Creating new collection routes in Gatsby is a process\nof adding a source plugin, use GraphiQL to identify the type and field to construct the route file name, and then code the route component.</p>\n<h3>Syntax (collection routes)</h3>\n<p>There are some general syntax requirements when using collection routes:</p>\n<ul>\n<li>Dynamic segments of file paths must start and end with curly braces (<code class=\"language-text\">{ }</code>).</li>\n<li>Types are case-sensitive (e.g. <code class=\"language-text\">MarkdownRemark</code> or <code class=\"language-text\">contentfulMyContentType</code>). Check GraphiQL for the correct names.</li>\n<li>Dynamic segments must include both a type and a field e.g. <code class=\"language-text\">{Type.field}</code> or <code class=\"language-text\">{BlogPost.slug}</code>.</li>\n</ul>\n<h3>Nested routes</h3>\n<p>You can use dynamic segments multiple times in a path. For example, you might want to nest product names within its product category. For example:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/products/{Product.category}/{Product.name}.js</code> will generate a route like <code class=\"language-text\">/products/toys/fidget-spinner</code></li>\n<li><code class=\"language-text\">src/pages/products/{Product.category}/{Product.name}/{Product.color}.js</code> will generate a route like <code class=\"language-text\">/products/toys/fidget-spinner/red</code></li>\n</ul>\n<h3>Field syntax</h3>\n<h4>Dot notation</h4>\n<p>Using <code class=\"language-text\">.</code> you signify that you want to access a field on a node of a type.</p>\n<p><code class=\"language-text\">src/pages/products/{Product.name}.js</code> generates the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">allProduct <span class=\"token punctuation\">{</span>\n  nodes <span class=\"token punctuation\">{</span>\n    id # Gatsby always queries <span class=\"token keyword\">for</span> id\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Underscore notation</h4>\n<p>Using <code class=\"language-text\">__</code> (double underscore) you signify that you want to access a nested field on a node.</p>\n<p><code class=\"language-text\">src/pages/products/{Product.fields__sku}.js</code> generates the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">allProduct <span class=\"token punctuation\">{</span>\n  nodes <span class=\"token punctuation\">{</span>\n    id # Gatsby always queries <span class=\"token keyword\">for</span> id\n    fields <span class=\"token punctuation\">{</span>\n      sku\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can nest as deep as necessary, e.g. <code class=\"language-text\">src/pages/products/{Product.fields__date__createdAt}.js</code> generates the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">allProduct <span class=\"token punctuation\">{</span>\n  nodes <span class=\"token punctuation\">{</span>\n    id # Gatsby always queries <span class=\"token keyword\">for</span> id\n    fields <span class=\"token punctuation\">{</span>\n      date <span class=\"token punctuation\">{</span>\n        createdAt\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Parentheses notation</h4>\n<p>Using <code class=\"language-text\">( )</code> you signify that you want to access a <a href=\"https://graphql.org/learn/schema/#union-types\">GraphQL union type</a>. This is often possible with types that Gatsby creates for you. For example, <code class=\"language-text\">MarkdownRemark</code> always has <code class=\"language-text\">File</code> as a parent type, and thus you can also access fields from the <code class=\"language-text\">File</code> node. You can use this multiple levels deep, too, e.g. <code class=\"language-text\">src/pages/blog/{Post.parent__(MarkdownRemark)__parent__(File)__name}.js</code>.</p>\n<p><code class=\"language-text\">src/pages/blog/{MarkdownRemark.parent__(File)__name}.js</code> generates the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token object\">allMarkdownRemark</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span> <span class=\"token comment\"># Gatsby always queries for id</span>\n    <span class=\"token object\">parent</span> <span class=\"token punctuation\">{</span>\n      â€¦ <span class=\"token keyword\">on</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">name</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Collection Route Components</h3>\n<p>Collection route components are passed two dynamic variables. The <code class=\"language-text\">id</code> of each page's node and the\nURL path as <code class=\"language-text\">params</code>. The params is passed to the component as <code class=\"language-text\">props.params</code> and the id as <code class=\"language-text\">props.pageContext.id</code>.</p>\n<p>Both are also passed as variables to the component's GraphQL query so you can query fields from the node. Page querying, including the use of variables, is explained in more depth in <a href=\"/docs/how-to/querying-data/page-query/\">querying data in pages with GraphQL</a>.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>sku <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This is the page query that connects the data to the actual component. Here you can query for any and all fields</span>\n<span class=\"token comment\">// you need access to within your code. Again, since Gatsby always queries for `id` in the collection, you can use that</span>\n<span class=\"token comment\">// to connect to this GraphQL query.</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">    query ($id: String) {</span>\n<span class=\"token string\">        product(id: { eq: $id }) {</span>\n<span class=\"token string\">            fields {</span>\n<span class=\"token string\">                sku</span>\n<span class=\"token string\">            }</span>\n<span class=\"token string\">        }</span>\n<span class=\"token string\">    }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the page <code class=\"language-text\">src/pages/{Product.name}/{Product.coupon}.js</code> you'd have <code class=\"language-text\">props.params.name</code> and <code class=\"language-text\">props.params.coupon</code> available inside <code class=\"language-text\">{Product.coupon}.js</code>.</p>\n<p>If you need to want to create pages for only some nodes in a collection (e.g. filtering out any product of type <code class=\"language-text\">\"Food\"</code>) or customize the variables passed to the query, you should use the <a href=\"/docs/reference/config-files/gatsby-node#createPages\"><code class=\"language-text\">createPages</code></a> API instead as File System Route API doesn't support this at the moment.</p>\n<h3>Routing and linking</h3>\n<p>Gatsby \"slugifies\" every route that gets created from collection pages (by using <a href=\"https://github.com/sindresorhus/slugify\"><code class=\"language-text\">sindresorhus/slugify</code></a>). Or in other words: If you have a route called <code class=\"language-text\">src/pages/wholesome/{Animal.slogan}.js</code> where <code class=\"language-text\">slogan</code> is <code class=\"language-text\">I â™¥ Dogs</code> the final URL will be <code class=\"language-text\">/wholesome/i-love-dogs</code>. Gatsby will convert the field into a human-readable URL format while stripping it of invalid characters.</p>\n<p>When you want to link to a collection route page, it may not always be clear how to construct the URL from scratch.</p>\n<p>To address this issue, Gatsby automatically includes a <code class=\"language-text\">gatsbyPath</code> field on every type used by collection pages. The <code class=\"language-text\">gatsbyPath</code> field must take an argument of the <code class=\"language-text\">filePath</code> it is trying to resolve. This is necessary because itâ€™s possible that one type is used in multiple collection pages.</p>\n<p>There are some general syntax requirements when using the <code class=\"language-text\">filePath</code> argument:</p>\n<ul>\n<li>The path must be an absolute path (starting with a <code class=\"language-text\">/</code>).</li>\n<li>You must omit the file extension.</li>\n<li>You must omit the <code class=\"language-text\">src/pages</code> prefix.</li>\n<li>Your path must not include <code class=\"language-text\">index</code>.</li>\n</ul>\n<h4><code class=\"language-text\">gatsbyPath</code> example</h4>\n<p>Assume that a <code class=\"language-text\">Product</code> type is used in two pages:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/products/{Product.name}.js</code></li>\n<li><code class=\"language-text\">src/pages/discounts/{Product.name}.js</code></li>\n</ul>\n<p>If you wanted to link to the <code class=\"language-text\">products/{Product.name}</code> and <code class=\"language-text\">discounts/{Product.name}</code> routes from your home page, you would have a component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allProduct<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">                    <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>productPath<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>discountPath<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Discount<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  query {</span>\n<span class=\"token string\">    allProduct {</span>\n<span class=\"token string\">      name</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token string\">      productPath: gatsbyPath(filePath: \"/products/{Product.name}\")</span><span class=\"gatsby-highlight-code-line\"><span class=\"token string\">      discountPath: gatsbyPath(filePath: \"/discounts/{Product.name}\")</span><span class=\"token string\">    }</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By using <a href=\"/docs/graphql-reference/#aliasing\">aliasing</a> you can use <code class=\"language-text\">gatsbyPath</code> multiple times.</p>\n<h2>Creating client-only routes</h2>\n<p>Use <a href=\"/docs/how-to/routing/client-only-routes-and-user-authentication\">client-only routes</a> if you have dynamic data that does not live in Gatsby. This might be something like a user settings page, or some other dynamic content that isn't known to Gatsby at build time. In these situations, you will usually create a route with one or more dynamic segments to query data from a server in order to render your page.</p>\n<h3>Syntax (client-only routes)</h3>\n<p>You can use square brackets (<code class=\"language-text\">[ ]</code>) in the file path to mark any dynamic segments of the URL. For example, in order to edit a user, you might want a route like <code class=\"language-text\">/user/:id</code> to fetch the data for whatever <code class=\"language-text\">id</code> is passed into the URL.</p>\n<ul>\n<li><code class=\"language-text\">src/pages/users/[id].js</code> will generate a route like <code class=\"language-text\">/users/:id</code></li>\n<li><code class=\"language-text\">src/pages/users/[id]/group/[groupId].js</code> will generate a route like <code class=\"language-text\">/users/:id/group/:groupId</code></li>\n</ul>\n<h4>Splat routes</h4>\n<p>Gatsby also supports <em>splat</em> (or wildcard) routes, which are routes that will match <em>anything</em> after the splat. These are less common, but still have use cases. Use three periods in square brackets (<code class=\"language-text\">[...]</code>) in a file path to mark a page as a splat route. You can also name the parameter your page receives by adding a name after the three periods (<code class=\"language-text\">[...myNameKey]</code>).</p>\n<p>As an example, suppose that you are rendering images from <a href=\"/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront/\">S3</a> and the URL is actually the key to the asset in AWS. Here is how you might create your file:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/image/[...].js</code> will generate a route like <code class=\"language-text\">/image/*</code>. <code class=\"language-text\">*</code> is accessible in your page's received properties with the key name <code class=\"language-text\">*</code>.</li>\n<li><code class=\"language-text\">src/pages/image/[...awsKey].js</code> will generate a route like <code class=\"language-text\">/image/*awsKey</code>. <code class=\"language-text\">*awsKey</code> is accessible in your page's received properties with the key name <code class=\"language-text\">awsKey</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ImagePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// When visiting a route like `image/hello/world`,</span>\n    <span class=\"token comment\">// the value of `param` is `hello/world`.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ImagePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">awsKey</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// When visiting a route like `image/hello/world`,</span>\n    <span class=\"token comment\">// the value of `param` is `hello/world`.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Splat routes may not live in the same directory as regular client only routes.</p>\n<h3>Examples</h3>\n<p>The dynamic segment of the file name (the part between the square brackets) will be filled in and provided to your components on a <code class=\"language-text\">props.params</code> object. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductsPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> splat <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>awsKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">AppPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> splat <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span>â€˜<span class=\"token operator\">*</span>â€™<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">config</code> function</h2>\n<p>Inside a File System Route template you can export an async function called <code class=\"language-text\">config</code>. You can use this function to:</p>\n<ul>\n<li>Mark the page as deferred or not (see <a href=\"/docs/reference/rendering-options/deferred-static-generation/\">Deferred Static Generation API reference</a>)</li>\n</ul>\n<p>Inside your template:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The rest of your page, including imports, page component &amp; page query etc.</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    {\n      # Your GraphQL query\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">defer</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> data<span class=\"token punctuation\">.</span>someValue<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you export an async <code class=\"language-text\">config</code> function Gatsby will evaluate the returned object and optionally run any GraphQL queries defined inside the outer function. You can't run GraphQL queries inside the inner function.</p>\n<p>The <code class=\"language-text\">params</code> parameter is an object that contains the URL path, see <a href=\"#collection-route-components\">explanation above</a>.</p>\n<p>The inner function of <code class=\"language-text\">config</code> can return an object with one key:</p>\n<ul>\n<li><code class=\"language-text\">defer</code>: Boolean of whether the page should be marked as deferred or not</li>\n</ul>\n<p>Read the <a href=\"/docs/how-to/rendering-options/using-deferred-static-generation/\">Deferred Static Generation guide</a> to see a real-world example.</p>\n<h2>Example use cases</h2>\n<p>Have a look at the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/route-api/src/pages/products\">route-api example</a> for more detail.</p>\n<h3>Collection route + fallback</h3>\n<p>By using a combination of a collection route with a client-only route, you can create a seamless experience when a user tries to visit a URL from the collection route that doesnâ€™t exist (yet) for the collection item. Consider these two file paths:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/products/{Product.name}.js</code> (collection route)</li>\n<li><code class=\"language-text\">src/pages/products/[name].js</code> (client-only route, fallback)</li>\n</ul>\n<p>The collection route will create all available product pages at the time of the <a href=\"/docs/glossary/build/\">build</a>. If you're adding a new product you want to link to but only periodically building your site, you'll need a fallback. By using a client-only route as a fallback you then can load the necessary information for the product on the client until you re-built your site.</p>\n<p>Similarly, the fallback page could also be used for when a product doesn't exist and you want to show some helpful information (like a 404 page).</p>\n<h3>Using one template for multiple routes</h3>\n<p>By placing the template/view for your routes into a reusable component you can display the same information under different routes. Take this example:</p>\n<p>You want to display product information which is both accessible by name and SKU but has the same design. Create two file paths first:</p>\n<ul>\n<li><code class=\"language-text\">src/pages/products/{Product.name}.js</code></li>\n<li><code class=\"language-text\">src/pages/products/{Product.meta__sku}.js</code></li>\n</ul>\n<p>Create a view component at <code class=\"language-text\">src/view/product-view.js</code> that takes in a <code class=\"language-text\">product</code> prop. Use that component in both collection routes, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ProductView <span class=\"token keyword\">from</span> <span class=\"token string\">'../../views/product-view'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> product <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ProductView product<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Product<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query ($id: String!) {\n        product(id: { eq: $id }) {\n            name\n            description\n            appearance\n            meta {\n                createdAt\n                id\n                sku\n            }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can copy the same code to the <code class=\"language-text\">src/pages/products/{Product.meta__sku}.js</code> file.</p>\n<h3>Purely client-only app</h3>\n<p>If you want your Gatsby app to be 100% client-only, you can create a file at <code class=\"language-text\">src/pages/[...].js</code> to catch all requests. See the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/client-only-paths\">client-only-paths example</a> for more detail.</p>"}