{"expireTime":9007200911206588000,"key":"transformer-remark-markdown-html-0db0e8172aa8a6d9dea8b1ec1ce2b72f-gatsby-remark-prismjs-","val":"<h2>Meta</h2>\n<p>Scope:</p>\n<ul>\n<li>This guide is for both beginners and experienced users. The goals are <em>breadth</em> (everything important), <em>specificity</em> (give concrete examples of the most common case), and <em>brevity</em> (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.</li>\n<li>This is written for Linux, with the exception of the \"<a href=\"#macos-only\">macOS only</a>\" and \"<a href=\"#windows-only\">Windows only</a>\" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).</li>\n<li>The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.</li>\n<li>It includes both \"standard\" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use <code class=\"language-text\">apt</code>, <code class=\"language-text\">yum</code>, <code class=\"language-text\">dnf</code>, <code class=\"language-text\">pacman</code>, <code class=\"language-text\">pip</code> or <code class=\"language-text\">brew</code> (as appropriate) to install new programs.</li>\n<li>Use <a href=\"http://explainshell.com/\">Explainshell</a> to get a helpful breakdown of what commands, options, pipes etc. do.</li>\n</ul>\n<h2>Basics</h2>\n<ul>\n<li>Learn basic Bash. Actually, type <code class=\"language-text\">man bash</code> and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning <em>only</em> zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).</li>\n<li>-</li>\n<li>Learn at least one text-based editor well. The <code class=\"language-text\">nano</code> editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (<code class=\"language-text\">vi</code>), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)</li>\n<li>\n<p>Finding documentation:</p>\n<ul>\n<li>Know how to read official documentation with <code class=\"language-text\">man</code> (for the inquisitive, <code class=\"language-text\">man man</code> lists the section numbers, e.g. 1 is \"regular\" commands, 5 is files/conventions, and 8 are for administration). Find man pages with <code class=\"language-text\">apropos</code>.</li>\n<li>Know that some commands are not executables, but Bash builtins, and that you can get help on them with <code class=\"language-text\">help</code> and <code class=\"language-text\">help -d</code>. You can find out whether a command is an executable, shell builtin or an alias by using <code class=\"language-text\">type command</code>.</li>\n<li><code class=\"language-text\">curl cheat.sh/command</code> will give a brief \"cheat sheet\" with common examples of how to use a shell command.</li>\n</ul>\n</li>\n<li>Learn about redirection of output and input using <code class=\"language-text\">></code> and <code class=\"language-text\">&lt;</code> and pipes using <code class=\"language-text\">|</code>. Know <code class=\"language-text\">></code> overwrites the output file and <code class=\"language-text\">>></code> appends. Learn about stdout and stderr.</li>\n<li>-</li>\n<li>Learn about file glob expansion with <code class=\"language-text\">*</code> (and perhaps <code class=\"language-text\">?</code> and <code class=\"language-text\">[</code>...<code class=\"language-text\">]</code>) and quoting and the differen</li>\n<li>-</li>\n<li>Be familiar with Bash job management: <code class=\"language-text\">&amp;</code>, <strong>ctrl-z</strong>, <strong>ctrl-c</strong>, <code class=\"language-text\">jobs</code>, <code class=\"language-text\">fg</code>, <code class=\"language-text\">bg</code>, <code class=\"language-text\">kill</code>, etc.</li>\n<li>-</li>\n<li>Know <code class=\"language-text\">ssh</code>, and the basics of passwordless authentication, via `ssh</li>\n<li>-</li>\n<li>Basic file management: <code class=\"language-text\">ls</code> and <code class=\"language-text\">ls -l</code> (in particular, learn what every column in <code class=\"language-text\">ls -l</code> means), <code class=\"language-text\">less</code>, <code class=\"language-text\">head</code>, <code class=\"language-text\">tail</code> and <code class=\"language-text\">tail -f</code> (or even better, <code class=\"language-text\">less +F</code>), <code class=\"language-text\">ln</code> and <code class=\"language-text\">ln -s</code> (learn the differences and advantages of hard versus soft links), <code class=\"language-text\">chown</code>, <code class=\"language-text\">chmod</code>, <code class=\"language-text\">du</code> (for a quick summary of disk usage: <code class=\"language-text\">du -hs *</code>). For filesystem management, <code class=\"language-text\">df</code>, <code class=\"language-text\">mount</code>, <code class=\"language-text\">fdisk</code>, <code class=\"language-text\">mkfs</code>, <code class=\"language-text\">lsblk</code>. Learn what an inode is (<code class=\"language-text\">ls -i</code> or <code class=\"language-text\">df -i</code>).</li>\n<li>Basic network management: <code class=\"language-text\">ip</code> or <code class=\"language-text\">ifconfig</code>, <code class=\"language-text\">dig</code>, <code class=\"language-text\">traceroute</code>, <code class=\"language-text\">route</code>.</li>\n<li>Learn and use a version control management system, such as <code class=\"language-text\">git</code>.</li>\n<li>Know regular expressions well, and the various flags to <code class=\"language-text\">grep</code>/<code class=\"language-text\">egrep</code>. The <code class=\"language-text\">-i</code>, <code class=\"language-text\">-o</code>, <code class=\"language-text\">-v</code>, <code class=\"language-text\">-A</code>, <code class=\"language-text\">-B</code>, and <code class=\"language-text\">-C</code> options are worth knowing.</li>\n<li>Learn to use <code class=\"language-text\">apt-get</code>, <code class=\"language-text\">yum</code>, <code class=\"language-text\">dnf</code> or <code class=\"language-text\">pacman</code> (depending on distro) to find and install packages. And make sure you have <code class=\"language-text\">pip</code> to install Python-based command-line tools (a few below are easiest to install via <code class=\"language-text\">pip</code>).</li>\n</ul>\n<h2>Everyday use</h2>\n<ul>\n<li>In Bash, use <strong>Tab</strong> to complete arguments or list all available commands and <strong>ctrl-r</strong> to search through command history (after pressing, type to search, press <strong>ctrl-r</strong> repeatedly to cycle through more matches, press <strong>Enter</strong> to execute the found command, or hit the right arrow to put the result in the current line to allow editing).</li>\n<li>-</li>\n<li>In Bash, use <strong>ctrl-w</strong> to delete the last word, and <strong>ctrl-u</strong> to delete the content from current curso</li>\n<li>-</li>\n<li>Alternatively, if you love vi-style key-bindings, use <code class=\"language-text\">set -o vi</code> (and <code class=\"language-text\">set -o emacs</code> to put it back).</li>\n<li>-</li>\n<li>For editing long commands, after setting your editor (f</li>\n<li>-</li>\n<li>To see recent commands, use <code class=\"language-text\">history</code>. Follow with <code class=\"language-text\">!n</code> (where <code class=\"language-text\">n</code> is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being <code class=\"language-text\">!$</code> for last argument and <code class=\"language-text\">!!</code> for last command (see \"HISTORY EXPANSION\" in the man page). However, these are often easily replaced with <strong>ctrl-r</strong> and <strong>alt-.</strong>.</li>\n<li>Go to your home directory with <code class=\"language-text\">cd</code>. Access files relative to your home directory with the <code class=\"language-text\">~</code> prefix (e.g. <code class=\"language-text\">~/.bashrc</code>). In <code class=\"language-text\">sh</code> scripts refer to the home directory as <code class=\"language-text\">$HOME</code>.</li>\n<li>To go back to the previous working directory: <code class=\"language-text\">cd -</code>.</li>\n<li>If you are halfway through typing a command but change your mind, hit <strong>alt-#</strong> to add a <code class=\"language-text\">#</code> at the beginning and enter it as a comment (or use <strong>ctrl-a</strong>, <strong>#</strong>, <strong>enter</strong>). You can then return to it later via command history.</li>\n<li>Use <code class=\"language-text\">xargs</code> (or <code class=\"language-text\">parallel</code>). It's very powerful. Note you can control how many items execute per line (<code class=\"language-text\">-L</code>) as well as parallelism (<code class=\"language-text\">-P</code>). If you're not sure if it'll do the right thing, use <code class=\"language-text\">xargs echo</code> first. Also, <code class=\"language-text\">-I{}</code> is handy. Examples:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">'*.py'</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">grep</span> some_function\n      <span class=\"token function\">cat</span> hosts <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -I<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">ssh</span> root@<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">hostname</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">pstree -p</code> is a helpful display of the process tree.</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">pgrep</code> and <code class=\"language-text\">pkill</code> to find or signal processes by name (<code class=\"language-text\">-f</code> is helpful).</li>\n<li>-</li>\n<li>Know the various signals you can send processes. For example, to suspend a process, use <code class=\"language-text\">kill -STOP [pid]</code>. For the full list, see <code class=\"language-text\">man 7 signal</code></li>\n<li>-</li>\n<li>Use <code class=\"language-text\">nohup</code> or <code class=\"language-text\">disown</code> if you want a background process to keep ru</li>\n<li>-</li>\n<li>Check what processes are listening via <code class=\"language-text\">netstat -lntp</code> or <code class=\"language-text\">ss -plat</code> (for TCP; add <code class=\"language-text\">-u</code> for UDP) or <code class=\"language-text\">lsof -iTCP -sTCP:LISTEN -P -n</code> (which also works on macOS).</li>\n<li>-</li>\n<li>See also <code class=\"language-text\">lsof</code> and <code class=\"language-text\">fuser</code> for open sockets and files.</li>\n<li>-</li>\n<li>See <code class=\"language-text\">uptime</code> or <code class=\"language-text\">w</code> to know how long the system has been running.</li>\n<li>Use <code class=\"language-text\">alias</code> to create shortcuts for commonly used commands. For example, <code class=\"language-text\">alias ll='ls -latr'</code> creates a new alias <code class=\"language-text\">ll</code>.</li>\n<li>Save aliases, shell settings, and functions you commonly use in <code class=\"language-text\">~/.bashrc</code>, and <a href=\"http://superuser.com/a/183980/7106\">arrange for login shells to source it</a>. This will make your setup available in all your shell sessions.</li>\n<li>Put the settings of environment variables as well as commands that should be executed when you login in <code class=\"language-text\">~/.bash_profile</code>. Separate configuration will be needed for shells you launch from graphical environment logins and <code class=\"language-text\">cron</code> jobs.</li>\n<li>Synchronize your configuration files (e.g. <code class=\"language-text\">.bashrc</code> and <code class=\"language-text\">.bash_profile</code>) among various computers with Git.</li>\n<li>Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. <code class=\"language-text\">\"$FOO\"</code>. Prefer the <code class=\"language-text\">-0</code> or <code class=\"language-text\">-print0</code> options to enable null characters to delimit filenames, e.g. <code class=\"language-text\">locate -0 pattern | xargs -0 ls -al</code> or <code class=\"language-text\">find / -print0 -type d | xargs -0 ls -al</code>. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using <code class=\"language-text\">IFS=$'\\n'</code>.</li>\n<li>In Bash scripts, use <code class=\"language-text\">set -x</code> (or the variant <code class=\"language-text\">set -v</code>, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use <code class=\"language-text\">set -e</code> to abort on errors (nonzero exit code). Use <code class=\"language-text\">set -u</code> to detect unset variable usages. Consider <code class=\"language-text\">set -o pipefail</code> too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use <code class=\"language-text\">trap</code> on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token builtin class-name\">set</span> -euo pipefail\n      <span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo 'error: Script failed: see failed command above'\"</span> ERR</code></pre></div>\n<ul>\n<li>In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token comment\"># do something in current dir</span>\n      <span class=\"token punctuation\">(</span>cd /some/other/dir <span class=\"token operator\">&amp;&amp;</span> other-command<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># continue in original dir</span></code></pre></div>\n<ul>\n<li>In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: <code class=\"language-text\">${name:?error message}</code>. For example, if a Bash script requires a single argument, just write <code class=\"language-text\">input_file=${1:?usage: $0 input_file}</code>. Using a default value if a variable is empty: <code class=\"language-text\">${name:-default}</code>. If you want to have an additional (optional) parameter added to the previous example, you can use something like <code class=\"language-text\">output_file=${2:-logfile}</code>. If <code class=\"language-text\">$2</code> is omitted and thus empty, <code class=\"language-text\">output_file</code> will be set to <code class=\"language-text\">logfile</code>. Arithmetic expansion: <code class=\"language-text\">i=$(( (i + 1) % 5 ))</code>. Sequences: <code class=\"language-text\">{1..10}</code>. Trimming of strings: <code class=\"language-text\">${var%suffix}</code> and <code class=\"language-text\">${var#prefix}</code>. For example if <code class=\"language-text\">var=foo.pdf</code>, then <code class=\"language-text\">echo ${var%.pdf}.txt</code> prints <code class=\"language-text\">foo.txt</code>.</li>\n<li>-</li>\n<li>Brace expansion using <code class=\"language-text\">{</code>...<code class=\"language-text\">}</code> can reduce having to re-type similar text and automate combinations of items. This is helpful in examples like <code class=\"language-text\">mv foo.{txt,pdf} some-dir</code> (which moves both files), <code class=\"language-text\">cp somefile{,.bak}</code> (which expands to <code class=\"language-text\">cp somefile somefile.bak</code>) or <code class=\"language-text\">mkdir -p test-{a,b,c}/subtest-{1,2,3}</code> (which expands all possible combinations and creates a directory tree). Brace expansion is performe</li>\n<li>-</li>\n<li>The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like <code class=\"language-text\">{1..20}</code> cannot be expressed with variables using <code class=\"language-text\">{$a..$b}</code>. Use <code class=\"language-text\">seq</code> or a <code class=\"language-text\">for</code> loop instead, e.g., <code class=\"language-text\">seq $a $b</code> or <code class=\"language-text\">for((i=a; i&lt;=b; i++)); do ... ; done</code>.)</li>\n<li>The output of a command can be treated like a file via <code class=\"language-text\">&lt;(some command)</code> (known as process substitution). For example, compare local <code class=\"language-text\">/etc/hosts</code> with a remote one:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">diff</span> /etc/hosts <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">ssh</span> somehost <span class=\"token function\">cat</span> /etc/hosts<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\"># Your code here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>A \"here document\" allows <a href=\"https://www.tldp.org/LDP/abs/html/here-docs.html\">redirection of multiple lines of input</a> as if from a file:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat &lt;&lt;EOF\ninput\non multiple lines\nEOF</code></pre></div>\n<ul>\n<li>In Bash, redirect both standard output and standard error via: <code class=\"language-text\">some-command >logfile 2>&amp;1</code> or <code class=\"language-text\">some-command &amp;>logfile</code>. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add <code class=\"language-text\">&lt;/dev/null</code>.</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">man ascii</code> for a good ASCII table, with hex and decimal values. For general encoding info, <code class=\"language-text\">man unicode</code>, <code class=\"language-text\">man utf-8</code>, and <code class=\"language-text\">man latin1</code> are helpful.</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">screen</code> or <a href=\"https://tmux.github.io/\"><code class=\"language-text\">tmux</code></a> to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. <code class=\"language-text\">byobu</code> can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is <a href=\"https://github.com/bogner/dtach\"><code class=\"language-text\">dtach</code></a>.</li>\n<li>In ssh, knowing how to port tunnel with <code class=\"language-text\">-L</code> or <code class=\"language-text\">-D</code> (and occasionally <code class=\"language-text\">-R</code>) is useful, e.g. to access web sites from a remote server.</li>\n<li>It can be useful to make a few optimizations to your ssh configuration; for example, this <code class=\"language-text\">~/.ssh/config</code> contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes</code></pre></div>\n<ul>\n<li>A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: <code class=\"language-text\">StrictHostKeyChecking=no</code>, <code class=\"language-text\">ForwardAgent=yes</code></li>\n<li>-</li>\n<li>Consider <a href=\"https://mosh.mit.edu/\"><code class=\"language-text\">mosh</code></a> an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).</li>\n<li>To get the permissions on a file in octal form, which is useful for system configuration but not available in <code class=\"language-text\">ls</code> and easy to bungle, use something like</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">stat</span> -c <span class=\"token string\">'%A %a %n'</span> /etc/timezone</code></pre></div>\n<ul>\n<li>For interactive selection of values from the output of another command, use <a href=\"https://github.com/mooz/percol\"><code class=\"language-text\">percol</code></a> or <a href=\"https://github.com/junegunn/fzf\"><code class=\"language-text\">fzf</code></a>.</li>\n<li>-</li>\n<li>For interaction with files based on the output of another command (like <code class=\"language-text\">git</code>), use <code class=\"language-text\">fpp</code> (<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>).</li>\n<li>For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:\n<code class=\"language-text\">python -m SimpleHTTPServer 7777</code> (for port 7777 and Python 2) and <code class=\"language-text\">python -m http.server 7777</code> (for port 7777 and Python 3).</li>\n<li>For running a command as another user, use <code class=\"language-text\">sudo</code>. Defaults to running as root; use <code class=\"language-text\">-u</code> to specify another user. Use <code class=\"language-text\">-i</code> to login as that user (you will be asked for <em>your</em> password).</li>\n<li>-</li>\n<li>For switching the shell to another user, use <code class=\"language-text\">su username</code> or <code class=\"language-text\">su - username</code>. The latter with \"-\" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password <em>of the user you are switching to</em>.</li>\n<li>-</li>\n<li>Know about the <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K limit</a> on command lines. This \"Argument list too long\" error is common when wildcard matching large numbers of files. (When this happens alternatives like <code class=\"language-text\">find</code> and <code class=\"language-text\">xargs</code> may help.)</li>\n<li>For a basic calculator (and of course access to Python in general), use the <code class=\"language-text\">python</code> interpreter. For example,</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> 2+3\n5</code></pre></div>\n<h2>Processing files and data</h2>\n<ul>\n<li>To locate a file by name in the current directory, <code class=\"language-text\">find . -iname '*something*'</code> (or similar). To find a file anywhere by name, use <code class=\"language-text\">locate something</code> (but bear in mind <code class=\"language-text\">updatedb</code> may not have indexed recently created files).</li>\n<li>-</li>\n<li>For general searching through source or data f</li>\n<li>-</li>\n<li>To convert HTML to text: <code class=\"language-text\">lynx -dump -stdin</code></li>\n<li>-</li>\n<li>For Markdown, HTML, and all kinds of document conversion,</li>\n<li>-</li>\n<li>If you must handle XML, <code class=\"language-text\">xmlstarlet</code> is old but good.</li>\n<li>-</li>\n<li>For JSON, use <a href=\"http://stedolan.github.io/jq/\"><code class=\"language-text\">jq</code></a>. For interactive use, also see [<code class=\"language-text\">jid</code>](<a href=\"https://github.com/si\">https://github.com/si</a></li>\n<li>-</li>\n<li>For YAML, use <a href=\"https://github.com/0k/shyaml\"><code class=\"language-text\">shyaml</code></a>.</li>\n<li>-</li>\n<li>For Excel or CSV files, <a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> provides <code class=\"language-text\">in2csv</code>, <code class=\"language-text\">csvcut</code>, <code class=\"language-text\">csvjoin</code>, <code class=\"language-text\">csvgrep</code>, etc.</li>\n<li>-</li>\n<li>For Amazon S3, <a href=\"https://github.com/s3tools/s3cmd\"><code class=\"language-text\">s3cmd</code></a> is convenient and [<code class=\"language-text\">s4cmd</code>](<a href=\"https://gi\">https://gi</a></li>\n<li>-</li>\n<li>Know about <code class=\"language-text\">sort</code> and <code class=\"language-text\">uniq</code>, including uniq's <code class=\"language-text\">-u</code> and <code class=\"language-text\">-d</code> options -- see one-liners below. See also <code class=\"language-text\">comm</code>.</li>\n<li>Know about <code class=\"language-text\">cut</code>, <code class=\"language-text\">paste</code>, and <code class=\"language-text\">join</code> to manipulate text files. Many people use <code class=\"language-text\">cut</code> but forget about <code class=\"language-text\">join</code>.</li>\n<li>Know about <code class=\"language-text\">wc</code> to count newlines (<code class=\"language-text\">-l</code>), characters (<code class=\"language-text\">-m</code>), words (<code class=\"language-text\">-w</code>) and bytes (<code class=\"language-text\">-c</code>).</li>\n<li>Know about <code class=\"language-text\">tee</code> to copy from stdin to a file and also to stdout, as in <code class=\"language-text\">ls -al | tee file.txt</code>.</li>\n<li>For more complex calculations, including grouping, reversing fields, and statistical calculations, consider <a href=\"https://www.gnu.org/software/datamash/\"><code class=\"language-text\">datamash</code></a>.</li>\n<li>Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set <code class=\"language-text\">LANG</code> or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run <em>many times</em> slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using <code class=\"language-text\">export LC_ALL=C</code>.</li>\n<li>You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in <code class=\"language-text\">TZ=Pacific/Fiji date</code>.</li>\n<li>Know basic <code class=\"language-text\">awk</code> and <code class=\"language-text\">sed</code> for simple data munging. See <a href=\"#one-liners\">One-liners</a> for examples.</li>\n<li>To replace all occurrences of a string in place, in one or more files:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      perl -pi.bak -e <span class=\"token string\">'s/old-string/new-string/g'</span> my-files-*.txt</code></pre></div>\n<ul>\n<li>To rename multiple files and/or search and replace within files, try <a href=\"https://github.com/jlevy/repren\"><code class=\"language-text\">repren</code></a>. (In some cases the <code class=\"language-text\">rename</code> command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token comment\"># Full rename of filenames, directories, and contents foo -> bar:</span>\n      repren --full --preserve-case --from foo --to bar <span class=\"token builtin class-name\">.</span>\n      <span class=\"token comment\"># Recover backup files whatever.bak -> whatever:</span>\n      repren --renames --from <span class=\"token string\">'(.*)\\.bak'</span> --to <span class=\"token string\">'\\1'</span> *.bak\n      <span class=\"token comment\"># Same as above, using rename, if available:</span>\n      <span class=\"token function\">rename</span> <span class=\"token string\">'s/\\.bak$//'</span> *.bak</code></pre></div>\n<ul>\n<li>As the man page says, <code class=\"language-text\">rsync</code> really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using <code class=\"language-text\">rsync</code> instead of <code class=\"language-text\">scp</code> allows recovery of a transfer without restarting from scratch. It also is among the <a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">fastest ways</a> to delete large numbers of files:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> empty <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rsync</span> -r --delete empty/ some-dir <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rmdir</span> some-dir</code></pre></div>\n<ul>\n<li>For monitoring progress when processing files, use <a href=\"http://www.ivarch.com/programs/pv.shtml\"><code class=\"language-text\">pv</code></a>, <a href=\"https://github.com/dmerejkowsky/pycp\"><code class=\"language-text\">pycp</code></a>, <a href=\"https://github.com/dspinellis/pmonitor\"><code class=\"language-text\">pmonitor</code></a>, <a href=\"https://github.com/Xfennec/progress\"><code class=\"language-text\">progress</code></a>, <code class=\"language-text\">rsync --progress</code>, or, for block-level copying, <code class=\"language-text\">dd status=progress</code>.</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">shuf</code> to shuffle or select random lines from a file.</li>\n<li>-</li>\n<li>Know <code class=\"language-text\">sort</code>'s options. For numbers, use <code class=\"language-text\">-n</code>, or <code class=\"language-text\">-h</code> for handling human-readable numbers (e.g. from <code class=\"language-text\">du -h</code>). Know how keys work (<code class=\"language-text\">-t</code> and <code class=\"language-text\">-k</code>). In particular, watch out that you need to write <code class=\"language-text\">-k1,1</code> to sort by only the first field; <code class=\"language-text\">-k1</code> means sort according to the whole line. Stable sort (<code class=\"language-text\">sort -s</code>) ca</li>\n<li>-</li>\n<li>If you ever need to write a tab literal in a command line in Bash (e.g. for the -t</li>\n<li>-</li>\n<li>The standard tools for patching source code are <code class=\"language-text\">diff</code> and <code class=\"language-text\">patch</code>. See also <code class=\"language-text\">diffstat</code> for summary statistics of a diff and <code class=\"language-text\">sdiff</code> for a side-by-side diff. Note <code class=\"language-text\">diff -r</code> works for entire directories. Use <code class=\"language-text\">diff -r tree1 tree2 | diffstat</code> for a summary of changes. Use <code class=\"language-text\">vimdiff</code> to compare and edit files.</li>\n<li>For binary files, use <code class=\"language-text\">hd</code>, <code class=\"language-text\">hexdump</code> or <code class=\"language-text\">xxd</code> for simple hex dumps and <code class=\"language-text\">bvi</code>, <code class=\"language-text\">hexedit</code> or <code class=\"language-text\">biew</code> for binary editing.</li>\n<li>Also for binary files, <code class=\"language-text\">strings</code> (plus <code class=\"language-text\">grep</code>, etc.) lets you find bits of text.</li>\n<li>For binary diffs (delta compression), use <code class=\"language-text\">xdelta3</code>.</li>\n<li>To convert text encodings, try <code class=\"language-text\">iconv</code>. Or <code class=\"language-text\">uconv</code> for more advanced use; it supports some advanced Unicode things. For example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token comment\"># Displays hex codes or actual names of characters (useful for debugging):</span>\n      uconv -f utf-8 -t utf-8 -x <span class=\"token string\">'::Any-Hex;'</span> <span class=\"token operator\">&lt;</span> input.txt\n      uconv -f utf-8 -t utf-8 -x <span class=\"token string\">'::Any-Name;'</span> <span class=\"token operator\">&lt;</span> input.txt\n      <span class=\"token comment\"># Lowercase and removes all accents (by expanding and dropping them):</span>\n      uconv -f utf-8 -t utf-8 -x <span class=\"token string\">'::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;'</span> <span class=\"token operator\">&lt;</span> input.txt <span class=\"token operator\">></span> output.txt</code></pre></div>\n<ul>\n<li>To split files into pieces, see <code class=\"language-text\">split</code> (to split by size) and <code class=\"language-text\">csplit</code> (to split by a pattern).</li>\n<li>-</li>\n<li>Date and time: To get the current date and time in the helpful [ISO 8601](h</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">zless</code>, <code class=\"language-text\">zmore</code>, <code class=\"language-text\">zcat</code>, and <code class=\"language-text\">zgrep</code> to operate on compressed files.</li>\n<li>File attributes are settable via <code class=\"language-text\">chattr</code> and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag: <code class=\"language-text\">sudo chattr +i /critical/directory/or/file</code></li>\n<li>Use <code class=\"language-text\">getfacl</code> and <code class=\"language-text\">setfacl</code> to save and restore file permissions. For example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">   getfacl -R /some/path <span class=\"token operator\">></span> permissions.txt\n   setfacl --restore<span class=\"token operator\">=</span>permissions.txt</code></pre></div>\n<ul>\n<li>To create empty files quickly, use <code class=\"language-text\">truncate</code> (creates <a href=\"https://en.wikipedia.org/wiki/Sparse_file\">sparse file</a>), <code class=\"language-text\">fallocate</code> (ext4, xfs, btrfs and ocfs2 filesystems), <code class=\"language-text\">xfs_mkfile</code> (almost any filesystems, comes in xfsprogs package), <code class=\"language-text\">mkfile</code> (for Unix-like systems like Solaris, Mac OS).</li>\n</ul>\n<h2>System debugging</h2>\n<ul>\n<li>For web debugging, <code class=\"language-text\">curl</code> and <code class=\"language-text\">curl -I</code> are handy, or their <code class=\"language-text\">wget</code> equivalents, or the more modern <a href=\"https://github.com/jkbrzt/httpie\"><code class=\"language-text\">httpie</code></a>.</li>\n<li>-</li>\n<li>To know current cpu/disk status, the classic tools are `t</li>\n<li>-</li>\n<li>For network connection details, use <code class=\"language-text\">netstat</code> and <code class=\"language-text\">ss</code>.</li>\n<li>-</li>\n<li>For a quick overview of what's happening on a system, <code class=\"language-text\">dstat</code> is especially useful. For broades</li>\n<li>-</li>\n<li>To know memory status, run and understand the output of <code class=\"language-text\">free</code> and <code class=\"language-text\">vmstat</code>. In particular, be aware the \"cached\" value is memory held by the Linux kernel a</li>\n<li>-</li>\n<li>Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run <code class=\"language-text\">kill -3 &lt;pid></code> and a full stack trace and heap summary (including generational</li>\n<li>-</li>\n<li>Use <a href=\"http://www.bitwizard.nl/mtr/\"><code class=\"language-text\">mtr</code></a> as a better traceroute, to identify network issues.</li>\n<li>-</li>\n<li>For looking at why a disk is full, <a href=\"https://dev.yorhel.nl/ncdu\"><code class=\"language-text\">ncdu</code></a> saves time over the usual commands like <code class=\"language-text\">du -sh *</code>.</li>\n<li>-</li>\n<li>To find which socket or process is using bandwidth, try <a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code class=\"language-text\">iftop</code></a> or <a href=\"https://github.com/raboof/nethogs\"><code class=\"language-text\">nethogs</code></a>.</li>\n<li>-</li>\n<li>The <code class=\"language-text\">ab</code> tool (comes with Apache) is helpful for quick-and-dirty checking of web server perform</li>\n<li>-</li>\n<li>For more serious network debugging, <a href=\"https://wireshark.org/\"><code class=\"language-text\">wireshark</code></a>, <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code class=\"language-text\">tshark</code></a>, or <a href=\"http://ngrep.sourceforge.net/\"><code class=\"language-text\">ngrep</code></a>.</li>\n<li>Know about <code class=\"language-text\">strace</code> and <code class=\"language-text\">ltrace</code>. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (<code class=\"language-text\">-c</code>), and the ability to attach to a running process (<code class=\"language-text\">-p</code>). Use trace child option (<code class=\"language-text\">-f</code>) to avoid missing important calls.</li>\n<li>Know about <code class=\"language-text\">ldd</code> to check shared libraries etc — but <a href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\">never run it on untrusted files</a>.</li>\n<li>Know how to connect to a running process with <code class=\"language-text\">gdb</code> and get its stack traces.</li>\n<li>Use <code class=\"language-text\">/proc</code>. It's amazingly helpful sometimes when debugging live problems. Examples: <code class=\"language-text\">/proc/cpuinfo</code>, <code class=\"language-text\">/proc/meminfo</code>, <code class=\"language-text\">/proc/cmdline</code>, <code class=\"language-text\">/proc/xxx/cwd</code>, <code class=\"language-text\">/proc/xxx/exe</code>, <code class=\"language-text\">/proc/xxx/fd/</code>, <code class=\"language-text\">/proc/xxx/smaps</code> (where <code class=\"language-text\">xxx</code> is the process id or pid).</li>\n<li>When debugging why something went wrong in the past, <a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code class=\"language-text\">sar</code></a> can be very helpful. It shows historic statistics on CPU, memory, network, etc.</li>\n<li>For deeper systems and performance analyses, look at <code class=\"language-text\">stap</code> (<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>), <a href=\"https://en.wikipedia.org/wiki/Perf_%28Linux%29\"><code class=\"language-text\">perf</code></a>, and <a href=\"https://github.com/draios/sysdig\"><code class=\"language-text\">sysdig</code></a>.</li>\n<li>Check what OS you're on with <code class=\"language-text\">uname</code> or <code class=\"language-text\">uname -a</code> (general Unix/kernel info) or <code class=\"language-text\">lsb_release -a</code> (Linux distro info).</li>\n<li>Use <code class=\"language-text\">dmesg</code> whenever something's acting really funny (it could be hardware or driver issues).</li>\n<li>If you delete a file and it doesn't free up expected disk space as reported by <code class=\"language-text\">du</code>, check whether the file is in use by a process:\n<code class=\"language-text\">lsof | grep deleted | grep \"filename-of-my-big-file\"</code></li>\n</ul>\n<h2>One-liners</h2>\n<p>A few examples of piecing together commands:</p>\n<ul>\n<li>It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via <code class=\"language-text\">sort</code>/<code class=\"language-text\">uniq</code>. Suppose <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the <code class=\"language-text\">-T</code> option if <code class=\"language-text\">/tmp</code> is on a small root partition.) See also the note about <code class=\"language-text\">LC_ALL</code> above and <code class=\"language-text\">sort</code>'s <code class=\"language-text\">-u</code> option (left out for clarity below).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">sort</span> a b <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">></span> c   <span class=\"token comment\"># c is a union b</span>\n      <span class=\"token function\">sort</span> a b <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -d <span class=\"token operator\">></span> c   <span class=\"token comment\"># c is a intersect b</span>\n      <span class=\"token function\">sort</span> a b b <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -u <span class=\"token operator\">></span> c   <span class=\"token comment\"># c is set difference a - b</span></code></pre></div>\n<ul>\n<li>Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">      diff &lt;(jq --sort-keys . &lt; file1.json) &lt;(jq --sort-keys . &lt; file2.json) | colordiff | less -R</code></pre></div>\n<ul>\n<li>Use <code class=\"language-text\">grep . *</code> to quickly examine the contents of all files in a directory (so each line is paired with the filename), or <code class=\"language-text\">head -100 *</code> (so each file has a heading). This can be useful for directories filled with config settings like those in <code class=\"language-text\">/sys</code>, <code class=\"language-text\">/proc</code>, <code class=\"language-text\">/etc</code>.</li>\n<li>-</li>\n<li>Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">awk</span> <span class=\"token string\">'{ x += $3 } END { print x }'</span> myfile</code></pre></div>\n<ul>\n<li>To see sizes/dates on a tree of files, this is like a recursive <code class=\"language-text\">ls -l</code> but is easier to read than <code class=\"language-text\">ls -lR</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -type f -ls</code></pre></div>\n<ul>\n<li>Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an <code class=\"language-text\">acct_id</code> parameter that is present in the URL. If you want a tally of how many requests for each <code class=\"language-text\">acct_id</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token function\">egrep</span> -o <span class=\"token string\">'acct_id=[0-9]+'</span> access.log <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token operator\">=</span> -f2 <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -c <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -rn</code></pre></div>\n<ul>\n<li>To continuously monitor changes, use <code class=\"language-text\">watch</code>, e.g. check changes to files in a directory with <code class=\"language-text\">watch -d -n 2 'ls -rtlh | tail'</code> or to network settings while troubleshooting your wifi settings with <code class=\"language-text\">watch -d -n 2 ifconfig</code>.</li>\n<li>-</li>\n<li>Run this function to get a random tip from this document (parses Markdown and extracts an item):</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">      <span class=\"token keyword\">function</span> <span class=\"token function-name function\">taocl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">curl</span> -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md <span class=\"token operator\">|</span>\n          <span class=\"token function\">sed</span> <span class=\"token string\">'/cowsay[.]png/d'</span> <span class=\"token operator\">|</span>\n          pandoc -f markdown -t html <span class=\"token operator\">|</span>\n          xmlstarlet fo --html --dropdtd <span class=\"token operator\">|</span>\n          xmlstarlet sel -t -v <span class=\"token string\">\"(html/body/ul/li[count(p)>0])[<span class=\"token environment constant\">$RANDOM</span> mod last()+1]\"</span> <span class=\"token operator\">|</span>\n          xmlstarlet unesc <span class=\"token operator\">|</span> <span class=\"token function\">fmt</span> -80 <span class=\"token operator\">|</span> <span class=\"token function\">iconv</span> -t US\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Obscure but useful</h2>\n<ul>\n<li><code class=\"language-text\">expr</code>: perform arithmetic or boolean operations or evaluate regular expressions</li>\n<li>-</li>\n<li><code class=\"language-text\">m4</code>: simple macro processor</li>\n<li>-</li>\n<li><code class=\"language-text\">yes</code>: print a string a lot</li>\n<li>-</li>\n<li><code class=\"language-text\">cal</code>: nice calendar</li>\n<li>-</li>\n<li><code class=\"language-text\">env</code>: run a command (useful in</li>\n<li>-</li>\n<li><code class=\"language-text\">printenv</code>: print out enviro</li>\n<li>-</li>\n<li><code class=\"language-text\">look</code>: find English words (or lines in a file) beginning</li>\n<li>-</li>\n<li><code class=\"language-text\">cut</code>, <code class=\"language-text\">paste</code> and `jo</li>\n<li>-</li>\n<li><code class=\"language-text\">fmt</code>: format text paragrap</li>\n<li>-</li>\n<li><code class=\"language-text\">pr</code>: format text into pages/colum</li>\n<li>-</li>\n<li><code class=\"language-text\">fold</code>: wrap lines of text</li>\n<li>-</li>\n<li><code class=\"language-text\">column</code>: format text fields into aligned, f</li>\n<li>-</li>\n<li><code class=\"language-text\">expand</code> and <code class=\"language-text\">unexpand</code>: convert between tabs and spaces</li>\n<li>-</li>\n<li><code class=\"language-text\">nl</code>: add line numbers</li>\n<li>-</li>\n<li><code class=\"language-text\">seq</code>: print numbers</li>\n<li>-</li>\n<li><code class=\"language-text\">bc</code>: calculator</li>\n<li>-</li>\n<li><code class=\"language-text\">factor</code>: factor integers</li>\n<li>-</li>\n<li><a href=\"https://gnupg.org/\"><code class=\"language-text\">gpg</code></a>: encrypt and si</li>\n<li>-</li>\n<li><code class=\"language-text\">toe</code>: table of terminfo entries</li>\n<li>-</li>\n<li><code class=\"language-text\">nc</code>: network debugging and data transfer</li>\n<li>-</li>\n<li><code class=\"language-text\">socat</code>: socket relay and tcp port</li>\n<li>-</li>\n<li>[<code class=\"language-text\">slurm</code>](<a href=\"https://github.com/\">https://github.com/</a></li>\n<li>-</li>\n<li><code class=\"language-text\">dd</code>: moving data between files or devices</li>\n<li>-</li>\n<li><code class=\"language-text\">file</code>: identify type of a file</li>\n<li>-</li>\n<li><code class=\"language-text\">tree</code>: display directories and subdirectories as a nesting tree;</li>\n<li>-</li>\n<li><code class=\"language-text\">stat</code>: file info</li>\n<li>-</li>\n<li><code class=\"language-text\">time</code>: execute and time a command</li>\n<li>-</li>\n<li><code class=\"language-text\">timeout</code>: execute a command for specified amount of time and stop the process when the s</li>\n<li>-</li>\n<li><code class=\"language-text\">lockfile</code>: create semaphor</li>\n<li>-</li>\n<li><code class=\"language-text\">logrotate</code>: rotate, compress and</li>\n<li>-</li>\n<li><code class=\"language-text\">watch</code>: run a command</li>\n<li>-</li>\n<li><a href=\"https://github.com/joh/when-changed\"><code class=\"language-text\">when-changed</code></a>: runs any command you spe</li>\n<li>-</li>\n<li><code class=\"language-text\">tac</code>: print files in rev</li>\n<li>-</li>\n<li><code class=\"language-text\">comm</code>: compare sorted files line by line</li>\n<li>-</li>\n<li><code class=\"language-text\">strings</code>: extract text from binary files</li>\n<li>-</li>\n<li><code class=\"language-text\">tr</code>: character translation or manipulation</li>\n<li>-</li>\n<li><code class=\"language-text\">iconv</code> or <code class=\"language-text\">uconv</code>: conversion for text encodings</li>\n<li><code class=\"language-text\">split</code> and <code class=\"language-text\">csplit</code>: splitting files</li>\n<li><code class=\"language-text\">sponge</code>: read all input before writing it, useful for reading from then writing to the same file, e.g., <code class=\"language-text\">grep -v something some-file | sponge some-file</code></li>\n<li><code class=\"language-text\">units</code>: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also <code class=\"language-text\">/usr/share/units/definitions.units</code>)</li>\n<li><code class=\"language-text\">apg</code>: generates random passwords</li>\n<li><code class=\"language-text\">xz</code>: high-ratio file compression</li>\n<li><code class=\"language-text\">ldd</code>: dynamic library info</li>\n<li><code class=\"language-text\">nm</code>: symbols from object files</li>\n<li><code class=\"language-text\">ab</code> or <a href=\"https://github.com/wg/wrk\"><code class=\"language-text\">wrk</code></a>: benchmarking web servers</li>\n<li><code class=\"language-text\">strace</code>: system call debugging</li>\n<li><a href=\"http://www.bitwizard.nl/mtr/\"><code class=\"language-text\">mtr</code></a>: better traceroute for network debugging</li>\n<li><code class=\"language-text\">cssh</code>: visual concurrent shell</li>\n<li><code class=\"language-text\">rsync</code>: sync files and folders over SSH or in local file system</li>\n<li><a href=\"https://wireshark.org/\"><code class=\"language-text\">wireshark</code></a> and <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code class=\"language-text\">tshark</code></a>: packet capture and network debugging</li>\n<li><a href=\"http://ngrep.sourceforge.net/\"><code class=\"language-text\">ngrep</code></a>: grep for the network layer</li>\n<li><code class=\"language-text\">host</code> and <code class=\"language-text\">dig</code>: DNS lookups</li>\n<li><code class=\"language-text\">lsof</code>: process file descriptor and socket info</li>\n<li><code class=\"language-text\">dstat</code>: useful system stats</li>\n<li><a href=\"https://github.com/nicolargo/glances\"><code class=\"language-text\">glances</code></a>: high level, multi-subsystem overview</li>\n<li><code class=\"language-text\">iostat</code>: Disk usage stats</li>\n<li><code class=\"language-text\">mpstat</code>: CPU usage stats</li>\n<li><code class=\"language-text\">vmstat</code>: Memory usage stats</li>\n<li><code class=\"language-text\">htop</code>: improved version of top</li>\n<li><code class=\"language-text\">last</code>: login history</li>\n<li><code class=\"language-text\">w</code>: who's logged on</li>\n<li><code class=\"language-text\">id</code>: user/group identity info</li>\n<li><a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code class=\"language-text\">sar</code></a>: historic system stats</li>\n<li><a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code class=\"language-text\">iftop</code></a> or <a href=\"https://github.com/raboof/nethogs\"><code class=\"language-text\">nethogs</code></a>: network utilization by socket or process</li>\n<li><code class=\"language-text\">ss</code>: socket statistics</li>\n<li><code class=\"language-text\">dmesg</code>: boot and system error messages</li>\n<li><code class=\"language-text\">sysctl</code>: view and configure Linux kernel parameters at run time</li>\n<li><code class=\"language-text\">hdparm</code>: SATA/ATA disk manipulation/performance</li>\n<li><code class=\"language-text\">lsblk</code>: list block devices: a tree view of your disks and disk partitions</li>\n<li><code class=\"language-text\">lshw</code>, <code class=\"language-text\">lscpu</code>, <code class=\"language-text\">lspci</code>, <code class=\"language-text\">lsusb</code>, <code class=\"language-text\">dmidecode</code>: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.</li>\n<li><code class=\"language-text\">lsmod</code> and <code class=\"language-text\">modinfo</code>: List and show details of kernel modules.</li>\n<li><code class=\"language-text\">fortune</code>, <code class=\"language-text\">ddate</code>, and <code class=\"language-text\">sl</code>: um, well, it depends on whether you consider steam locomotives and Zippy quotations \"useful\"</li>\n</ul>\n<h2>macOS only</h2>\n<p>These are items relevant <em>only</em> on macOS.</p>\n<ul>\n<li>Package management with <code class=\"language-text\">brew</code> (Homebrew) and/or <code class=\"language-text\">port</code> (MacPorts). These can be used to install on macOS many of the above commands.</li>\n<li>-</li>\n<li>Copy output of any command to a desktop app with <code class=\"language-text\">pbcopy</code> and paste input from one with <code class=\"language-text\">pbpaste</code>.</li>\n<li>-</li>\n<li>To enable the Option key in macOS Terminal as an alt key (such as used in the commands above lik</li>\n<li>-</li>\n<li>To open a file with a desktop app, use <code class=\"language-text\">open</code> or <code class=\"language-text\">open -a /Applications/Whatever.app</code>.</li>\n<li>Spotlight: Search files with <code class=\"language-text\">mdfind</code> and list metadata (such as photo EXIF info) with <code class=\"language-text\">mdls</code>.</li>\n<li>Be aware macOS is based on BSD Unix, and many commands (for example <code class=\"language-text\">ps</code>, <code class=\"language-text\">ls</code>, <code class=\"language-text\">tail</code>, <code class=\"language-text\">awk</code>, <code class=\"language-text\">sed</code>) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading \"BSD General Commands Manual.\" In some cases GNU versions can be installed, too (such as <code class=\"language-text\">gawk</code> and <code class=\"language-text\">gsed</code> for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or <code class=\"language-text\">perl</code>) or test carefully.</li>\n<li>To get macOS release information, use <code class=\"language-text\">sw_vers</code>.</li>\n</ul>\n<h2>Windows only</h2>\n<p>These items are relevant <em>only</em> on Windows.</p>\n<h3>Ways to obtain Unix tools under Windows</h3>\n<ul>\n<li>Access the power of the Unix shell under Microsoft Windows by installing <a href=\"https://cygwin.com/\">Cygwin</a>. Most of the things described in this document will work out of the box.</li>\n<li>-</li>\n<li>On Windows 10, you can use <a href=\"https://msdn.microsoft.com/commandline/wsl/about\">Windows Subsystem for Linux (WSL)</a>, which provides a familiar Bash environment with Unix command line utilities.</li>\n<li>-</li>\n<li>If you mainly want to use GNU developer tools (such as GCC) on Windows, consider <a href=\"http://www.mingw.org/\">MinGW</a> and its <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.</li>\n<li>Another option to get Unix look and feel under Windows is <a href=\"https://github.com/dthree/cash\">Cash</a>. Note that only very few Unix commands and command-line options are available in this environment.</li>\n</ul>\n<h3>Useful Windows command-line tools</h3>\n<ul>\n<li>You can perform and script most Windows system administration tasks from the command line by learning and using <code class=\"language-text\">wmic</code>.</li>\n<li>-</li>\n<li>Native command-line Windows networking tools you may find useful include <code class=\"language-text\">ping</code>, <code class=\"language-text\">ipconfig</code>, <code class=\"language-text\">tracert</code>, and <code class=\"language-text\">netstat</code>.</li>\n<li>You can perform <a href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\">many useful Windows tasks</a> by invoking the <code class=\"language-text\">Rundll32</code> command.</li>\n</ul>\n<h3>Cygwin tips and tricks</h3>\n<ul>\n<li>Install additional Unix programs with the Cygwin's package manager.</li>\n<li>-</li>\n<li>Use <code class=\"language-text\">mintty</code> as your command-line window.</li>\n<li>-</li>\n<li>Access the Windows clipboard through `/dev/cl</li>\n<li>-</li>\n<li>Run <code class=\"language-text\">cygstart</code> to open an arbitrary file through its registered application.</li>\n<li>Access the Windows registry with <code class=\"language-text\">regtool</code>.</li>\n<li>Note that a <code class=\"language-text\">C:\\</code> Windows drive path becomes <code class=\"language-text\">/cygdrive/c</code> under Cygwin, and that Cygwin's <code class=\"language-text\">/</code> appears under <code class=\"language-text\">C:\\cygwin</code> on Windows. Convert between Cygwin and Windows-style file paths with <code class=\"language-text\">cygpath</code>. This is most useful in scripts that invoke Windows programs.</li>\n</ul>\n<h2>More resources</h2>\n<ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\">awesome-shell</a>: A curated list of shell tools and resources.</li>\n<li><a href=\"https://github.com/herrbischoff/awesome-osx-command-line\">awesome-osx-command-line</a>: A more in-depth guide for the macOS command line.</li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Strict mode</a> for writing better shell scripts.</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a>: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.</li>\n<li><a href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\">Filenames and Pathnames in Shell</a>: The sadly complex minutiae on how to handle filenames correctly in shell scripts.</li>\n<li><a href=\"http://datascienceatthecommandline.com/#tools\">Data Science at the Command Line</a>: More commands and tools helpful for doing data science, from the book of the same name</li>\n</ul>"}