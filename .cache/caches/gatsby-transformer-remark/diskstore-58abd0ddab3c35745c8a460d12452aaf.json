{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-11e71907869fa0ab5461204a2d595301-gatsby-remark-prismjs-","val":"<p>The <code class=\"language-text\">fs</code> module provides a lot of very useful functionality to access and interact with the file system.</p>\n<p>There is no need to install it. Being part of the Node.js core, it can be used by simply requiring it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once you do so, you have access to all its methods, which include:</p>\n<ul>\n<li><code class=\"language-text\">fs.access()</code>: check if the file exists and Node.js can access it with its permissions</li>\n<li><code class=\"language-text\">fs.appendFile()</code>: append data to a file. If the file does not exist, it's created</li>\n<li><code class=\"language-text\">fs.chmod()</code>: change the permissions of a file specified by the filename passed. Related: <code class=\"language-text\">fs.lchmod()</code>, <code class=\"language-text\">fs.fchmod()</code></li>\n<li><code class=\"language-text\">fs.chown()</code>: change the owner and group of a file specified by the filename passed. Related: <code class=\"language-text\">fs.fchown()</code>, <code class=\"language-text\">fs.lchown()</code></li>\n<li><code class=\"language-text\">fs.close()</code>: close a file descriptor</li>\n<li><code class=\"language-text\">fs.copyFile()</code>: copies a file</li>\n<li><code class=\"language-text\">fs.createReadStream()</code>: create a readable file stream</li>\n<li><code class=\"language-text\">fs.createWriteStream()</code>: create a writable file stream</li>\n<li><code class=\"language-text\">fs.link()</code>: create a new hard link to a file</li>\n<li><code class=\"language-text\">fs.mkdir()</code>: create a new folder</li>\n<li><code class=\"language-text\">fs.mkdtemp()</code>: create a temporary directory</li>\n<li><code class=\"language-text\">fs.open()</code>: set the file mode</li>\n<li><code class=\"language-text\">fs.readdir()</code>: read the contents of a directory</li>\n<li><code class=\"language-text\">fs.readFile()</code>: read the content of a file. Related: <code class=\"language-text\">fs.read()</code></li>\n<li><code class=\"language-text\">fs.readlink()</code>: read the value of a symbolic link</li>\n<li><code class=\"language-text\">fs.realpath()</code>: resolve relative file path pointers (<code class=\"language-text\">.</code>, <code class=\"language-text\">..</code>) to the full path</li>\n<li><code class=\"language-text\">fs.rename()</code>: rename a file or folder</li>\n<li><code class=\"language-text\">fs.rmdir()</code>: remove a folder</li>\n<li><code class=\"language-text\">fs.stat()</code>: returns the status of the file identified by the filename passed. Related: <code class=\"language-text\">fs.fstat()</code>, <code class=\"language-text\">fs.lstat()</code></li>\n<li><code class=\"language-text\">fs.symlink()</code>: create a new symbolic link to a file</li>\n<li><code class=\"language-text\">fs.truncate()</code>: truncate to the specified length the file identified by the filename passed. Related: <code class=\"language-text\">fs.ftruncate()</code></li>\n<li><code class=\"language-text\">fs.unlink()</code>: remove a file or a symbolic link</li>\n<li><code class=\"language-text\">fs.unwatchFile()</code>: stop watching for changes on a file</li>\n<li><code class=\"language-text\">fs.utimes()</code>: change the timestamp of the file identified by the filename passed. Related: <code class=\"language-text\">fs.futimes()</code></li>\n<li><code class=\"language-text\">fs.watchFile()</code>: start watching for changes on a file. Related: <code class=\"language-text\">fs.watch()</code></li>\n<li><code class=\"language-text\">fs.writeFile()</code>: write data to a file. Related: <code class=\"language-text\">fs.write()</code></li>\n</ul>\n<p>One peculiar thing about the <code class=\"language-text\">fs</code> module is that all the methods are asynchronous by default, but they can also work synchronously by appending <code class=\"language-text\">Sync</code>.</p>\n<p>For example:</p>\n<ul>\n<li><code class=\"language-text\">fs.rename()</code></li>\n<li><code class=\"language-text\">fs.renameSync()</code></li>\n<li><code class=\"language-text\">fs.write()</code></li>\n<li><code class=\"language-text\">fs.writeSync()</code></li>\n</ul>\n<p>This makes a huge difference in your application flow.</p>\n<blockquote>\n<p>Node.js 10 includes <a href=\"https://nodejs.org/api/fs.html#fs_fs_promises_api\">experimental support</a> for a promise based API</p>\n</blockquote>\n<p>For example let's examine the <code class=\"language-text\">fs.rename()</code> method. The asynchronous API is used with a callback:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//done</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A synchronous API can be used like this, with a try/catch block to handle errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//done</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key difference here is that the execution of your script will block in the second example, until the file operation succeeded.</p>"}