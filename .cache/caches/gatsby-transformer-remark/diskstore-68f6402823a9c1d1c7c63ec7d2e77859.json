{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-c3e0b8b4ea7485a8642e159373db96fe-gatsby-remark-prismjs-","val":"<h1>What is THIS</h1>\n<h1>What is <code class=\"language-text\">this</code>?</h1>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"><strong><code class=\"language-text\">this</code></strong></a> is a special \"variable\" which implicitly exists in every\nfunction. It can be thought of being similar to Java's <code class=\"language-text\">this</code> and Python's\n<code class=\"language-text\">self</code>, but it's much more flexible than that.</p>\n<div class=\"callout warning\">\n<p><strong>Important</strong>: The value of <code class=\"language-text\">this</code> is determined when the\nfunction is <strong>called</strong>, not when the function is\n<em>defined</em>.</p>\n</div>\n<p>Given the following function:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>these would be the values of <code class=\"language-text\">this</code> if called in those specific ways:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// \"normal call\": global object / window in browsers</span>\n<span class=\"token comment\">//                undefined in strict mode</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// as object \"method\": to the object</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// via .call / .apply: To the value passed as first argument</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>What is the this keyword</h2>\n<p>In general, the <code class=\"language-text\">this</code> references the object of which the function is a property. In other words, the <code class=\"language-text\">this</code> references the object that is currently calling the function.</p>\n<p>Suppose you have an object called <code class=\"language-text\">counter</code> that has a method <code class=\"language-text\">next()</code>. When you call the <code class=\"language-text\">next()</code> method, you can access the <code class=\"language-text\">this</code> object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Inside the <code class=\"language-text\">next()</code> function, the <code class=\"language-text\">this</code> references the <code class=\"language-text\">counter</code> object. See the following method call:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token constant\">CSS</span> <span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">next()</code> is a function that is the property of the <code class=\"language-text\">counter</code> object. Therefore, inside the <code class=\"language-text\">next()</code> function, the <code class=\"language-text\">this</code> references the <code class=\"language-text\">counter</code> object.</p>\n<h2>Global context</h2>\n<p>In the global context, the <code class=\"language-text\">this</code> references the <a href=\"https://www.javascripttutorial.net/es-next/javascript-globalthis/\">global object</a>, which is the <code class=\"language-text\">window</code> object on the web browser or <code class=\"language-text\">global</code> object on Node.js.</p>\n<p>This behavior is consistent in both strict and non-strict modes. Here's the output on the web browser:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trueCode language: JavaScript (javascript)</span></code></pre></div>\n<p>If you assign a property to <code class=\"language-text\">this</code> object in the global context, JavaScript will add the property to the global object as shown in the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span> <span class=\"token string\">'Red'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Red'Code language: JavaScript (javascript)</span></code></pre></div>\n<h2>Function context</h2>\n<p>In JavaScript, you can call a <a href=\"https://www.javascripttutorial.net/javascript-function/\">function</a> in the following ways:</p>\n<ul>\n<li>Function invocation</li>\n<li>Method invocation</li>\n<li>Constructor invocation</li>\n<li>Indirect invocation</li>\n</ul>\n<p>Each function invocation defines its own context. Therefore, the <code class=\"language-text\">this</code> behaves differently.</p>\n<h3>1) Simple function invocation</h3>\n<p>In the non-strict mode, the <code class=\"language-text\">this</code> references the global object when the function is called as follows:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you call the <code class=\"language-text\">show()</code> function, the <code class=\"language-text\">this</code> references the <a href=\"https://www.javascripttutorial.net/es-next/javascript-globalthis/\">global object</a>, which is the <code class=\"language-text\">window</code> on the web browser and <code class=\"language-text\">global</code> on Node.js.</p>\n<p>Calling the <code class=\"language-text\">show()</code> function is the same as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the strict mode, JavaScript sets the <code class=\"language-text\">this</code> inside a function to <code class=\"language-text\">undefined</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>To enable the strict mode, you use the directive <code class=\"language-text\">\"use strict\"</code> at the beginning of the JavaScript file. If you want to apply the strict mode to a specific function only, you place it at the top of the function body.</p>\n<p>Note that the strict mode has been available since ECMAScript 5.1. The <code class=\"language-text\">strict</code> mode applies to both function and nested functions. For example:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token boolean\">true</span>\ntrueCode language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the <code class=\"language-text\">display()</code> inner function, the <code class=\"language-text\">this</code> also set to <code class=\"language-text\">undefined</code> as shown in the console.</p>\n<h3>2) Method invocation</h3>\n<p>When you call a method of an object, JavaScript sets <code class=\"language-text\">this</code> to the object that owns the method. See the following <code class=\"language-text\">car</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getBrand</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HondaCode language: JavaScript (javascript)</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">this</code> object in the <code class=\"language-text\">getBrand()</code> method references the <code class=\"language-text\">car</code> object.</p>\n<p>Since a method is a property of an object which is a value, you can store it in a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> brand <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>getBrand<span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>And then call the method via the variable</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">brand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefinedCode language: JavaScript (javascript)</span></code></pre></div>\n<p>You get <code class=\"language-text\">undefined</code> instead of <code class=\"language-text\">\"Honda\"</code> because when you call a method without specifying its object, JavaScript sets <code class=\"language-text\">this</code> to the global object in non-strict mode and <code class=\"language-text\">undefined</code> in the strict mode.</p>\n<p>To fix this issue, you use the <code class=\"language-text\">[bind()](https://www.javascripttutorial.net/javascript-bind/)</code> method of the <code class=\"language-text\">Function.prototype</code> object. The <code class=\"language-text\">bind()</code> method creates a new function whose the <code class=\"language-text\">this</code> keyword is set to a specified value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> brand <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">brand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Honda</span>\nCode language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this example, when you call the <code class=\"language-text\">brand()</code> method, the <code class=\"language-text\">this</code> keyword is bound to the <code class=\"language-text\">car</code> object. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getBrand</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> bike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Harley Davidson'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> brand <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">brand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nHarley Davidson</code></pre></div>\n<p>In this example, the <code class=\"language-text\">bind()</code> method sets the <code class=\"language-text\">this</code> to the <code class=\"language-text\">bike</code> object, therefore, you see the value of the <code class=\"language-text\">brand</code> property of the <code class=\"language-text\">bike</code> object on the console.</p>\n<h3>3) Constructor invocation</h3>\n<p>When you use the <code class=\"language-text\">new</code> keyword to create an instance of a function object, you use the function as a constructor.</p>\n<p>The following example declares a <code class=\"language-text\">Car</code> function, then invokes it as a constructor:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getBrand</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The expression <code class=\"language-text\">new Car('Honda')</code> is a constructor invocation of the <code class=\"language-text\">Car</code> function.</p>\n<p>JavaScript creates a new object and sets <code class=\"language-text\">this</code> to the newly created object. This pattern works great with only one potential problem.</p>\n<p>Now, you can invoke the <code class=\"language-text\">Car()</code> as a function or as a constructor. If you omit the <code class=\"language-text\">new</code> keyword as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> bmw <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bmw<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => TypeError: Cannot read property 'brand' of undefinedCode language: JavaScript (javascript)</span></code></pre></div>\n<p>Since the <code class=\"language-text\">this</code> value in the <code class=\"language-text\">Car()</code> sets to the global object, the <code class=\"language-text\">bmw.brand</code> returns <code class=\"language-text\">undefined</code>.</p>\n<p>To make sure that the <code class=\"language-text\">Car()</code> function is always invoked using constructor invocation, you add a check at the beginning of the <code class=\"language-text\">Car()</code> function as follows:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Must use the new operator to call the function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ES6 introduced a meta-property named <a href=\"https://www.javascripttutorial.net/es6/javascript-new-target/\"><code class=\"language-text\">new.target</code></a> that allows you to detect whether a function is invoked as a simple invocation or as a constructor.</p>\n<p>You can modify the <code class=\"language-text\">Car()</code> function that uses the <code class=\"language-text\">new.target</code> metaproperty as follows:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Must use the new operator to call the function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>4) Indirect Invocation</h3>\n<p>In JavaScript, <a href=\"https://www.javascripttutorial.net/javascript-functions-are-first-class-citizens/\">functions are first-class citizens</a>. In other words, functions are objects, which are instances of the <a href=\"https://www.javascripttutorial.net/javascript-function-type/\">Function type</a>.</p>\n<p>The <code class=\"language-text\">Function</code> type has two methods: <code class=\"language-text\">[call()](https://www.javascripttutorial.net/javascript-call/)</code> and <code class=\"language-text\">[apply()](https://www.javascripttutorial.net/javascript-apply-method/)</code> . These methods allow you to set the <code class=\"language-text\">this</code> value when calling a function. For example:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> honda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> audi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Audi'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>honda<span class=\"token punctuation\">,</span> <span class=\"token string\">\"It's a \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>audi<span class=\"token punctuation\">,</span> <span class=\"token string\">\"It's an \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Code language<span class=\"token operator\">:</span> <span class=\"token function\">JavaScript</span> <span class=\"token punctuation\">(</span>javascript<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nIt's a Honda\nIt's an AudiCode language<span class=\"token operator\">:</span> <span class=\"token constant\">PHP</span> <span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this example, we called the <code class=\"language-text\">getBrand()</code> function indirectly using the <code class=\"language-text\">call()</code> method of the <code class=\"language-text\">getBrand</code> function. We passed <code class=\"language-text\">honda</code> and  <code class=\"language-text\">audi</code> object as the first argument of the <code class=\"language-text\">call()</code> method, therefore, we got the corresponding brand in each call.</p>\n<p>The <code class=\"language-text\">apply()</code> method is similar to the <code class=\"language-text\">call()</code> method except that its second argument is an array of arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>honda<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"It's a \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"It's a Honda\"</span>\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>audi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"It's an \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"It's a Audi\"Code language: JavaScript (javascript)</span></code></pre></div>\n<h2>Arrow functions</h2>\n<p><a href=\"https://www.javascripttutorial.net/es6/\">ES6</a> introduced a new concept named <a href=\"https://www.javascripttutorial.net/es6/javascript-arrow-function/\">arrow function</a>. In arrow functions, JavaScript sets the <code class=\"language-text\">this</code> lexically.</p>\n<p>It means the arrow function does not create its own <a href=\"https://www.javascripttutorial.net/javascript-execution-context/\">execution context</a> but inherits the <code class=\"language-text\">this</code> from the outer function where the arrow function is defined. See the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getThis</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trueCode language: JavaScript (javascript)</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">this</code> value is set to the global object i.e., <code class=\"language-text\">window</code> in the web browser.</p>\n<p>Since an arrow function does not create its own execution context, defining a method using an arrow function will cause an issue. For example:</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getSpeed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeErrorCode language: JavaScript (javascript)</span></code></pre></div>\n<p>Inside the <code class=\"language-text\">getSpeed()</code> method, the <code class=\"language-text\">this</code> value reference the global object, not the <code class=\"language-text\">Car</code> object. Therefore the <code class=\"language-text\">car.getSpeed()</code> invocation causes an error because the global object does not have the <code class=\"language-text\">speed</code> property.</p>"}