{"expireTime":9007200911206586000,"key":"transformer-remark-markdown-html-05beadaaf683ced49aed56fd4a7ad67b-gatsby-remark-prismjs-","val":"<h1>Deploy React App To Heroku Using Postgres &#x26; Express</h1>\n<p>Heroku is an web application that makes deploying applications easy for a beginner.</p>\n<hr>\n<h3>Deploy React App To Heroku Using Postgres &#x26; Express</h3>\n<p>Heroku is an web application that makes deploying applications easy for a beginner.</p>\n<p>Before you begin deploying, make sure to remove any <code class=\"language-text\">console.log</code>'s or <code class=\"language-text\">debugger</code>'s in any production code. You can search your entire project folder if you are using them anywhere.</p>\n<p>You will set up Heroku to run on a production, not development, version of your application. When a Node.js application like yours is pushed up to Heroku, it is identified as a Node.js application because of the <code class=\"language-text\">package.json</code> file. It runs <code class=\"language-text\">npm install</code> automatically. Then, if there is a <code class=\"language-text\">heroku-postbuild</code> script in the <code class=\"language-text\">package.json</code> file, it will run that script. Afterwards, it will automatically run <code class=\"language-text\">npm start</code>.</p>\n<p>In the following phases, you will configure your application to work in production, not just in development, and configure the <code class=\"language-text\">package.json</code> scripts for <code class=\"language-text\">install</code>, <code class=\"language-text\">heroku-postbuild</code> and <code class=\"language-text\">start</code> scripts to install, build your React application, and start the Express production server.</p>\n<h3>Phase 1: Heroku Connection</h3>\n<p>If you haven't created a Heroku account yet, create one <a href=\"https://signup.heroku.com/\" class=\"markup--anchor markup--p-anchor\">here</a>.</p>\n<p>Add a new application in your <a href=\"https://dashboard.heroku.com/\" class=\"markup--anchor markup--p-anchor\">Heroku dashboard</a> named whatever you want. Under the \"Resources\" tab in your new application, click \"Find more add-ons\" and add the \"Heroku Postgres\" add-on with the free Hobby Dev setting.</p>\n<p>In your terminal, install the <a href=\"https://devcenter.heroku.com/articles/heroku-command-line\" class=\"markup--anchor markup--p-anchor\">Heroku CLI</a>. Afterwards, login to Heroku in your terminal by running the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku login</code></pre></div>\n<p>Add Heroku as a remote to your project's git repository in the following command and replace <code class=\"language-text\">&lt;name-of-Heroku-app></code> with the name of the application you created in the <a href=\"https://dashboard.heroku.com/\" class=\"markup--anchor markup--p-anchor\">Heroku dashboard</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku git:remote -a &lt;name-of-Heroku-app></code></pre></div>\n<p>Next, you will set up your Express + React application to be deployable to Heroku.</p>\n<h3>Phase 2: Setting up your Express + React application</h3>\n<p>Right now, your React application is on a different localhost port than your Express application. However, since your React application only consists of static files that don't need to bundled continuously with changes in production, your Express application can serve the React assets in production too. These static files live in the <code class=\"language-text\">frontend/build</code> folder after running <code class=\"language-text\">npm run build</code> in the <code class=\"language-text\">frontend</code> folder.</p>\n<p>Add the following changes into your <code class=\"language-text\">backend/routes.index.js</code> file.</p>\n<p>At the root route, serve the React application's static <code class=\"language-text\">index.html</code> file along with <code class=\"language-text\">XSRF-TOKEN</code> cookie. Then serve up all the React application's static files using the <code class=\"language-text\">express.static</code> middleware. Serve the <code class=\"language-text\">index.html</code> and set the <code class=\"language-text\">XSRF-TOKEN</code> cookie again on all routes that don't start in <code class=\"language-text\">/api</code>. You should already have this set up in <code class=\"language-text\">backend/routes/index.js</code> which should now look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// backend/routes/index.js\nconst express = require('express');\nconst router = express.Router();\nconst apiRouter = require('./api');\n\nrouter.use('/api', apiRouter);\n\n// Static routes\n// Serve React build files in production\nif (process.env.NODE_ENV === 'production') {\n  const path = require('path');\n  // Serve the frontend's index.html file at the root route\n  router.get('/', (req, res) => {\n    res.cookie('XSRF-TOKEN', req.csrfToken());\n    res.sendFile(\n      path.resolve(__dirname, '../../frontend', 'build', 'index.html')\n    );\n  });\n\n  // Serve the static assets in the frontend's build folder\n  router.use(express.static(path.resolve(\"../frontend/build\")));\n\n  // Serve the frontend's index.html file at all other routes NOT starting with /api\n  router.get(/^(?!\\/?api).*/, (req, res) => {\n    res.cookie('XSRF-TOKEN', req.csrfToken());\n    res.sendFile(\n      path.resolve(__dirname, '../../frontend', 'build', 'index.html')\n    );\n  });\n}\n\n// Add a XSRF-TOKEN cookie in development\nif (process.env.NODE_ENV !== 'production') {\n  router.get('/api/csrf/restore', (req, res) => {\n    res.cookie('XSRF-TOKEN', req.csrfToken());\n    res.status(201).json({});\n  });\n}\n\nmodule.exports = router;</code></pre></div>\n<p>Your Express backend's <code class=\"language-text\">package.json</code> should include scripts to run the <code class=\"language-text\">sequelize</code> CLI commands.</p>\n<p>The <code class=\"language-text\">backend/package.json</code>'s scripts should now look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n    \"sequelize\": \"sequelize\",\n    \"sequelize-cli\": \"sequelize-cli\",\n    \"start\": \"per-env\",\n    \"start:development\": \"nodemon -r dotenv/config ./bin/www\",\n    \"start:production\": \"node ./bin/www\"\n  },</code></pre></div>\n<p>Initialize a <code class=\"language-text\">package.json</code> file at the very root of your project directory (outside of both the <code class=\"language-text\">backend</code> and <code class=\"language-text\">frontend</code> folders). The scripts defined in this <code class=\"language-text\">package.json</code> file will be run by Heroku, not the scripts defined in the <code class=\"language-text\">backend/package.json</code> or the <code class=\"language-text\">frontend/package.json</code>.</p>\n<p>When Heroku runs <code class=\"language-text\">npm install</code>, it should install packages for both the <code class=\"language-text\">backend</code> and the <code class=\"language-text\">frontend</code>. Overwrite the <code class=\"language-text\">install</code> script in the root <code class=\"language-text\">package.json</code> with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm --prefix backend install backend &amp;&amp; npm --prefix frontend install frontend</code></pre></div>\n<p>This will run <code class=\"language-text\">npm install</code> in the <code class=\"language-text\">backend</code> folder then run <code class=\"language-text\">npm install</code> in the <code class=\"language-text\">frontend</code> folder.</p>\n<p>Next, define a <code class=\"language-text\">heroku-postbuild</code> script that will run the <code class=\"language-text\">npm run build</code> command in the <code class=\"language-text\">frontend</code> folder. Remember, Heroku will automatically run this script after running <code class=\"language-text\">npm install</code>.</p>\n<p>Define a <code class=\"language-text\">sequelize</code> script that will run <code class=\"language-text\">npm run sequelize</code> in the <code class=\"language-text\">backend</code> folder.</p>\n<p>Finally, define a <code class=\"language-text\">start</code> that will run <code class=\"language-text\">npm start</code> in the `backend folder.</p>\n<p>The root <code class=\"language-text\">package.json</code>'s scripts should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n    \"heroku-postbuild\": \"npm run build --prefix frontend\",\n    \"install\": \"npm --prefix backend install backend &amp;&amp; npm --prefix frontend install frontend\",\n    \"dev:backend\": \"npm install --prefix backend start\",\n    \"dev:frontend\": \"npm install --prefix frontend start\",\n    \"sequelize\": \"npm run --prefix backend sequelize\",\n    \"sequelize-cli\": \"npm run --prefix backend sequelize-cli\",\n    \"start\": \"npm start --prefix backend\"\n  },</code></pre></div>\n<p>The <code class=\"language-text\">dev:backend</code> and <code class=\"language-text\">dev:frontend</code> scripts are optional and will not be used for Heroku.</p>\n<p>Finally, commit your changes.</p>\n<h3>Phase 3: Deploy to Heroku</h3>\n<p>Once you're finished setting this up, navigate to your application's Heroku dashboard. Under \"Settings\" there is a section for \"Config Vars\". Click the <code class=\"language-text\">Reveal Config Vars</code> button to see all your production environment variables. You should have a <code class=\"language-text\">DATABASE_URL</code> environment variable already from the Heroku Postgres add-on.</p>\n<p>Add environment variables for <code class=\"language-text\">JWT_EXPIRES_IN</code> and <code class=\"language-text\">JWT_SECRET</code> and any other environment variables you need for production.</p>\n<p>You can also set environment variables through the Heroku CLI you installed earlier in your terminal. See the docs for <a href=\"https://devcenter.heroku.com/articles/config-vars\" class=\"markup--anchor markup--p-anchor\">Setting Heroku Config Variables</a>.</p>\n<p>Push your project to Heroku. Heroku only allows the <code class=\"language-text\">master</code> branch to be pushed. But, you can alias your branch to be named <code class=\"language-text\">master</code> when pushing to Heroku. For example, to push a branch called <code class=\"language-text\">login-branch</code> to <code class=\"language-text\">master</code> run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push heroku login-branch:master</code></pre></div>\n<p>If you do want to push the <code class=\"language-text\">master</code> branch, just run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push heroku master</code></pre></div>\n<p>You may want to make two applications on Heroku, the <code class=\"language-text\">master</code> branch site that should have working code only. And your <code class=\"language-text\">staging</code> site that you can use to test your work in progress code.</p>\n<p>Now you need to migrate and seed your production database.</p>\n<p>Using the Heroku CLI, you can run commands inside of your production application just like in development using the <code class=\"language-text\">heroku run</code> command.</p>\n<p>For example to migrate the production database, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku run npm run sequelize db:migrate</code></pre></div>\n<p>To seed the production database, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku run npm run sequelize db:seed:all</code></pre></div>\n<p>Note: You can interact with your database this way as you'd like, but beware that <code class=\"language-text\">db:drop</code> cannot be run in the Heroku environment. If you want to drop and create the database, you need to remove and add back the \"Heroku Postgres\" add-on.</p>\n<p>Another way to interact with the production application is by opening a bash shell through your terminal by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku bash</code></pre></div>\n<p>In the opened shell, you can run things like <code class=\"language-text\">npm run sequelize db:migrate</code>.</p>\n<p>Open your deployed site and check to see if you successfully deployed your Express + React application to Heroku!</p>\n<p>If you see an <code class=\"language-text\">Application Error</code> or are experiencing different behavior than what you see in your local environment, check the logs by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku logs</code></pre></div>\n<p>If you want to open a connection to the logs to continuously output to your terminal, then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku logs --tail</code></pre></div>\n<p>The logs may clue you into why you are experiencing errors or different behavior.</p>\n<h4>If you found this guide helpful feel free to checkout my github/gists where I host</h4>"}