{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-ad959d528c4feedd1e8b635f78abf9d5-gatsby-remark-prismjs-","val":"<h1>Objects in JavaScript:</h1>\n<h2>Everything else besides primitive data type values is an <em>object</em>.</h2>\n<p>Objects are <em>key-value</em> stores, more specifically <em>stringkey-value</em> stores. The\n\"keys\" of an object are called <em>properties</em>.</p>\n<p>The syntax to create a plain object is <code class=\"language-text\">{key: value, ...}</code>, which is called an\nobject literal. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that the above example doesn't use <em>quotation marks</em> around the property\nnames. In an object literal, quotation marks can be be omitted if the property\nname would also be a <em>valid variable name</em>. If not, they need to be quoted.\n<em>Number literals</em> are valid an object literal as well.</p>\n<p>Here are some more examples of valid and invalid property names in object\nliterals:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// valid, could be variable name</span>\n  <span class=\"token string-property property\">'bar'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// string literals are always valid</span>\n  <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// number literals are always valid</span>\n  <span class=\"token number\">1.5</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// ^</span>\n  foo<span class=\"token operator\">-</span>bar<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// invalid, would not be a valid variable name</span>\n  <span class=\"token string-property property\">'foo-bar'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// string literals are alwaus valid</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"callout warning\">\n<p><strong>Important:</strong> No matter which value or syntax you use for a property name, the\nvalue will always be converted to a <strong>string</strong>.</p>\n</div>\n<div class=\"callout secondary\">\n<i class=\"fa fa-info-circle\" aria-hidden=\"true\">\n</i> **ES2015**\n<p>ES2015 adds two extensions to object values and object literals:</p>\n<ul>\n<li><em>Symbols</em> are can be used as property names. They are not converted to\nstrings.</li>\n<li>\n<p>Object literals can contain <em>[computed property names][computed properties]</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// creates {42: 0}</span></code></pre></div>\n</li>\n</ul>\n</div>\n<h2>References</h2>\n<p>Just like in Java and other object-oriented programming languages, objects are\nrepresented as <em>references</em>. That means if a variable has an object as a value,\nit really has a reference to that object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span></code></pre></div>\n<p>:::ascii</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                         ┌──────────────┐\n┌─────┬──────────┐       │  Object#123  │\n│user │ ref:123 ◆┼──────▶├──────┬───────┤\n└─────┴──────────┘       │ name │ \"Tom\" │\n                         └──────┴───────┘</code></pre></div>\n<p>:::</p>\n<p>Assigning the value to another variable makes both variables point to the same\nobject:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> owner <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></code></pre></div>\n<p>:::ascii</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">┌─────┬──────────┐       ┌──────────────┐\n│user │ ref:123 ◆┼──┐    │  Object#123  │\n├─────┼──────────┤  ├───▶├──────┬───────┤\n│owner│ ref:123 ◆┼──┘    │ name │ \"Tom\" │\n└─────┴──────────┘       └──────┴───────┘</code></pre></div>\n<p>:::</p>\n<p>Assigning to <code class=\"language-text\">user.name</code> will therefore also \"change\" <code class=\"language-text\">owner.name</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Joe'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Joe, Joe</span></code></pre></div>\n<p>:::ascii</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">┌─────┬──────────┐       ┌──────────────┐\n│user │ ref:123 ◆┼──┐    │  Object#123  │\n├─────┼──────────┤  ├───▶├──────┬───────┤\n│owner│ ref:123 ◆┼──┘    │ name │ \"Joe\" │\n└─────┴──────────┘       └──────┴───────┘</code></pre></div>\n<p>:::</p>\n<p>But assigning a new value to either <code class=\"language-text\">user</code> or <code class=\"language-text\">owner</code> will result in only that\nvariable referring to the new value. The other variable will still refer to the\nsame value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\nowner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Kim'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>:::ascii</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                         ┌──────────────┐\n                         │  Object#123  │\n                    ┌───▶├──────┬───────┤\n┌─────┬──────────┐  │    │ name │ \"Joe\" │\n│user │ ref:123 ◆┼──┘    └──────┴───────┘\n├─────┼──────────┤\n│owner│ ref:456 ◆┼──┐    ┌──────────────┐\n└─────┴──────────┘  │    │  Object#456  │\n                    └───▶├──────┬───────┤\n                         │ name │ \"Kim\" │\n                         └──────┴───────┘</code></pre></div>\n<p>:::</p>\n<hr>\n<p>The JavaScript standard defines a couple of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">built-in objects</a> with additional\nproperties and special internal behavior, must notably <em>arrays</em> and\n<em>functions</em>, which are explained in the next slides.</p>"}