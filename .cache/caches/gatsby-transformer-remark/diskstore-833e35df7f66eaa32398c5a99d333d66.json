{"expireTime":9007200911870450000,"key":"transformer-remark-markdown-ast-aa9ac6563f4a86395f62044ece000f8c-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"A Basic Component","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The key abstraction that React provides is that of a component. To reiterate, a component is some thing that is being rendered in the browser. It could be a button, a form with a bunch of fields in it, a navigation bar at the top of the page, a single input field, etc. Any of these could be its own component. React doesn't place any restrictions on how large or small a component can be. You could have an entire static site encapsulated in a single React component, but that at that point you may as well not be using React. So the first thing to remember about a component is that a component must render something. If nothing is being rendered from a component, then React will throw an error.","position":{"start":{"line":4,"column":3,"offset":24},"end":{"line":4,"column":701,"offset":722},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":24},"end":{"line":4,"column":701,"offset":722},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":701,"offset":722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's write the most basic of components we can possibly write. Inside of BasicComponent.js, first import React at the top of the file. Our most basic of\ncomponents looks like this:\nimport React from 'react';","position":{"start":{"line":6,"column":1,"offset":724},"end":{"line":8,"column":27,"offset":932},"indent":[1,1]}}],"position":{"start":{"line":6,"column":1,"offset":724},"end":{"line":8,"column":27,"offset":932},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">const BasicComponent = () => &lt;div>Hello World!&lt;/div>;</code>","position":{"start":{"line":10,"column":1,"offset":934},"end":{"line":10,"column":56,"offset":989},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":934},"end":{"line":10,"column":56,"offset":989},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"export default BasicComponent;\nThis is a component that simply returns a div tag with the words Hello World! inside. The last line simply exports our component so that it can be imported\nby another file.","position":{"start":{"line":12,"column":1,"offset":991},"end":{"line":14,"column":17,"offset":1194},"indent":[1,1]}}],"position":{"start":{"line":12,"column":1,"offset":991},"end":{"line":14,"column":17,"offset":1194},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice that this component looks exactly like an anonymous arrow function that we've named BasicComponent. In fact, that is literally what this is. Nothing\nmore, nothing less. The arrow function then is simply returning the div tag. When a component is written as a function like this one is, it is called a\nfunctional component.","position":{"start":{"line":16,"column":1,"offset":1196},"end":{"line":18,"column":22,"offset":1525},"indent":[1,1]}}],"position":{"start":{"line":16,"column":1,"offset":1196},"end":{"line":18,"column":22,"offset":1525},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"While a component can of course get a lot more complicated than this, fundamentally, all a component does is render some HTML.","position":{"start":{"line":20,"column":1,"offset":1527},"end":{"line":20,"column":127,"offset":1653},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1527},"end":{"line":20,"column":127,"offset":1653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Basic Class Component\nThe basic component you wrote in the previous exercise is an example of a functional component, which is appropriate since that component is literally\nnothing more than a function that returns some HTML. Functional components are great when all you want a component to do is to render some stuff; they\nare really good at doing just that.","position":{"start":{"line":22,"column":1,"offset":1655},"end":{"line":25,"column":36,"offset":2016},"indent":[1,1,1]}}],"position":{"start":{"line":22,"column":1,"offset":1655},"end":{"line":25,"column":36,"offset":2016},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Components can also be written as classes. For this exercise, we're going to write a class component that does exactly the same thing as the functional component we just wrote. We'll again need to import React at the top of the file, but we'll also need to add a little something. Our import statement will look like this:\nimport React, { Component } from 'react';\nSo, in addition to importing React, we're also importing the base Component class that is included in the React library. The export statement at the bottom of the file also stays, completely unchanged. Our class component will thus look like this:\nimport React, { Component } from 'react';","position":{"start":{"line":27,"column":1,"offset":2018},"end":{"line":30,"column":42,"offset":2672},"indent":[1,1,1]}}],"position":{"start":{"line":27,"column":1,"offset":2018},"end":{"line":30,"column":42,"offset":2672},"indent":[1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BasicClassComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":32,"column":1,"offset":2674},"end":{"line":38,"column":4,"offset":2792},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default BasicClassComponent;\nNotice that our BasicClassComponent inherits from the base Component class that we imported from the React library, by virtue of the 'extends' keyword. That being said, there's nothing in this minimal component that takes advantage of any of those inherited methods. All we have is a method on our component class called render that returns the same div tag.","position":{"start":{"line":40,"column":1,"offset":2794},"end":{"line":41,"column":359,"offset":3188},"indent":[1]}}],"position":{"start":{"line":40,"column":1,"offset":2794},"end":{"line":41,"column":359,"offset":3188},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this case, if we really were deciding between whether to use a functional component versus a class component to render a simple div tag, then the functional style is more appropriate to use. This is because class components are much better suited for handling component state and triggering events based on the component's lifecycle. Don't worry if you don't know what all these terms meant, we will get to them shortly.","position":{"start":{"line":43,"column":1,"offset":3190},"end":{"line":43,"column":424,"offset":3613},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":3190},"end":{"line":43,"column":424,"offset":3613},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The important takeaways at this point are that there are two types of components, functional and class components, and that functional components are well-suited if you're just looking to render some HTML. Class components, on the other hand, are much better suited for handling components that require more complex functionality, need to exhibit more varied behavior, and/or need to keep track of some state that may change throughout said component's lifecycle.","position":{"start":{"line":45,"column":1,"offset":3615},"end":{"line":45,"column":464,"offset":4078},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":3615},"end":{"line":45,"column":464,"offset":4078},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Class Component with Some State\nWhen we talked about class components, it was mentioned that class components can handle state. So what does that mean? Component state is any dynamic data that we want the component to keep track of. For example, let's say we have a form component. This form has some input fields that we'd like users to fill out. When a user types characters into an input field, how is that input persisted from the point of view of our form component?","position":{"start":{"line":47,"column":1,"offset":4080},"end":{"line":48,"column":440,"offset":4553},"indent":[1]}}],"position":{"start":{"line":47,"column":1,"offset":4080},"end":{"line":48,"column":440,"offset":4553},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The answer is by using component state! There are a few important concepts regarding component state, such as how to update it, pass it to another component, render it, etc. We'll talk about all of these in a bit, but for now, let's just focus on how to add state to a class component.","position":{"start":{"line":50,"column":1,"offset":4555},"end":{"line":50,"column":286,"offset":4840},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":4555},"end":{"line":50,"column":286,"offset":4840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Only class components have the ability to persist state, so if at any time you realize that a component needs to keep track of some state, you know that you'll automatically need a class component instead of a functional component.","position":{"start":{"line":52,"column":1,"offset":4842},"end":{"line":52,"column":232,"offset":5073},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":4842},"end":{"line":52,"column":232,"offset":5073},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our class component with state will look a lot like the basic class component we just wrote, but with some extra stuff:\nimport React, { Component } from 'react';","position":{"start":{"line":54,"column":1,"offset":5075},"end":{"line":55,"column":42,"offset":5236},"indent":[1]}}],"position":{"start":{"line":54,"column":1,"offset":5075},"end":{"line":55,"column":42,"offset":5236},"indent":[1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComponentWithState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":57,"column":1,"offset":5238},"end":{"line":68,"column":4,"offset":5429},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ClassComponentWithState;\nSo far, the only new thing going on here is the constructor block. If you recall how classes in JavaScript work, classes need constructors. Additionally, if a class is extending off of another class and wants access to its parent class's methods and properties, then the super function needs to be called inside the class's constructor function. Point being, the constructor function and the call to the super function are not associated with React, they are associated with all JavaScript classes.","position":{"start":{"line":70,"column":1,"offset":5431},"end":{"line":71,"column":499,"offset":5969},"indent":[1]}}],"position":{"start":{"line":70,"column":1,"offset":5431},"end":{"line":71,"column":499,"offset":5969},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Then there is the this.state property inside the constructor function that is set as an empty object. We're adding a property called state to our class and setting it to an empty object. State objects in React are always just plain old objects.","position":{"start":{"line":73,"column":1,"offset":5971},"end":{"line":73,"column":245,"offset":6215},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":5971},"end":{"line":73,"column":245,"offset":6215},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The observant student may be wondering why the basic class component we wrote in the previous exercise had no constructor function within its body. That is because we had no need for them since all our class component was doing was rendering some HTML. The constructor is needed here because that is where we need to initialize our state object. The call to super is needed because we can't reference this inside of our constructor without a call to super first.","position":{"start":{"line":75,"column":1,"offset":6217},"end":{"line":75,"column":463,"offset":6679},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":6217},"end":{"line":75,"column":463,"offset":6679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ok, now let's actually use this state object. One very common application of state objects in React components is to render the data being stored inside them within our component's render function. Let's change our current class component to do that.","position":{"start":{"line":77,"column":1,"offset":6681},"end":{"line":77,"column":251,"offset":6931},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":6681},"end":{"line":77,"column":251,"offset":6931},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComponentWithState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">someData</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Here's some data to render: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":79,"column":1,"offset":6933},"end":{"line":92,"column":4,"offset":7199},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ClassComponentWithState;\nSo what's changed here? Well, we added a key-value pair to our state object inside our constructor. Then we changed the contents of the render function. Now, it's actually rendering the data that we have inside the state object. Notice that inside the div tags we're using a template string literal so that we can access the value of this.state.someData straight inside of our rendered content. This is a very handy piece of functionality that React provides for us when writing components.","position":{"start":{"line":94,"column":1,"offset":7201},"end":{"line":95,"column":491,"offset":7731},"indent":[1]}}],"position":{"start":{"line":94,"column":1,"offset":7201},"end":{"line":95,"column":491,"offset":7731},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"With React's newest version, we can actually now add state to a component without explicitly defining a constructor on the class. We can refactor our class component to look like this:","position":{"start":{"line":97,"column":1,"offset":7733},"end":{"line":97,"column":185,"offset":7917},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":7733},"end":{"line":97,"column":185,"offset":7917},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComponentWithState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\nstate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token literal-property property\">someData</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Here's some data to render: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":100,"column":1,"offset":7920},"end":{"line":114,"column":4,"offset":8136},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ClassComponentWithState;\nOur code is slightly cleaner, and doesn't require as many keystrokes as the older version. Fewer keystrokes are always a plus in my book! This new syntax is what is often referred to as 'syntactic sugar': under the hood, the React library translates this back into the old constructor code that we first started with, so that the JavaScript remains valid to the JavaScript interpreter. The clue to this is the fact that when we want to access some data from the state object, we still need to call it with this.state.someData; changing it to just state.someData does not work.","position":{"start":{"line":116,"column":1,"offset":8138},"end":{"line":117,"column":577,"offset":8754},"indent":[1]}}],"position":{"start":{"line":116,"column":1,"offset":8138},"end":{"line":117,"column":577,"offset":8754},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"While being able to write our code in this way is nice and convenient, going forward, I'm going to stick with the 'older' style of writing my React components by explicitly defining constructors so that you'll all have a better idea of what's going on under the hood. In other words, it's more \"pedagogically sound\". If you prefer the newer style (and I would in my own code), feel free to write your React components that way.","position":{"start":{"line":119,"column":1,"offset":8756},"end":{"line":119,"column":428,"offset":9183},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":8756},"end":{"line":119,"column":428,"offset":9183},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> Updating State\nGreat<span class=\"token punctuation\">,</span> so we can render some state that our component persists <span class=\"token keyword\">for</span> us<span class=\"token punctuation\">.</span> However<span class=\"token punctuation\">,</span> we said an important use <span class=\"token keyword\">case</span> <span class=\"token keyword\">of</span> component state is to handle dynamic data<span class=\"token punctuation\">.</span> <span class=\"token constant\">A</span> single <span class=\"token keyword\">static</span> number isn<span class=\"token string\">'t very dynamic at all. So now let'</span>s walk through how to update component state<span class=\"token punctuation\">.</span>\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js\nimport React, { Component } from 'react';\nclass ClassComponentUpdatingState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      aNumber: 8\n    };\n  }\n\n\nincrement = () => {\nthis.setState({ aNumber: ++this.state.aNumber });\n};\n\ndecrement = () => {\nthis.setState({ aNumber: --this.state.aNumber });\n};\n\nrender() {\nreturn (\n&lt;div>\n&lt;div>{</span><span class=\"token template-punctuation string\">`</span></span>Our number<span class=\"token operator\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>aNumber<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":120,"column":1,"offset":9184},"end":{"line":154,"column":4,"offset":9996},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ClassComponentUpdatingState;\nNotice that we've added two methods to our class: increment and decrement. increment and decrement are methods that we are adding to our class component. Unlike the render method,increment and decrement were not already a part of our class component. This is why increment and decrement are written as arrow functions, so that they are automatically bound to our class component. This needs to happen so that we can call them later on. Again, there's no crazy React black magic going on here, we simply added two methods to our class.","position":{"start":{"line":156,"column":1,"offset":9998},"end":{"line":157,"column":535,"offset":10576},"indent":[1]}}],"position":{"start":{"line":156,"column":1,"offset":9998},"end":{"line":157,"column":535,"offset":10576},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The more interesting thing is what is going on within the bodies of these methods. Each calls this funky setStatefunction. setState in fact is provided to us by React. It is the canonical way to update a component's state. Actually, it's the only way you should ever update a component's state. It may seem more verbose than necessary, but there are good reasons for why you should be doing it this way. I'm not going to get into those reasons now. I'll leave a link to the official documentation on the setState function, although I'm pretty sure at this point it will probably just blow your mind and/or overwhelm you with jargon. So for now, take this as a case of \"because I'm telling you so\".","position":{"start":{"line":159,"column":1,"offset":10578},"end":{"line":159,"column":698,"offset":11275},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":10578},"end":{"line":159,"column":698,"offset":11275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So the way to use setState to update a component's state is to pass it an object with each of the state keys you wish to update, along with the updated value. In our increment method we said \"I would like to update the aNumber property on my component state by adding one to it and then setting the new value as my new aNumber\". The same thing happens in our decrement method, only we're subtracting instead of adding.","position":{"start":{"line":161,"column":1,"offset":11277},"end":{"line":161,"column":419,"offset":11695},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":11277},"end":{"line":161,"column":419,"offset":11695},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then the other new concept we're running into here is how to actually call these methods we've added to our class. We added two HTML button tags within our render function, then in their respective onClick handlers, we specify the method that should be called whenever this button gets clicked. So whenever we click either of the buttons, our state gets updated appropriately and our component will re-render to show the correct value we're expecting.","position":{"start":{"line":163,"column":1,"offset":11697},"end":{"line":163,"column":452,"offset":12148},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":11697},"end":{"line":163,"column":452,"offset":12148},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> Iterating State\nAnother common state pattern you'll see being used <span class=\"token keyword\">in</span> React components is iterating over an array <span class=\"token keyword\">in</span> our state object and rendering each array element <span class=\"token keyword\">in</span> its own tag<span class=\"token punctuation\">.</span> This is often used <span class=\"token keyword\">in</span> order to render lists<span class=\"token punctuation\">.</span>\n\nAdditionally<span class=\"token punctuation\">,</span> we want to be able to easily update lists and have React re<span class=\"token operator\">-</span>render our updated list<span class=\"token punctuation\">.</span> We'll see how both <span class=\"token keyword\">of</span> these are done and how they work together within a single component <span class=\"token keyword\">in</span> order to create the behavior <span class=\"token keyword\">of</span> a dynamic list<span class=\"token punctuation\">.</span>\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComponentIteratingState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">ingredients</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'flour'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sugar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vanilla extract'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function-variable function\">handleIngredientInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">addIngredient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ingredientsList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">;</span>\n        ingredientsList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newIngredient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">ingredients</span><span class=\"token operator\">:</span> ingredientsList\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ingredient</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>ingredient<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addIngredient<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleIngredientInput<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Add a new ingredient\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newIngredient<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":164,"column":1,"offset":12149},"end":{"line":210,"column":4,"offset":13740},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ClassComponentIteratingState;\nThe first change to note is that our state object now has an 'ingredients' array, and a 'newIngredient' field that has been initialized to an empty string. The ingredients array contains the elements that we'll want to render in our list. We'll see shortly why the newIngredient field is needed.","position":{"start":{"line":212,"column":1,"offset":13742},"end":{"line":213,"column":296,"offset":14082},"indent":[1]}}],"position":{"start":{"line":212,"column":1,"offset":13742},"end":{"line":213,"column":296,"offset":14082},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The addIngredient and handleIngredientInput methods we've added to our class receives a parameter called 'event'. This event object is part of the browser's API. When we interact with some DOM element, such as clicking on an HTML button, the function that is invoked upon that button being clicked actually receives the event object. So when we type some input into an input tag, we're able grab each character that was typed into the input field through the event object paramter.","position":{"start":{"line":215,"column":1,"offset":14084},"end":{"line":215,"column":482,"offset":14565},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":14084},"end":{"line":215,"column":482,"offset":14565},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The handleIngredientInput method is what gets invoked every time the user presses a key to enter text in the input box for adding a new ingredient. Every character the user types gets persisted in the newIngredient field on the state object. We're able to grab the text in the input box using event.target.value, which holds the value of the string text that is currently in the input box. We use that to update our newIngredient string field.","position":{"start":{"line":217,"column":1,"offset":14567},"end":{"line":217,"column":444,"offset":15010},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":14567},"end":{"line":217,"column":444,"offset":15010},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Breaking down the addIngredient method, we see this event.preventDefault() invocation. This is because this method will be used upon submitting a form, and it turns out that submitting a form triggers some default form behavior that we don't want to trigger when we submit the form (namely refreshing the entire page). event.preventDefault() will prevent this default form behavior, meaning our form will only do what we want it to do when it is submitted.","position":{"start":{"line":219,"column":1,"offset":15012},"end":{"line":219,"column":457,"offset":15468},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":15012},"end":{"line":219,"column":457,"offset":15468},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next, we store a reference to this.state.ingredients in a variable called ingredientsList. So we now have a copy of the array that is stored in our state object. We want to update the copy of the ingredients array first instead of directly updating the actual array itself in state. This is a React best practice.","position":{"start":{"line":221,"column":1,"offset":15470},"end":{"line":221,"column":314,"offset":15783},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":15470},"end":{"line":221,"column":314,"offset":15783},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now we push whatever value is being stored at our newIngredient field onto the ingredientsList array so that our ingredientsList array is now more up-to-date than our this.state.ingredients array. So all we have to do now is call setState appropriately in order to update the value in our state object. Additionally, we also set the newIngredient field back to an empty string in order to clear out the input field once we submit a new ingredient. Now it's ready to accept more user input!","position":{"start":{"line":223,"column":1,"offset":15785},"end":{"line":223,"column":490,"offset":16274},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":15785},"end":{"line":223,"column":490,"offset":16274},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Looking at our render function, first note the this.state.ingredients.map call. This is looping through each ingredient in our ingredients array and returning each one within its own div tag. This is a very common syntax for rendering everything inside an array.","position":{"start":{"line":225,"column":1,"offset":16276},"end":{"line":225,"column":263,"offset":16538},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":16276},"end":{"line":225,"column":263,"offset":16538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then we have an HTML form which contains an input field. The purpose of this form is to allow a user to add new ingredients to the list. Note that we're passing our addIngredient method to the form's onSubmit handler. This means that our addIngredient method gets invoked whenever our form is submitted.","position":{"start":{"line":227,"column":1,"offset":16540},"end":{"line":227,"column":304,"offset":16843},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":16540},"end":{"line":227,"column":304,"offset":16843},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lastly, the input field has an onChange handler that invokes our handleIngredientInput method whenever there is some sort of change in the input field, namely when a user types into it. Notice that the value field in our input tag reads off of this.state.newIngredient in order to know what value to display. So when a user enters text into the input field, the onChange handler is invoked every time, which updates our this.state.newIngredient field, which the input field\nthen renders.","position":{"start":{"line":229,"column":1,"offset":16845},"end":{"line":230,"column":14,"offset":17332},"indent":[1]}}],"position":{"start":{"line":229,"column":1,"offset":16845},"end":{"line":230,"column":14,"offset":17332},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Parent and Child Components\nNow let's get into talking about how to have components interact with each other. A single isolated component isn't going to do us much good. That being said, it's possible to simply throw all of the HTML for a page into a single React component, though at that point that one component would be so bloated and monolithic that you might as well not have used React at all.","position":{"start":{"line":232,"column":1,"offset":17334},"end":{"line":233,"column":373,"offset":17734},"indent":[1]}}],"position":{"start":{"line":232,"column":1,"offset":17334},"end":{"line":233,"column":373,"offset":17734},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The beauty of React lies in the fact that it allows us to compose modular components together. Let's start off with the component we just saw, but let's change its name to ParentComponent.","position":{"start":{"line":235,"column":1,"offset":17736},"end":{"line":235,"column":189,"offset":17924},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":17736},"end":{"line":235,"column":189,"offset":17924},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ChildComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./ChildComponent'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">ingredients</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'flour'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sugar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vanilla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token function-variable function\">handleIngredientInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">addIngredient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ingredientsList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">;</span>\n        ingredientsList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newIngredient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">newIngredient</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">ingredients</span><span class=\"token operator\">:</span> ingredientsList\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ingredient</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>ChildComponent thing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ingredient<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addIngredient<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleIngredientInput<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Add a new ingredient\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newIngredient<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ParentComponent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":237,"column":1,"offset":17926},"end":{"line":279,"column":4,"offset":19097},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The only two other differences in this component are that we're importing a ChildComponent and then using it inside our this.state.ingredients.map call. ChildComponent is another React component. Notice that we're using it just as if it were any other HTML tag. This is how we lay out our component hierarchy: the ChildComponent is rendered within the ParentComponent. We can see this to be the case if we open up the developer console and inspect these elements.","position":{"start":{"line":282,"column":1,"offset":19100},"end":{"line":282,"column":464,"offset":19563},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":19100},"end":{"line":282,"column":464,"offset":19563},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note also that we're passing each ingredient as a 'thing' to the ChildComponent component. This is how a parent component passes data to a child component. It doesn't need to be called 'thing'; you can call it whatever you want. Conceptually though, every piece of data that a parent component passes down to a child component is called a 'prop' in React lingo.","position":{"start":{"line":284,"column":1,"offset":19565},"end":{"line":284,"column":362,"offset":19926},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":19565},"end":{"line":284,"column":362,"offset":19926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take a look now at the Child Component. It serves two purposes: 1) to render the props data that it gets from a parent component, and 2) to add the ability for a user to click on it and have it toggle a strikethrough, indicating that the item is 'complete'.\nimport React, { Component } from 'react';","position":{"start":{"line":286,"column":1,"offset":19928},"end":{"line":287,"column":42,"offset":20233},"indent":[1]}}],"position":{"start":{"line":286,"column":1,"offset":19928},"end":{"line":287,"column":42,"offset":20233},"indent":[1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">clicked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clicked</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">textDecoration</span><span class=\"token operator\">:</span> <span class=\"token string\">'line-through'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">textDecoration</span><span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>thing<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":288,"column":1,"offset":20234},"end":{"line":311,"column":4,"offset":20644},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"export default ChildComponent;\nThe overall structure of the child component is nothing we haven't seen. It's just another class component with its own state object and a method called handleClick.","position":{"start":{"line":313,"column":1,"offset":20646},"end":{"line":314,"column":166,"offset":20842},"indent":[1]}}],"position":{"start":{"line":313,"column":1,"offset":20646},"end":{"line":314,"column":166,"offset":20842},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A component accesses its props via the this.props object. Any prop a parent component passes down to a child component is accessible inside the child component's this.prop object.","position":{"start":{"line":316,"column":1,"offset":20844},"end":{"line":316,"column":180,"offset":21023},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":20844},"end":{"line":316,"column":180,"offset":21023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So our child component keeps its own state that tracks whether the component has been clicked or not. Then at the top of the render function, it uses a ternary condition to determine whether the div tag that is being rendered should have a strikethrough or not. The handleClick method is then invoked via an onClick handler on the div tag; it does the work of toggling the this.state.clicked boolean.","position":{"start":{"line":318,"column":1,"offset":21025},"end":{"line":318,"column":401,"offset":21425},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":21025},"end":{"line":318,"column":401,"offset":21425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The overall structure of React applications can be represented as a hierarchical tree structure, just like how the DOM itself is structure. There is an overarching root component at the top of the hierarchy that every other component sits underneath. Specifying that a component should be a child of some parent component is as simple as throwing it in the parent component's render function, just like how we did it in this example.","position":{"start":{"line":320,"column":1,"offset":21427},"end":{"line":320,"column":434,"offset":21860},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":21427},"end":{"line":320,"column":434,"offset":21860},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":321,"column":1,"offset":21861},"end":{"line":322,"column":1,"offset":21865},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":322,"column":1,"offset":21865}}}}