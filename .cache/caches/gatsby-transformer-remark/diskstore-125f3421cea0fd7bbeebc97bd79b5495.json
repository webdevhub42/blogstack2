{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-dee2cb31d1a1379040039e78599d5b9e-gatsby-remark-prismjs-","val":"<h2>Python Practice:</h2>\n<h1>Python Problems &#x26; Solutions For Beginners</h1>\n<p>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to…</p>\n<hr>\n<h3>Python Problems &#x26; Solutions For Beginners</h3>\n<h4>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to practice and refactor.</h4>\n<h3>Python Practice Problems</h3>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*dMdMGwOJKHJ-5sOP.gif\" class=\"graf-image\" />\n</figure>\n<hr>\n<h4>Here are some other articles for reference if you need them:</h4>\n<a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\">\n<strong>Beginners Guide To Python</strong>\n<br />\n<em>My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library…</em>medium.com</a>\n<a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\">\n<strong>Python Study Guide for a JavaScript Programmer</strong>\n<br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a>\n<a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<hr>\n<h3>Here are the problems without solutions for you to practice with:</h3>\n<hr>\n<h3>Problem 1</h3>\n<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn <code class=\"language-text\">100</code> years old.</p>\n<p>The <code class=\"language-text\">datetime</code> module supplies classes for manipulating dates and times.</p>\n<p>While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</p>\n<a href=\"https://docs.python.org/3/library/datetime.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/datetime.html\">\n<strong>datetime - Basic date and time types - Python 3.9.6 documentation</strong>\n<br />\n<em>Only one concrete class, the class, is supplied by the module. The class can represent simple timezones with fixed…</em>docs.python.org</a>\n<a href=\"https://docs.python.org/3/library/datetime.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">\n</a>\n<h3>Problem 2</h3>\n<p>Ask the user for a number. Depending on whether the number is <code class=\"language-text\">even</code> or <code class=\"language-text\">odd</code>, print out an appropriate message to the user.</p>\n<h4>Bonus:</h4>\n<ol>\n<li><span id=\"eebc\">If the number is a multiple of <code class=\"language-text\">4</code>, print out a different message.</span></li>\n<li><span id=\"306e\">Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.</span></li>\n</ol>\n<h3>Problem 3</h3>\n<p>Take a list and write a program that prints out all the elements of the list that are <code class=\"language-text\">less</code> than <code class=\"language-text\">5</code>.</p>\n<p>Extras:</p>\n<ol>\n<li><span id=\"fe03\">Instead of printing the elements one by one, make a new list that has all the elements less than <code class=\"language-text\">5</code> from this list in it and print out this new list.</span></li>\n<li><span id=\"186b\">Write this in one line of Python.</span></li>\n<li><span id=\"9cd1\">Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.</span></li>\n</ol>\n<h3>Problem 4</h3>\n<p>Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don't know what a divisor is, it is a number that divides evenly into another number.</p>\n<p>For example, <code class=\"language-text\">13</code> is a divisor of <code class=\"language-text\">26</code> because <code class=\"language-text\">26 / 13</code> has no remainder.)</p>\n<h3>Problem 5</h3>\n<p>Take two lists, and write a program that returns a list that contains only the elements that are <code class=\"language-text\">common between the lists (without duplicates)</code>. Make sure your program works on two lists of different sizes.</p>\n<a href=\"https://docs.python.org/3/library/random.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/random.html\">\n<strong>random - Generate pseudo-random numbers - Python 3.9.6 documentation</strong>\n<br />\n<em>Source code: Lib/random.py This module implements pseudo-random number generators for various distributions. For…</em>docs.python.org</a>\n<a href=\"https://docs.python.org/3/library/random.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">\n</a>\n<p>Bonus:</p>\n<ol>\n<li><span id=\"e18a\">Randomly generate two lists to test this.</span></li>\n<li><span id=\"148a\">Write this in one line of Python.</span></li>\n</ol>\n<h3>Problem 6</h3>\n<p>Ask the user for a string and print out whether this string is a <code class=\"language-text\">palindrome</code> or not. (A palindrome is a string that reads the same forwards and backwards.)</p>\n<blockquote>\n<p>Here's 5 ways to reverse a string (courtesy of <a href=\"https://www.geeksforgeeks.org/reverse-string-python-5-different-ways/\" class=\"markup--anchor markup--pullquote-anchor\">geeksforgeeks</a>)</p>\n</blockquote>\n<hr>\n<h3>Problem 7</h3>\n<p>Let's say I give you a list saved in a variable: a = <code class=\"language-text\">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>.</p>\n<p>Write one line of Python that takes this list a and makes a new list that has only the <code class=\"language-text\">even</code> elements of this list in it.</p>\n<h3>Problem 8</h3>\n<p>Make a two-player <code class=\"language-text\">Rock-Paper-Scissors</code> game.</p>\n<p><strong>Hint:</strong><br>\nAsk for player plays (using input), compare them. Print out a message of congratulations to the winner, and ask if the players want to start a new game.</p>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*1_4w6u4D7EDi2r4h.png\" class=\"graf-image\" />\n</figure>### Problem 9\n<p>Generate a random number between <code class=\"language-text\">1 and 100 (including 1 and 100)</code>. Ask the user to guess the number, then tell them whether they guessed <code class=\"language-text\">too low</code>, <code class=\"language-text\">too high</code>, or <code class=\"language-text\">exactly right</code>.</p>\n<blockquote>\n<p><strong>Hint:</strong><br>\nRemember to use the user input from the very first exercise.</p>\n</blockquote>\n<p><strong>Extras:</strong><br>\nKeep the game going until the user types <code class=\"language-text\">\"exit\"</code>.<br>\nKeep track of how many guesses the user has taken, and when the game ends, print this out.</p>\n<h3>Problem 10</h3>\n<p>Write a program that asks the user how many Fibonacci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.</p>\n<p><strong>Hint:</strong><br>\nThe Fibonacci sequence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: <code class=\"language-text\">1, 1, 2, 3, 5, 8, 13, …</code></p>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*2xJsVLGikF6dg7qc.png\" class=\"graf-image\" />\n</figure>\n<hr>\n<h3>Intermediate Problems:</h3>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*hTU58jGsgkrszi76.gif\" class=\"graf-image\" />\n</figure>\n<hr>\n<h3>Problem 11</h3>\n<p>In linear algebra, <em>a Toeplitz matrix is one in which the elements on any given diagonal from top left to bottom right are identical.</em><br>\nHere is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 2 3 4 8\n5 1 2 3 4\n4 5 1 2 3\n7 4 5 1 2</code></pre></div>\n<p>Write a program to determine whether a given input is a <code class=\"language-text\">Toeplitz</code> matrix.</p>\n<h3>Problem 12</h3>\n<p>Given a positive integer <code class=\"language-text\">N</code>, find the smallest number of steps it will take to reach <code class=\"language-text\">1</code>.</p>\n<p>There are two kinds of permitted steps:<br>\n— -> You may decrement N to N — 1.<br>\n— -> If <code class=\"language-text\">a * b = N</code>, you may decrement <code class=\"language-text\">N to the larger of a and b</code>.</p>\n<p>For example, given 100, you can reach 1 in 5 steps with the following route:<br>\n<code class=\"language-text\">100 -> 10 -> 9 -> 3 -> 2 -> 1.</code></p>\n<h3>Problem 13</h3>\n<p>Consider the following scenario: there are <code class=\"language-text\">N</code> mice and <code class=\"language-text\">N</code> holes placed at integer points along a line. Given this, find a method that maps mice to holes such that the largest number of steps any mouse takes is minimized.</p>\n<p>Each move consists of moving one mouse <code class=\"language-text\">one</code> unit to the <code class=\"language-text\">left</code> or <code class=\"language-text\">right</code>, and only <code class=\"language-text\">one</code> mouse can fit inside each hole.</p>\n<p>For example, suppose the mice are positioned at <code class=\"language-text\">[1, 4, 9, 15]</code>, and the holes are located at <code class=\"language-text\">[10, -5, 0, 16]</code>. In this case, the best pairing would require us to send the mouse at <code class=\"language-text\">1</code> to the hole at <code class=\"language-text\">-5</code>, so our function should return <code class=\"language-text\">6</code>.</p>\n<h3>My Blog:</h3>\n<a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://master--bgoonz-blog.netlify.app/\">\n<strong>Web-Dev-Hub</strong>\n<br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>master--bgoonz-blog.netlify.app</a>\n<a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\">\n<strong>A list of all of my articles to link to future posts</strong>\n<br />\n<em>You should probably skip this one… seriously it's just for internal use!</em>bryanguner.medium.com</a>\n<a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<hr>\n<h1>Python</h1>\n<ul>\n<li>Python is an interpreted, high-level and general-purpose, dynamically typed programming language</li>\n<li>-</li>\n<li>It is also Object oriented, modular oriented and a</li>\n<li>-</li>\n<li>In Python, everything is considered as an Object.</li>\n<li>-</li>\n<li>A python file has an extension of .py</li>\n<li>Python follows Indentation to separate code blocks instead of flower brackets({}).</li>\n<li>\n<p>We can run a python file by the following command in cmd(Windows) or shell(mac/linux).</p>\n<p><code class=\"language-text\">python &lt;filename.py></code></p>\n</li>\n</ul>\n<h4>By default, the python doesn't require any imports to run a python file.</h4>\n<h2>Create and execute a program</h2>\n<ol>\n<li>Open up a terminal/cmd</li>\n<li>Create the program: nano/cat > nameProgram.py</li>\n<li>Write the program and save it</li>\n<li>python nameProgram.py</li>\n</ol>\n<br>\n<h3>Basic Datatypes</h3>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>Integer values [0, 1, -2, 3]</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Floating point values [0.1, 4.532, -5.092]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>str</td>\n<td>Strings [abc, AbC, A@B, sd!, `asa]</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>Boolean Values [True, False]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>complex</td>\n<td>Complex numbers [2+3j, 4-1j]</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Keywords</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break</td>\n<td>used to exit loop and used to exit</td>\n</tr>\n<tr>\n<td>char</td>\n<td>basic declaration of a type character</td>\n</tr>\n<tr>\n<td>const</td>\n<td>prefix declaration meaning variable can not be changed</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>go to bottom of loop in for, while loops</td>\n</tr>\n<tr>\n<td>class</td>\n<td>to define a class</td>\n</tr>\n<tr>\n<td>def</td>\n<td>to define a function</td>\n</tr>\n<tr>\n<td>elif</td>\n<td>shortcut for (else if) used in else if ladder</td>\n</tr>\n<tr>\n<td>else</td>\n<td>executable statement, part of \"if\" structure</td>\n</tr>\n<tr>\n<td>float</td>\n<td>basic declaration of floating point</td>\n</tr>\n<tr>\n<td>for</td>\n<td>executable statement, for loop</td>\n</tr>\n<tr>\n<td>from</td>\n<td>executable statement, used to import only specific objects from a package</td>\n</tr>\n<tr>\n<td>if</td>\n<td>executable statement</td>\n</tr>\n<tr>\n<td>import</td>\n<td>to import modules</td>\n</tr>\n<tr>\n<td>pass</td>\n<td>keyword to specify noting is happening in the codeblock, generally used in classes</td>\n</tr>\n<tr>\n<td>return</td>\n<td>executable statement with or without a value</td>\n</tr>\n<tr>\n<td>while</td>\n<td>executable statement, while loop</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Operators</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>( )</td>\n<td>grouping parenthesis, function call, tuple declaration</td>\n<td></td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>array indexing, also declaring lists etc.</td>\n<td></td>\n</tr>\n<tr>\n<td>!</td>\n<td>relational not, complement, ! a yields true or false</td>\n<td></td>\n</tr>\n<tr>\n<td>~</td>\n<td>bitwise not, ones complement, ~a</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>unary minus, - a</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>unary plus, + a</td>\n<td></td>\n</tr>\n<tr>\n<td>*</td>\n<td>multiply, a * b</td>\n<td></td>\n</tr>\n<tr>\n<td>/</td>\n<td>divide, a / b</td>\n<td></td>\n</tr>\n<tr>\n<td>%</td>\n<td>modulo, a % b</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>add, a + b</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>subtract, a - b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;</td>\n<td>shift left, left operand is shifted left by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>>></td>\n<td>shift right, left operand is shifted right by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>less than, result is true or false, a %lt; b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>less than or equal, result is true or false, a &#x3C;= b</td>\n<td></td>\n</tr>\n<tr>\n<td>></td>\n<td>greater than, result is true or false, a > b</td>\n<td></td>\n</tr>\n<tr>\n<td>>=</td>\n<td>greater than or equal, result is true or false, a >= b</td>\n<td></td>\n</tr>\n<tr>\n<td>==</td>\n<td>equal, result is true or false, a == b</td>\n<td></td>\n</tr>\n<tr>\n<td>!=</td>\n<td>not equal, result is true or false, a != b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;</td>\n<td>bitwise and, a &#x26; b</td>\n<td></td>\n</tr>\n<tr>\n<td>^</td>\n<td>bitwise exclusive or XOR, a ^ b</td>\n<td></td>\n</tr>\n<tr>\n<td>|</td>\n<td>bitwise or, a</td>\n<td>b</td>\n</tr>\n<tr>\n<td>&#x26;&#x26;, and</td>\n<td>relational and, result is true or false, a &#x3C; b &#x26;&#x26; c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>||, or</td>\n<td>relational or, result is true or false, a &#x3C; b || c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>=</td>\n<td>store or assignment</td>\n<td></td>\n</tr>\n<tr>\n<td>+=</td>\n<td>add and store</td>\n<td></td>\n</tr>\n<tr>\n<td>-=</td>\n<td>subtract and store</td>\n<td></td>\n</tr>\n<tr>\n<td>*=</td>\n<td>multiply and store</td>\n<td></td>\n</tr>\n<tr>\n<td>/=</td>\n<td>divide and store</td>\n<td></td>\n</tr>\n<tr>\n<td>%=</td>\n<td>modulo and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;=</td>\n<td>shift left and store</td>\n<td></td>\n</tr>\n<tr>\n<td>>>=</td>\n<td>shift right and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;=</td>\n<td>bitwise and and store</td>\n<td></td>\n</tr>\n<tr>\n<td>^=</td>\n<td>bitwise exclusive or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>|=</td>\n<td>bitwise or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>,</td>\n<td>separator as in ( y=x,z=++x )</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Basic Data Structures</h3>\n<h3>List</h3>\n<ul>\n<li>List is a collection which is ordered and changeable. Allows duplicate members.</li>\n<li>-</li>\n<li>Lists are created using square brackets:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thislist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>List items are ordered, changeable, and allow duplicate values.</li>\n<li>-</li>\n<li>List items are indexed, the first item has index <code class=\"language-text\">[0]</code>, the second item has index <code class=\"language-text\">[1]</code> etc.</li>\n<li>-</li>\n<li>The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.</li>\n<li>To determine how many items a list has, use the <code class=\"language-text\">len()</code> function.</li>\n<li>A list can contain different data types:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>It is also possible to use the list() constructor when creating a new list</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thislist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># note the double round-brackets</span></code></pre></div>\n<h3>Tuple</h3>\n<ul>\n<li>Tuple is a collection which is ordered and unchangeable. Allows duplicate members.</li>\n<li>A tuple is a collection which is ordered and unchangeable.</li>\n<li>Tuples are written with round brackets.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Tuple items are ordered, unchangeable, and allow duplicate values.</li>\n<li>Tuple items are indexed, the first item has index <code class=\"language-text\">[0]</code>, the second item has index <code class=\"language-text\">[1]</code> etc.</li>\n<li>When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.</li>\n<li>-</li>\n<li>Tuples are unchangeable, meaning that we cannot change, add or remo</li>\n<li>Since tuple are indexed, tuples can have items with the same value:</li>\n<li>Tuples allow duplicate values:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>To determine how many items a tuple has, use the <code class=\"language-text\">len()</code>function:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>thistuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>thistuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#NOT a tuple</span>\nthistuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>thistuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>It is also possible to use the tuple() constructor to make a tuple.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># note the double round-brackets</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>thistuple<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Set</h3>\n<ul>\n<li>Set is a collection which is unordered and unindexed. No duplicate members.</li>\n<li>A set is a collection which is both unordered and unindexed.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Set items are unordered, unchangeable, and do not allow duplicate values.</li>\n<li>Unordered means that the items in a set do not have a defined order.</li>\n<li>-</li>\n<li>Set items can appear in a different order every time you use them, and cannot be referred to b</li>\n<li>-</li>\n<li>Sets are unchangeable, meaning that we cannot change the items after the set has been created.</li>\n<li>Duplicate values will be ignored.</li>\n<li>To determine how many items a set has, use the <code class=\"language-text\">len()</code> method.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>thisset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Set items can be of any data type:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">}</span>\nset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nset3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span>\nset4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>It is also possible to use the <code class=\"language-text\">set()</code> constructor to make a set.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># note the double round-brackets</span></code></pre></div>\n<h3>Dictionary</h3>\n<ul>\n<li>Dictionary is a collection which is unordered and changeable. No duplicate members.</li>\n<li>Dictionaries are used to store data values in key:value pairs.</li>\n<li>Dictionaries are written with curly brackets, and have keys and values:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"brand\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"year\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1964</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Dictionary items are presented in key:value pairs, and can be referred to by using the key name.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"brand\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"year\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1964</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>thisdict<span class=\"token punctuation\">[</span><span class=\"token string\">\"brand\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.</li>\n<li>Dictionaries cannot have two items with the same key.</li>\n<li>Duplicate values will overwrite existing values.</li>\n<li>To determine how many items a dictionary has, use the <code class=\"language-text\">len()</code> function.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>thisdict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>The values in dictionary items can be of any data type</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"brand\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"electric\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"year\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1964</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"colors\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Conditional branching</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">    <span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">elif</span> condition2<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code></pre></div>\n<h3>Loops</h3>\n<p>Python has two primitive loop commands:</p>\n<ol>\n<li>while loops</li>\n<li>for loops</li>\n</ol>\n<h4>While loop</h4>\n<ul>\n<li>With the <code class=\"language-text\">while</code> loop we can execute a set of statements as long as a condition is true.</li>\n<li>Example: Print i as long as i is less than 6</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<ul>\n<li>The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.</li>\n<li>With the <code class=\"language-text\">break</code> statement we can stop the loop even if the while condition is true</li>\n<li>With the continue statement we can stop the current iteration, and continue with the next.</li>\n<li>-</li>\n<li>With the else statement we can run a block of code once when the condition no longer is true.</li>\n</ul>\n<h4>For loop</h4>\n<ul>\n<li>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</li>\n<li>-</li>\n<li>This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.</li>\n<li>With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>The for loop does not require an indexing variable to set beforehand.</li>\n<li>To loop through a set of code a specified number of times, we can use the range() function.</li>\n<li>The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.</li>\n<li>The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3).</li>\n<li>The else keyword in a for loop specifies a block of code to be executed when the loop is finished.\nA nested loop is a loop inside a loop.</li>\n<li>The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">adj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"big\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tasty\"</span><span class=\"token punctuation\">]</span>\nfruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> adj<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span></code></pre></div>\n<h3>Function definition</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span></code></pre></div>\n<h3>Function call</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">function_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>We need not to specify the return type of the function.</li>\n<li>Functions by default return <code class=\"language-text\">None</code></li>\n<li>We can return any datatype.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"&lt;---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_hi<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Should get the print inside the function, then None</span>\n<span class=\"token comment\"># Boolean Values</span>\n<span class=\"token comment\"># Work the same as in JS, except they are title case: True and False</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nb <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token comment\"># Logical Operators</span>\n<span class=\"token comment\"># ! = not, || = or, &amp;&amp; = and</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Truthiness - Everything is True except...</span>\n<span class=\"token comment\"># False - None, False, '', [], (), set(), range(0)</span>\n<span class=\"token comment\"># Number Values</span>\n<span class=\"token comment\"># Integers are numbers without a floating decimal point</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># type returns the type of whatever argument you pass in</span>\n<span class=\"token comment\"># Floating Point values are numbers with a floating decimal point</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Type Casting</span>\n<span class=\"token comment\"># You can convert between ints and floats (along with other types...)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># If you convert a float to an int, it will truncate the decimal</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Python does not automatically convert types like JS</span>\n<span class=\"token comment\"># print(17.0 + ' heyooo ' + 17)  # TypeError</span>\n<span class=\"token comment\"># Arithmetic Operators</span>\n<span class=\"token comment\"># ** - exponent (comparable to Math.pow(num, pow))</span>\n<span class=\"token comment\"># // - integer division</span>\n<span class=\"token comment\"># There is no ++ or -- in Python</span>\n<span class=\"token comment\"># String Values</span>\n<span class=\"token comment\"># We can use single quotes, double quotes, or f'' for string formats</span>\n<span class=\"token comment\"># We can use triple single quotes for multiline strings</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"This here's a story\nAll about how\nMy life got twist\nTurned upside down\n\"\"\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Three double quotes can also be used, but we typically reserve these for</span>\n<span class=\"token comment\"># multi-line comments and function docstrings (refer to lines 6-9)(Nice :D)</span>\n<span class=\"token comment\"># We use len() to get the length of something</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7 characters</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ho\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ho\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5 list items</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8 set items</span>\n<span class=\"token comment\"># We can index into strings, list, etc..self.</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"Bryan\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B, r, y, a, n</span>\n<span class=\"token comment\"># We can index starting from the end as well, with negatives</span>\noccupation <span class=\"token operator\">=</span> <span class=\"token string\">\"Full Stack Software Engineer\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># e</span>\n<span class=\"token comment\"># We can also get ranges in the index with the [start:stop:step] syntax</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># step and stop are optional, stop is exclusive</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># beginning to end, every 4th letter</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Let's get weird with it!</span>\n<span class=\"token comment\"># NOTE: Indexing out of range will give you an IndexError</span>\n<span class=\"token comment\"># We can also get the index og things with the .index() method, similar to indexOf()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cole\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cole\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can count how many times a substring/item appears in something as well</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Now this here's a story all about how\nMy life got twist turned upside down\nI forget the rest but the the the potato\nsmells like the potato\"\"\"</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"the\"</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We concatenate the same as Javascript, but we can also multiply strings</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ha\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use format for a multitude of things, from spaces to decimal places</span>\nfirst_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bryan\"</span>\nlast_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Guner\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your name is {0} {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Useful String Methods</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># HELLO</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"lo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello There\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [Hello, There]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False,  must consist only of letters</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True, must consist of only letters and numbers</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3215235123\"</span><span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True, must be all numbers</span>\n<span class=\"token comment\"># True, must consist of only spaces/tabs/newlines</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       \\n     \"</span><span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># False, index 0 must be upper case and the rest lower</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan Guner\"</span><span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael Lee\"</span><span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True!</span>\n<span class=\"token comment\"># Duck Typing - If it walks like a duck, and talks like a duck, it must be a duck</span>\n<span class=\"token comment\"># Assignment - All like JS, but there are no special keywords like let or const</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nb <span class=\"token operator\">=</span> a\nc <span class=\"token operator\">=</span> <span class=\"token string\">\"heyoo\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"reassignment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G!\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Comparison Operators - Python uses the same equality operators as JS, but no ===</span>\n<span class=\"token comment\"># &lt; - Less than</span>\n<span class=\"token comment\"># > - Greater than</span>\n<span class=\"token comment\"># &lt;= - Less than or Equal</span>\n<span class=\"token comment\"># >= - Greater than or Equal</span>\n<span class=\"token comment\"># == - Equal to</span>\n<span class=\"token comment\"># != - Not equal to</span>\n<span class=\"token comment\"># is - Refers to exact same memory location</span>\n<span class=\"token comment\"># not - !</span>\n<span class=\"token comment\"># Precedence - Negative Signs(not) are applied first(part of each number)</span>\n<span class=\"token comment\">#            - Multiplication and Division(and) happen next</span>\n<span class=\"token comment\">#            - Addition and Subtraction(or) are the last step</span>\n<span class=\"token comment\">#  NOTE: Be careful when using not along with ==</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token comment\"># print(a == not b) # Syntax Error</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># This fixes it. Answer: False</span>\n<span class=\"token comment\"># Python does short-circuit evaluation</span>\n<span class=\"token comment\"># Assignment Operators - Mostly the same as JS except Python has **= and //= (int division)</span>\n<span class=\"token comment\"># Flow Control Statements - if, while, for</span>\n<span class=\"token comment\"># Note: Python smushes 'else if' into 'elif'!</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We don't get here\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nor here...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey there!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a string</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a range</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a list</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a dictionary</span>\nspam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"items\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hooo!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> spam<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Loop over a list of tuples and destructuring the values</span>\n<span class=\"token comment\"># Assuming spam.items returns a list of tuples each containing two items (k, v)</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> spam<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># While loops as long as the condition is True</span>\n<span class=\"token comment\">#  - Exit loop early with break</span>\n<span class=\"token comment\">#  - Exit iteration early with continue</span>\nspam <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sike That's the wrong Numba\"</span><span class=\"token punctuation\">)</span>\n    spam <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> spam <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">break</span>\n\n<span class=\"token comment\"># Functions - use def keyword to define a function in Python</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printCopyright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Copyright 2021, Bgoonz\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)</span>\navg <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span>\navg<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Calling it with keyword arguments, order does not matter</span>\navg<span class=\"token punctuation\">(</span>num2<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> num1<span class=\"token operator\">=</span><span class=\"token number\">1252</span><span class=\"token punctuation\">)</span>\nprintCopyright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can give parameters default arguments like JS</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> saying<span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>saying<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ngreeting<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Hello Mike</span>\ngreeting<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan\"</span><span class=\"token punctuation\">,</span> saying<span class=\"token operator\">=</span><span class=\"token string\">\"Hello there...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># A common gotcha is using a mutable object for a default parameter</span>\n<span class=\"token comment\"># All invocations of the function reference the same mutable object</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">append_item</span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">,</span> item_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Will it obey and give us a new list?</span>\n    item_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item_list\n\n<span class=\"token comment\"># Uses same item list unless otherwise stated which is counterintuitive</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,</span>\n<span class=\"token comment\">#          it will throw an error</span>\n<span class=\"token comment\"># avg(1)  # TypeError</span>\n<span class=\"token comment\"># avg(1, 2, 2) # TypeError</span>\n<span class=\"token comment\"># ----------------------------------- DAY 2 ----------------------------------------</span>\n<span class=\"token comment\"># Functions - * to get rest of position arguments as tuple</span>\n<span class=\"token comment\">#           - ** to get rest of keyword arguments as a dictionary</span>\n<span class=\"token comment\"># Variable Length positional arguments</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># args is a tuple of the rest of the arguments</span>\n    total <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">+=</span> n\n    <span class=\"token keyword\">return</span> total\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># args is None, returns 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># args is (3, 4, 5, 6), returns 21</span>\n<span class=\"token comment\"># Variable Length Keyword Arguments</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_names_and_countries</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># kwargs is a dictionary of the rest of the keyword arguments</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\nprint_names_and_countries<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Hey there\"</span><span class=\"token punctuation\">,</span> Monica<span class=\"token operator\">=</span><span class=\"token string\">\"Sweden\"</span><span class=\"token punctuation\">,</span> Mike<span class=\"token operator\">=</span><span class=\"token string\">\"The United States\"</span><span class=\"token punctuation\">,</span> Mark<span class=\"token operator\">=</span><span class=\"token string\">\"China\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can combine all of these together</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">example2</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> kw_1<span class=\"token operator\">=</span><span class=\"token string\">\"cheese\"</span><span class=\"token punctuation\">,</span> kw_2<span class=\"token operator\">=</span><span class=\"token string\">\"horse\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># Lists are mutable arrays</span>\nempty_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nroomates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Beau\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Delynn\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># List built-in function makes a list too</span>\nspecials <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use 'in' to test if something is in the list, like 'includes' in JS</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Dictionaries - Similar to JS POJO's or Map, containing key value pairs</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>one<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> three<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Can use 'in' on dictionaries too (for keys)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Sets - Just like JS, unordered collection of distinct objects</span>\nbedroom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"bed\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"computer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clothes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"playstation 4\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")</span>\nschool_bag <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paper\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pencil\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pencil\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eraser\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>school_bag<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bedroom<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use 'in' on sets as wel</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Tuples are immutable lists of items</span>\ntime_blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AM\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PM\"</span><span class=\"token punctuation\">)</span>\ncolors <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span>  <span class=\"token comment\"># Parenthesis not needed but encouraged</span>\n<span class=\"token comment\"># The tuple built-in function can be used to convert things to tuples</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'in' may be used on tuples as well</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Ranges are immutable lists of numbers, often used with for loops</span>\n<span class=\"token comment\">#   - start - default: 0, first number in sequence</span>\n<span class=\"token comment\">#   - stop - required, next number past last number in sequence</span>\n<span class=\"token comment\">#   - step - default: 1, difference between each number in sequence</span>\nrange1 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0,1,2,3,4]</span>\nrange2 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3,4]</span>\nrange3 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0,5,10,15,20]</span>\nrange4 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># []</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range1<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Built-in functions:</span>\n<span class=\"token comment\"># Filter</span>\nisOdd <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> num<span class=\"token punctuation\">:</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\nfiltered <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>isOdd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> filtered<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"first way: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"list comprehension: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Map</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nupperCased <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>upperCased<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Sorted</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Notice uppercase comes before lowercase</span>\n<span class=\"token comment\"># Using a key function to control the sorting and make it case insensitive</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can also reverse the sort</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Enumerate creates a tuple with an index for what you're enumerating</span>\nquarters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Third\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fourth\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>quarters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>quarters<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Zip takes list and combines them as key value pairs, or really however you need</span>\nkeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">)</span>\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Buster\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cheetoh@johhnydepp.com\"</span><span class=\"token punctuation\">)</span>\nzipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can zip more than 2</span>\nx_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\ny_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nz_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncoords <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x_coords<span class=\"token punctuation\">,</span> y_coords<span class=\"token punctuation\">,</span> z_coords<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Len reports the length of strings along with list and any other object data type</span>\nprint_len <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> item<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># doing this to save myself some typing</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4 because there is a duplicate here (10)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Max will return the max number in a given scenario</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1012</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Min</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Sum</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Any</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># All</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Dir returns all the attributes of an object including it's methods and dunder methods</span>\nuser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bob@bob.com\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Importing packages and modules</span>\n<span class=\"token comment\">#  - Module - A Python code in a file or directory</span>\n<span class=\"token comment\">#  - Package - A module which is a directory containing an __init__.py file</span>\n<span class=\"token comment\">#  - Submodule - A module which is contained within a package</span>\n<span class=\"token comment\">#  - Name - An exported function, class, or variable in a module</span>\n<span class=\"token comment\"># Unlike JS, modules export ALL names contained within them without any special export key</span>\n<span class=\"token comment\"># Assuming we have the following package with four submodules</span>\n<span class=\"token comment\">#  math</span>\n<span class=\"token comment\">#  |  __init__.py</span>\n<span class=\"token comment\">#  | addition.py</span>\n<span class=\"token comment\">#  | subtraction.py</span>\n<span class=\"token comment\">#  | multiplication.py</span>\n<span class=\"token comment\">#  | division.py</span>\n<span class=\"token comment\"># If we peek into the addition.py file we see there's an add function</span>\n<span class=\"token comment\"># addition.py</span>\n<span class=\"token comment\"># We can import 'add' from other places because it's a 'name' and is automatically exported</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2\n\n<span class=\"token comment\"># Notice the . syntax because this package can import it's own submodules.</span>\n<span class=\"token comment\"># Our __init__.py has the following files</span>\n<span class=\"token comment\"># This imports the 'add' function</span>\n<span class=\"token comment\"># And now it's also re-exported in here as well</span>\n<span class=\"token comment\"># from .addition import add</span>\n<span class=\"token comment\"># These import and re-export the rest of the functions from the submodule</span>\n<span class=\"token comment\"># from .subtraction import subtract</span>\n<span class=\"token comment\"># from .division import divide</span>\n<span class=\"token comment\"># from .multiplication import multiply</span>\n<span class=\"token comment\"># So if we have a script.py and want to import add, we could do it many ways</span>\n<span class=\"token comment\"># This will load and execute the 'math/__init__.py' file and give</span>\n<span class=\"token comment\"># us an object with the exported names in 'math/__init__.py'</span>\n<span class=\"token keyword\">import</span> math\n<span class=\"token comment\"># print(math.add(1,2))</span>\n<span class=\"token comment\"># This imports JUST the add from 'math/__init__.py'</span>\n<span class=\"token comment\"># from math import add</span>\n<span class=\"token comment\"># print(add(1, 2))</span>\n<span class=\"token comment\"># This skips importing from 'math/__init__.py' (although it still runs)</span>\n<span class=\"token comment\"># and imports directly from the addition.py file</span>\n<span class=\"token comment\"># from math.addition import add</span>\n<span class=\"token comment\"># This imports all the functions individually from 'math/__init__.py'</span>\n<span class=\"token comment\"># from math import add, subtract, multiply, divide</span>\n<span class=\"token comment\"># print(add(1, 2))</span>\n<span class=\"token comment\"># print(subtract(2, 1))</span>\n<span class=\"token comment\"># This imports 'add' renames it to 'add_some_numbers'</span>\n<span class=\"token comment\"># from math import add as add_some_numbers</span>\n<span class=\"token comment\"># --------------------------------------- DAY 3 ---------------------------------------</span>\n<span class=\"token comment\"># Classes, Methods, and Properties</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AngryBird</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Slots optimize property access and memory usage and prevent you</span>\n    <span class=\"token comment\"># from arbitrarily assigning new properties the instance</span>\n    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"_x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_y\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Constructor</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Doc String</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"</span>\n        <span class=\"token comment\">## Instance Variables</span>\n        self<span class=\"token punctuation\">.</span>_x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">=</span> y\n    <span class=\"token comment\"># Instance Method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move_up_by</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">+=</span> delta\n    <span class=\"token comment\"># Getter</span>\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_x\n    <span class=\"token comment\"># Setter</span>\n    <span class=\"token decorator annotation punctuation\">@x<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_x <span class=\"token operator\">=</span> value\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_y\n    <span class=\"token decorator annotation punctuation\">@y<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">=</span> value\n    <span class=\"token comment\"># Dunder Repr... called by 'print'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&lt;AngryBird (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>_x<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>_y<span class=\"token punctuation\">}</span></span><span class=\"token string\">)>\"</span></span>\n\n<span class=\"token comment\"># JS to Python Classes cheat table</span>\n<span class=\"token comment\">#        JS                    Python</span>\n<span class=\"token comment\">#   constructor()         def __init__(self):</span>\n<span class=\"token comment\">#      super()            super().__init__()</span>\n<span class=\"token comment\">#   this.property           self.property</span>\n<span class=\"token comment\">#    this.method            self.method()</span>\n<span class=\"token comment\"># method(arg1, arg2){}    def method(self, arg1, ...)</span>\n<span class=\"token comment\"># get someProperty(){}    @property</span>\n<span class=\"token comment\"># set someProperty(){}    @someProperty.setter</span>\n<span class=\"token comment\"># List Comprehensions are a way to transform a list from one format to another</span>\n<span class=\"token comment\">#  - Pythonic Alternative to using map or filter</span>\n<span class=\"token comment\">#  - Syntax of a list comprehension</span>\n<span class=\"token comment\">#     - new_list = [value loop condition]</span>\n<span class=\"token comment\"># Using a for loop</span>\nsquares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    squares<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># value = i ** 2</span>\n<span class=\"token comment\"># loop = for i in range(10)</span>\nsquares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"the rocket came back from mars\"</span>\nvowels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>character <span class=\"token keyword\">for</span> character <span class=\"token keyword\">in</span> sentence <span class=\"token keyword\">if</span> character <span class=\"token keyword\">in</span> <span class=\"token string\">\"aeiou\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>vowels<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can also use them on dictionaries. We can use the items() method</span>\n<span class=\"token comment\"># for the dictionary to loop through it getting the keys and values out at once</span>\nperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Corina\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.4</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># This loops through and capitalizes the first letter of all keys</span>\nnewPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> value <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>"}