{"expireTime":9007200911206582000,"key":"transformer-remark-markdown-html-ast-3ad90d16c9a31eafab569bebe7e827e7-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":4,"offset":5}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"description: Review","position":{"start":{"line":5,"column":4,"offset":10},"end":{"line":5,"column":23,"offset":29}}}],"position":{"start":{"line":5,"column":1,"offset":7},"end":{"line":5,"column":23,"offset":29}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Review-Of-Previous-Concepts","position":{"start":{"line":7,"column":3,"offset":33},"end":{"line":7,"column":30,"offset":60}}}],"position":{"start":{"line":7,"column":1,"offset":31},"end":{"line":7,"column":30,"offset":60}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Review of Concepts","position":{"start":{"line":9,"column":5,"offset":66},"end":{"line":9,"column":23,"offset":84}}}],"position":{"start":{"line":9,"column":1,"offset":62},"end":{"line":9,"column":23,"offset":84}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Running JS Locally Concepts","position":{"start":{"line":11,"column":5,"offset":90},"end":{"line":11,"column":32,"offset":117}}}],"position":{"start":{"line":11,"column":1,"offset":86},"end":{"line":11,"column":32,"offset":117}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Match the commands ","position":{"start":{"line":13,"column":3,"offset":121},"end":{"line":13,"column":22,"offset":140}}},{"type":"raw","value":"<code class=\"language-text\">ls</code>","position":{"start":{"line":13,"column":22,"offset":140},"end":{"line":13,"column":26,"offset":144}}},{"type":"text","value":", ","position":{"start":{"line":13,"column":26,"offset":144},"end":{"line":13,"column":28,"offset":146}}},{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":13,"column":28,"offset":146},"end":{"line":13,"column":32,"offset":150}}},{"type":"text","value":", ","position":{"start":{"line":13,"column":32,"offset":150},"end":{"line":13,"column":34,"offset":152}}},{"type":"raw","value":"<code class=\"language-text\">pwd</code>","position":{"start":{"line":13,"column":34,"offset":152},"end":{"line":13,"column":39,"offset":157}}},{"type":"text","value":" to their descriptions","position":{"start":{"line":13,"column":39,"offset":157},"end":{"line":13,"column":61,"offset":179}}}],"position":{"start":{"line":13,"column":3,"offset":121},"end":{"line":13,"column":61,"offset":179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ls</code>","position":{"start":{"line":14,"column":7,"offset":186},"end":{"line":14,"column":11,"offset":190}}},{"type":"text","value":" lists contents of current directory","position":{"start":{"line":14,"column":11,"offset":190},"end":{"line":14,"column":47,"offset":226}}}],"position":{"start":{"line":14,"column":5,"offset":184},"end":{"line":14,"column":47,"offset":226}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":15,"column":7,"offset":233},"end":{"line":15,"column":11,"offset":237}}},{"type":"text","value":" changes current directory","position":{"start":{"line":15,"column":11,"offset":237},"end":{"line":15,"column":37,"offset":263}}}],"position":{"start":{"line":15,"column":7,"offset":233},"end":{"line":15,"column":37,"offset":263}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd ..</code>","position":{"start":{"line":16,"column":11,"offset":274},"end":{"line":16,"column":18,"offset":281}}},{"type":"text","value":" takes you up one level","position":{"start":{"line":16,"column":18,"offset":281},"end":{"line":16,"column":41,"offset":304}}}],"position":{"start":{"line":16,"column":9,"offset":272},"end":{"line":16,"column":41,"offset":304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":17,"column":11,"offset":315},"end":{"line":17,"column":15,"offset":319}}},{"type":"text","value":" alone takes you back home","position":{"start":{"line":17,"column":15,"offset":319},"end":{"line":17,"column":41,"offset":345}}}],"position":{"start":{"line":17,"column":9,"offset":313},"end":{"line":17,"column":41,"offset":345}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":9,"offset":272},"end":{"line":17,"column":41,"offset":345}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":5,"offset":231},"end":{"line":17,"column":41,"offset":345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">pwd</code>","position":{"start":{"line":18,"column":7,"offset":352},"end":{"line":18,"column":12,"offset":357}}},{"type":"text","value":" returns current directory","position":{"start":{"line":18,"column":12,"offset":357},"end":{"line":18,"column":38,"offset":383}}}],"position":{"start":{"line":18,"column":5,"offset":350},"end":{"line":18,"column":38,"offset":383}}},{"type":"text","value":"\n"}],"position":{"start":{"line":14,"column":5,"offset":184},"end":{"line":18,"column":38,"offset":383}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":119},"end":{"line":18,"column":38,"offset":383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Given a folder structure diagram, a list of 'cd ","position":{"start":{"line":19,"column":3,"offset":386},"end":{"line":19,"column":51,"offset":434}}},{"type":"text","value":"(","position":{"start":{"line":19,"column":51,"offset":434},"end":{"line":19,"column":53,"offset":436}}},{"type":"text","value":"path","position":{"start":{"line":19,"column":53,"offset":436},"end":{"line":19,"column":57,"offset":440}}},{"type":"text","value":")","position":{"start":{"line":19,"column":57,"offset":440},"end":{"line":19,"column":59,"offset":442}}},{"type":"text","value":"' commands and target files, match the paths to the target files.","position":{"start":{"line":19,"column":59,"offset":442},"end":{"line":19,"column":124,"offset":507}}}],"position":{"start":{"line":19,"column":1,"offset":384},"end":{"line":19,"column":124,"offset":507}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use VSCode to create a folder. Within the folder create a .js file containing ","position":{"start":{"line":20,"column":3,"offset":510},"end":{"line":20,"column":81,"offset":588}}},{"type":"raw","value":"<code class=\"language-text\">console.log('hello new world');</code>","position":{"start":{"line":20,"column":81,"offset":588},"end":{"line":20,"column":114,"offset":621}}},{"type":"text","value":" and save it.","position":{"start":{"line":20,"column":114,"offset":621},"end":{"line":20,"column":127,"offset":634}}}],"position":{"start":{"line":20,"column":1,"offset":508},"end":{"line":20,"column":127,"offset":634}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use node to execute a JavaScript file in the terminal","position":{"start":{"line":21,"column":3,"offset":637},"end":{"line":21,"column":56,"offset":690}}}],"position":{"start":{"line":21,"column":1,"offset":635},"end":{"line":21,"column":56,"offset":690}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":119},"end":{"line":21,"column":56,"offset":690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Plain Old JS Object Lesson Concepts","position":{"start":{"line":23,"column":5,"offset":696},"end":{"line":23,"column":40,"offset":731}}}],"position":{"start":{"line":23,"column":1,"offset":692},"end":{"line":23,"column":40,"offset":731}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Label variables as either Primitive vs. Reference","position":{"start":{"line":25,"column":3,"offset":735},"end":{"line":25,"column":52,"offset":784}}}],"position":{"start":{"line":25,"column":3,"offset":735},"end":{"line":25,"column":52,"offset":784}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"primitives: strings, booleans, numbers, null and undefined","position":{"start":{"line":26,"column":7,"offset":791},"end":{"line":26,"column":65,"offset":849}}}],"position":{"start":{"line":26,"column":7,"offset":791},"end":{"line":26,"column":65,"offset":849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"primitives are immutable","position":{"start":{"line":27,"column":11,"offset":860},"end":{"line":27,"column":35,"offset":884}}}],"position":{"start":{"line":27,"column":9,"offset":858},"end":{"line":27,"column":35,"offset":884}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":9,"offset":858},"end":{"line":27,"column":35,"offset":884}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":5,"offset":789},"end":{"line":27,"column":35,"offset":884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"refereces: objects ","position":{"start":{"line":28,"column":7,"offset":891},"end":{"line":28,"column":26,"offset":910}}},{"type":"text","value":"(","position":{"start":{"line":28,"column":26,"offset":910},"end":{"line":28,"column":28,"offset":912}}},{"type":"text","value":"including arrays","position":{"start":{"line":28,"column":28,"offset":912},"end":{"line":28,"column":44,"offset":928}}},{"type":"text","value":")","position":{"start":{"line":28,"column":44,"offset":928},"end":{"line":28,"column":46,"offset":930}}}],"position":{"start":{"line":28,"column":7,"offset":891},"end":{"line":28,"column":46,"offset":930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"references are mutable","position":{"start":{"line":29,"column":11,"offset":941},"end":{"line":29,"column":33,"offset":963}}}],"position":{"start":{"line":29,"column":9,"offset":939},"end":{"line":29,"column":33,"offset":963}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":9,"offset":939},"end":{"line":29,"column":33,"offset":963}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":5,"offset":889},"end":{"line":29,"column":33,"offset":963}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":5,"offset":789},"end":{"line":29,"column":33,"offset":963}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":733},"end":{"line":29,"column":33,"offset":963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identify when to use ","position":{"start":{"line":30,"column":3,"offset":966},"end":{"line":30,"column":24,"offset":987}}},{"type":"raw","value":"<code class=\"language-text\">.</code>","position":{"start":{"line":30,"column":24,"offset":987},"end":{"line":30,"column":27,"offset":990}}},{"type":"text","value":" vs ","position":{"start":{"line":30,"column":27,"offset":990},"end":{"line":30,"column":31,"offset":994}}},{"type":"raw","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":30,"column":31,"offset":994},"end":{"line":30,"column":35,"offset":998}}},{"type":"text","value":" when accessing values of an object","position":{"start":{"line":30,"column":35,"offset":998},"end":{"line":30,"column":70,"offset":1033}}}],"position":{"start":{"line":30,"column":3,"offset":966},"end":{"line":30,"column":70,"offset":1033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dot syntax ","position":{"start":{"line":31,"column":7,"offset":1040},"end":{"line":31,"column":18,"offset":1051}}},{"type":"raw","value":"<code class=\"language-text\">object.key</code>","position":{"start":{"line":31,"column":18,"offset":1051},"end":{"line":31,"column":30,"offset":1063}}}],"position":{"start":{"line":31,"column":7,"offset":1040},"end":{"line":31,"column":30,"offset":1063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"easier to read","position":{"start":{"line":32,"column":11,"offset":1074},"end":{"line":32,"column":25,"offset":1088}}}],"position":{"start":{"line":32,"column":9,"offset":1072},"end":{"line":32,"column":25,"offset":1088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"easier to write","position":{"start":{"line":33,"column":11,"offset":1099},"end":{"line":33,"column":26,"offset":1114}}}],"position":{"start":{"line":33,"column":9,"offset":1097},"end":{"line":33,"column":26,"offset":1114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"cannot use variables as keys","position":{"start":{"line":34,"column":11,"offset":1125},"end":{"line":34,"column":39,"offset":1153}}}],"position":{"start":{"line":34,"column":9,"offset":1123},"end":{"line":34,"column":39,"offset":1153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"keys cannot begin with a number","position":{"start":{"line":35,"column":11,"offset":1164},"end":{"line":35,"column":42,"offset":1195}}}],"position":{"start":{"line":35,"column":9,"offset":1162},"end":{"line":35,"column":42,"offset":1195}}},{"type":"text","value":"\n"}],"position":{"start":{"line":32,"column":9,"offset":1072},"end":{"line":35,"column":42,"offset":1195}}},{"type":"text","value":"\n"}],"position":{"start":{"line":31,"column":5,"offset":1038},"end":{"line":35,"column":42,"offset":1195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"bracket notation ","position":{"start":{"line":36,"column":7,"offset":1202},"end":{"line":36,"column":24,"offset":1219}}},{"type":"raw","value":"<code class=\"language-text\">object[\"key]</code>","position":{"start":{"line":36,"column":24,"offset":1219},"end":{"line":36,"column":38,"offset":1233}}}],"position":{"start":{"line":36,"column":7,"offset":1202},"end":{"line":36,"column":38,"offset":1233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"allows variables as keys","position":{"start":{"line":37,"column":11,"offset":1244},"end":{"line":37,"column":35,"offset":1268}}}],"position":{"start":{"line":37,"column":9,"offset":1242},"end":{"line":37,"column":35,"offset":1268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"strings that start with numbers can be use as keys","position":{"start":{"line":38,"column":11,"offset":1279},"end":{"line":38,"column":61,"offset":1329}}}],"position":{"start":{"line":38,"column":9,"offset":1277},"end":{"line":38,"column":61,"offset":1329}}},{"type":"text","value":"\n"}],"position":{"start":{"line":37,"column":9,"offset":1242},"end":{"line":38,"column":61,"offset":1329}}},{"type":"text","value":"\n"}],"position":{"start":{"line":36,"column":5,"offset":1200},"end":{"line":38,"column":61,"offset":1329}}},{"type":"text","value":"\n"}],"position":{"start":{"line":31,"column":5,"offset":1038},"end":{"line":38,"column":61,"offset":1329}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":964},"end":{"line":38,"column":61,"offset":1329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Write an object literal with a variable key using interpolation","position":{"start":{"line":39,"column":3,"offset":1332},"end":{"line":39,"column":66,"offset":1395}}}],"position":{"start":{"line":39,"column":3,"offset":1332},"end":{"line":39,"column":66,"offset":1395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"put it in brackets to access the value of the variable, rather than just make the value that string","position":{"start":{"line":41,"column":7,"offset":1403},"end":{"line":41,"column":106,"offset":1502}}}],"position":{"start":{"line":41,"column":5,"offset":1401},"end":{"line":41,"column":106,"offset":1502}}},{"type":"text","value":"\n"}],"position":{"start":{"line":41,"column":5,"offset":1401},"end":{"line":41,"column":106,"offset":1502}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'letter_a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'letter b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":43,"column":3,"offset":1506},"end":{"line":47,"column":6,"offset":1595}}},{"type":"text","value":"\n"}],"position":{"start":{"line":39,"column":1,"offset":1330},"end":{"line":48,"column":1,"offset":1596}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":49,"column":3,"offset":1599},"end":{"line":49,"column":11,"offset":1607}}},{"type":"raw","value":"<code class=\"language-text\">obj[key] !== undefined</code>","position":{"start":{"line":49,"column":11,"offset":1607},"end":{"line":49,"column":35,"offset":1631}}},{"type":"text","value":" pattern to check if a given variable that contains a key exists in an object","position":{"start":{"line":49,"column":35,"offset":1631},"end":{"line":49,"column":112,"offset":1708}}}],"position":{"start":{"line":49,"column":1,"offset":1597},"end":{"line":49,"column":112,"offset":1708}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"can also use ","position":{"start":{"line":50,"column":5,"offset":1713},"end":{"line":50,"column":18,"offset":1726}}},{"type":"raw","value":"<code class=\"language-text\">(key in object)</code>","position":{"start":{"line":50,"column":18,"offset":1726},"end":{"line":50,"column":35,"offset":1743}}},{"type":"text","value":" syntax interchangeably ","position":{"start":{"line":50,"column":35,"offset":1743},"end":{"line":50,"column":59,"offset":1767}}},{"type":"text","value":"(","position":{"start":{"line":50,"column":59,"offset":1767},"end":{"line":50,"column":61,"offset":1769}}},{"type":"text","value":"returns a boolean","position":{"start":{"line":50,"column":61,"offset":1769},"end":{"line":50,"column":78,"offset":1786}}},{"type":"text","value":")","position":{"start":{"line":50,"column":78,"offset":1786},"end":{"line":50,"column":80,"offset":1788}}}],"position":{"start":{"line":50,"column":3,"offset":1711},"end":{"line":50,"column":80,"offset":1788}}},{"type":"text","value":"\n"}],"position":{"start":{"line":50,"column":3,"offset":1711},"end":{"line":50,"column":80,"offset":1788}}},{"type":"text","value":"\n"}],"position":{"start":{"line":50,"column":1,"offset":1709},"end":{"line":50,"column":80,"offset":1788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Utilize Object.keys and Object.values in a function","position":{"start":{"line":51,"column":3,"offset":1791},"end":{"line":51,"column":54,"offset":1842}}}],"position":{"start":{"line":51,"column":3,"offset":1791},"end":{"line":51,"column":54,"offset":1842}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Object.keys(obj)</code>","position":{"start":{"line":52,"column":7,"offset":1849},"end":{"line":52,"column":25,"offset":1867}}},{"type":"text","value":" returns an array of all the keys in ","position":{"start":{"line":52,"column":25,"offset":1867},"end":{"line":52,"column":62,"offset":1904}}},{"type":"raw","value":"<code class=\"language-text\">obj</code>","position":{"start":{"line":52,"column":62,"offset":1904},"end":{"line":52,"column":67,"offset":1909}}}],"position":{"start":{"line":52,"column":5,"offset":1847},"end":{"line":52,"column":67,"offset":1909}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Object.values(obj)</code>","position":{"start":{"line":53,"column":7,"offset":1916},"end":{"line":53,"column":27,"offset":1936}}},{"type":"text","value":" returns an array of the values in ","position":{"start":{"line":53,"column":27,"offset":1936},"end":{"line":53,"column":62,"offset":1971}}},{"type":"raw","value":"<code class=\"language-text\">obj</code>","position":{"start":{"line":53,"column":62,"offset":1971},"end":{"line":53,"column":67,"offset":1976}}}],"position":{"start":{"line":53,"column":5,"offset":1914},"end":{"line":53,"column":67,"offset":1976}}},{"type":"text","value":"\n"}],"position":{"start":{"line":52,"column":5,"offset":1847},"end":{"line":53,"column":67,"offset":1976}}},{"type":"text","value":"\n"}],"position":{"start":{"line":51,"column":1,"offset":1789},"end":{"line":53,"column":67,"offset":1976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Iterate through an object using a ","position":{"start":{"line":54,"column":3,"offset":1979},"end":{"line":54,"column":37,"offset":2013}}},{"type":"raw","value":"<code class=\"language-text\">for in</code>","position":{"start":{"line":54,"column":37,"offset":2013},"end":{"line":54,"column":45,"offset":2021}}},{"type":"text","value":" loop","position":{"start":{"line":54,"column":45,"offset":2021},"end":{"line":54,"column":50,"offset":2026}}}],"position":{"start":{"line":54,"column":1,"offset":1977},"end":{"line":54,"column":50,"offset":2026}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":733},"end":{"line":54,"column":50,"offset":2026}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">printValues</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":56,"column":1,"offset":2028},"end":{"line":64,"column":5,"offset":2195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a function that utilizes ","position":{"start":{"line":66,"column":3,"offset":2199},"end":{"line":66,"column":35,"offset":2231}}},{"type":"raw","value":"<code class=\"language-text\">...rest</code>","position":{"start":{"line":66,"column":35,"offset":2231},"end":{"line":66,"column":44,"offset":2240}}},{"type":"text","value":" syntax to accept an arbitrary number of arguments","position":{"start":{"line":66,"column":44,"offset":2240},"end":{"line":66,"column":94,"offset":2290}}}],"position":{"start":{"line":66,"column":3,"offset":2199},"end":{"line":66,"column":94,"offset":2290}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">...rest</code>","position":{"start":{"line":68,"column":7,"offset":2298},"end":{"line":68,"column":16,"offset":2307}}},{"type":"text","value":" syntax will store all additional arguments in an array","position":{"start":{"line":68,"column":16,"offset":2307},"end":{"line":68,"column":71,"offset":2362}}}],"position":{"start":{"line":68,"column":5,"offset":2296},"end":{"line":68,"column":71,"offset":2362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"array will be empty if there are no additional arguments","position":{"start":{"line":69,"column":7,"offset":2369},"end":{"line":69,"column":63,"offset":2425}}}],"position":{"start":{"line":69,"column":5,"offset":2367},"end":{"line":69,"column":63,"offset":2425}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":5,"offset":2296},"end":{"line":69,"column":63,"offset":2425}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The first string is '</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The rest of the strings are:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":71,"column":3,"offset":2429},"end":{"line":80,"column":6,"offset":2709}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":2197},"end":{"line":80,"column":6,"offset":2709}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":2197},"end":{"line":80,"column":6,"offset":2709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":82,"column":1,"offset":2711},"end":{"line":82,"column":4,"offset":2714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use ","position":{"start":{"line":84,"column":3,"offset":2718},"end":{"line":84,"column":7,"offset":2722}}},{"type":"raw","value":"<code class=\"language-text\">...spread</code>","position":{"start":{"line":84,"column":7,"offset":2722},"end":{"line":84,"column":18,"offset":2733}}},{"type":"text","value":" syntax for Object literals and Array literals","position":{"start":{"line":84,"column":18,"offset":2733},"end":{"line":84,"column":64,"offset":2779}}}],"position":{"start":{"line":84,"column":1,"offset":2716},"end":{"line":84,"column":64,"offset":2779}}},{"type":"text","value":"\n"}],"position":{"start":{"line":84,"column":1,"offset":2716},"end":{"line":84,"column":64,"offset":2779}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> longer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\"]</span>\n   <span class=\"token comment\">// without spread syntax, this would give you a nested array</span>\n   <span class=\"token keyword\">let</span> withoutRest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[\"a\", \"b\", \"c\"], \"d\", \"e\"]</span></code></pre></div>","position":{"start":{"line":86,"column":1,"offset":2781},"end":{"line":92,"column":5,"offset":3030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Destructure an array to reference specific elements","position":{"start":{"line":94,"column":3,"offset":3034},"end":{"line":94,"column":54,"offset":3085}}}],"position":{"start":{"line":94,"column":3,"offset":3034},"end":{"line":94,"column":54,"offset":3085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":96,"column":5,"offset":3091},"end":{"line":96,"column":7,"offset":3093}}},{"type":"text","value":"`","position":{"start":{"line":96,"column":7,"offset":3093},"end":{"line":96,"column":9,"offset":3095}}},{"type":"text","value":"`","position":{"start":{"line":96,"column":9,"offset":3095},"end":{"line":96,"column":11,"offset":3097}}},{"type":"text","value":"javascript","position":{"start":{"line":96,"column":11,"offset":3097},"end":{"line":96,"column":21,"offset":3107}}}],"position":{"start":{"line":96,"column":5,"offset":3091},"end":{"line":96,"column":21,"offset":3107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let array = ","position":{"start":{"line":98,"column":5,"offset":3113},"end":{"line":98,"column":17,"offset":3125}}},{"type":"text","value":"[","position":{"start":{"line":98,"column":17,"offset":3125},"end":{"line":98,"column":19,"offset":3127}}},{"type":"text","value":"35,9","position":{"start":{"line":98,"column":19,"offset":3127},"end":{"line":98,"column":23,"offset":3131}}},{"type":"text","value":"]","position":{"start":{"line":98,"column":23,"offset":3131},"end":{"line":98,"column":25,"offset":3133}}},{"type":"text","value":";","position":{"start":{"line":98,"column":25,"offset":3133},"end":{"line":98,"column":26,"offset":3134}}}],"position":{"start":{"line":98,"column":5,"offset":3113},"end":{"line":98,"column":26,"offset":3134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let ","position":{"start":{"line":100,"column":5,"offset":3140},"end":{"line":100,"column":9,"offset":3144}}},{"type":"text","value":"[","position":{"start":{"line":100,"column":9,"offset":3144},"end":{"line":100,"column":11,"offset":3146}}},{"type":"text","value":"firstEl, secondEl","position":{"start":{"line":100,"column":11,"offset":3146},"end":{"line":100,"column":28,"offset":3163}}},{"type":"text","value":"]","position":{"start":{"line":100,"column":28,"offset":3163},"end":{"line":100,"column":30,"offset":3165}}},{"type":"text","value":" = array;","position":{"start":{"line":100,"column":30,"offset":3165},"end":{"line":100,"column":39,"offset":3174}}}],"position":{"start":{"line":100,"column":5,"offset":3140},"end":{"line":100,"column":39,"offset":3174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":102,"column":5,"offset":3180},"end":{"line":102,"column":16,"offset":3191}}},{"type":"text","value":"(","position":{"start":{"line":102,"column":16,"offset":3191},"end":{"line":102,"column":18,"offset":3193}}},{"type":"text","value":"firstEl","position":{"start":{"line":102,"column":18,"offset":3193},"end":{"line":102,"column":25,"offset":3200}}},{"type":"text","value":")","position":{"start":{"line":102,"column":25,"offset":3200},"end":{"line":102,"column":27,"offset":3202}}},{"type":"text","value":"; // =","position":{"start":{"line":102,"column":27,"offset":3202},"end":{"line":102,"column":33,"offset":3208}}},{"type":"text","value":">","position":{"start":{"line":102,"column":33,"offset":3208},"end":{"line":102,"column":37,"offset":3212}}},{"type":"text","value":" 35","position":{"start":{"line":102,"column":37,"offset":3212},"end":{"line":102,"column":40,"offset":3215}}}],"position":{"start":{"line":102,"column":5,"offset":3180},"end":{"line":102,"column":40,"offset":3215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":104,"column":5,"offset":3221},"end":{"line":104,"column":16,"offset":3232}}},{"type":"text","value":"(","position":{"start":{"line":104,"column":16,"offset":3232},"end":{"line":104,"column":18,"offset":3234}}},{"type":"text","value":"secondEl","position":{"start":{"line":104,"column":18,"offset":3234},"end":{"line":104,"column":26,"offset":3242}}},{"type":"text","value":")","position":{"start":{"line":104,"column":26,"offset":3242},"end":{"line":104,"column":28,"offset":3244}}},{"type":"text","value":"; // =","position":{"start":{"line":104,"column":28,"offset":3244},"end":{"line":104,"column":34,"offset":3250}}},{"type":"text","value":">","position":{"start":{"line":104,"column":34,"offset":3250},"end":{"line":104,"column":38,"offset":3254}}},{"type":"text","value":" 9","position":{"start":{"line":104,"column":38,"offset":3254},"end":{"line":104,"column":40,"offset":3256}}}],"position":{"start":{"line":104,"column":5,"offset":3221},"end":{"line":104,"column":40,"offset":3256}}},{"type":"text","value":"\n"}],"position":{"start":{"line":94,"column":1,"offset":3032},"end":{"line":104,"column":40,"offset":3256}}},{"type":"text","value":"\n"}],"position":{"start":{"line":94,"column":1,"offset":3032},"end":{"line":104,"column":40,"offset":3256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// can also destructure using ... syntax let array = ","position":{"start":{"line":106,"column":1,"offset":3258},"end":{"line":106,"column":54,"offset":3311}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":54,"offset":3311},"end":{"line":106,"column":56,"offset":3313}}},{"type":"text","value":"35,9,14","position":{"start":{"line":106,"column":56,"offset":3313},"end":{"line":106,"column":63,"offset":3320}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":63,"offset":3320},"end":{"line":106,"column":65,"offset":3322}}},{"type":"text","value":"; let ","position":{"start":{"line":106,"column":65,"offset":3322},"end":{"line":106,"column":71,"offset":3328}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":71,"offset":3328},"end":{"line":106,"column":73,"offset":3330}}},{"type":"text","value":"head, ...tail","position":{"start":{"line":106,"column":73,"offset":3330},"end":{"line":106,"column":86,"offset":3343}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":86,"offset":3343},"end":{"line":106,"column":88,"offset":3345}}},{"type":"text","value":" = array; console.log","position":{"start":{"line":106,"column":88,"offset":3345},"end":{"line":106,"column":109,"offset":3366}}},{"type":"text","value":"(","position":{"start":{"line":106,"column":109,"offset":3366},"end":{"line":106,"column":111,"offset":3368}}},{"type":"text","value":"head","position":{"start":{"line":106,"column":111,"offset":3368},"end":{"line":106,"column":115,"offset":3372}}},{"type":"text","value":")","position":{"start":{"line":106,"column":115,"offset":3372},"end":{"line":106,"column":117,"offset":3374}}},{"type":"text","value":"; // =","position":{"start":{"line":106,"column":117,"offset":3374},"end":{"line":106,"column":123,"offset":3380}}},{"type":"text","value":">","position":{"start":{"line":106,"column":123,"offset":3380},"end":{"line":106,"column":127,"offset":3384}}},{"type":"text","value":" 35 console.log","position":{"start":{"line":106,"column":127,"offset":3384},"end":{"line":106,"column":142,"offset":3399}}},{"type":"text","value":"(","position":{"start":{"line":106,"column":142,"offset":3399},"end":{"line":106,"column":144,"offset":3401}}},{"type":"text","value":"tail","position":{"start":{"line":106,"column":144,"offset":3401},"end":{"line":106,"column":148,"offset":3405}}},{"type":"text","value":")","position":{"start":{"line":106,"column":148,"offset":3405},"end":{"line":106,"column":150,"offset":3407}}},{"type":"text","value":"; // =","position":{"start":{"line":106,"column":150,"offset":3407},"end":{"line":106,"column":156,"offset":3413}}},{"type":"text","value":">","position":{"start":{"line":106,"column":156,"offset":3413},"end":{"line":106,"column":160,"offset":3417}}},{"type":"text","value":" ","position":{"start":{"line":106,"column":160,"offset":3417},"end":{"line":106,"column":161,"offset":3418}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":161,"offset":3418},"end":{"line":106,"column":163,"offset":3420}}},{"type":"text","value":"9, 14","position":{"start":{"line":106,"column":163,"offset":3420},"end":{"line":106,"column":168,"offset":3425}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":168,"offset":3425},"end":{"line":106,"column":170,"offset":3427}}}],"position":{"start":{"line":106,"column":1,"offset":3258},"end":{"line":106,"column":170,"offset":3427}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Destructure an object to reference specific values\n   <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you want to use variable names that don't match the keys<span class=\"token punctuation\">,</span> you can use aliasing\n      <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">let { oldkeyname: newkeyname } = object</span><span class=\"token template-punctuation string\">`</span></span>\n   <span class=\"token operator\">-</span> rule <span class=\"token keyword\">of</span> thumb—only destructure values from objects that are two levels deep\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wilfred\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">appearance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"short\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mustache\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">favorites</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mauve\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">food</span><span class=\"token operator\">:</span> <span class=\"token string\">\"spaghetti squash\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// with variable names that match keys</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> appearance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Wilfred\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>appearance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"short\", \"mustache\"]</span>\n\n<span class=\"token comment\">// with new variable names (aliasing)</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> myName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">appearance</span><span class=\"token operator\">:</span> myAppearance<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Wilfred\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myAppearance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"short\", \"mustache\"]</span>\n\n<span class=\"token comment\">// in a function call</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello Wilfred\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// nested objects + aliasing</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">favorites</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">food</span><span class=\"token operator\">:</span> vegetable<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> vegetable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> mauve spaghetti squash</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":3429},"end":{"line":144,"column":4,"offset":4464}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function that accepts a array as an argument and returns an object representing the count of each character in the array","position":{"start":{"line":146,"column":3,"offset":4468},"end":{"line":146,"column":131,"offset":4596}}}],"position":{"start":{"line":146,"column":1,"offset":4466},"end":{"line":146,"column":131,"offset":4596}}},{"type":"text","value":"\n"}],"position":{"start":{"line":146,"column":1,"offset":4466},"end":{"line":146,"column":131,"offset":4596}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">elementCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span> obj<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">elementCounts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => Object {e: 1, f: 2, g: 1}</span></code></pre></div>","position":{"start":{"line":148,"column":1,"offset":4598},"end":{"line":160,"column":5,"offset":4918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Callbacks Lesson Concepts","position":{"start":{"line":162,"column":5,"offset":4924},"end":{"line":162,"column":30,"offset":4949}}}],"position":{"start":{"line":162,"column":1,"offset":4920},"end":{"line":162,"column":30,"offset":4949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.","position":{"start":{"line":164,"column":3,"offset":4953},"end":{"line":164,"column":107,"offset":5057}}}],"position":{"start":{"line":164,"column":3,"offset":4953},"end":{"line":164,"column":107,"offset":5057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"they can be stored in variables, passed as arguments to other functions, and serve as return value for a function","position":{"start":{"line":165,"column":7,"offset":5064},"end":{"line":165,"column":120,"offset":5177}}}],"position":{"start":{"line":165,"column":5,"offset":5062},"end":{"line":165,"column":120,"offset":5177}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"supports same basic operations as other types ","position":{"start":{"line":166,"column":7,"offset":5184},"end":{"line":166,"column":53,"offset":5230}}},{"type":"text","value":"(","position":{"start":{"line":166,"column":53,"offset":5230},"end":{"line":166,"column":55,"offset":5232}}},{"type":"text","value":"strings, bools, numbers","position":{"start":{"line":166,"column":55,"offset":5232},"end":{"line":166,"column":78,"offset":5255}}},{"type":"text","value":")","position":{"start":{"line":166,"column":78,"offset":5255},"end":{"line":166,"column":80,"offset":5257}}}],"position":{"start":{"line":166,"column":5,"offset":5182},"end":{"line":166,"column":80,"offset":5257}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"higher-order functions take functions as arguments or return functions as values","position":{"start":{"line":167,"column":7,"offset":5264},"end":{"line":167,"column":87,"offset":5344}}}],"position":{"start":{"line":167,"column":5,"offset":5262},"end":{"line":167,"column":87,"offset":5344}}},{"type":"text","value":"\n"}],"position":{"start":{"line":165,"column":5,"offset":5062},"end":{"line":167,"column":87,"offset":5344}}},{"type":"text","value":"\n"}],"position":{"start":{"line":164,"column":1,"offset":4951},"end":{"line":167,"column":87,"offset":5344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Given a code snippet containing an anonymous callback, a named callback, and multiple ","position":{"start":{"line":168,"column":3,"offset":5347},"end":{"line":168,"column":89,"offset":5433}}},{"type":"raw","value":"<code class=\"language-text\">console.log</code>","position":{"start":{"line":168,"column":89,"offset":5433},"end":{"line":168,"column":102,"offset":5446}}},{"type":"text","value":"s, predict what will be printed","position":{"start":{"line":168,"column":102,"offset":5446},"end":{"line":168,"column":133,"offset":5477}}}],"position":{"start":{"line":168,"column":1,"offset":5345},"end":{"line":168,"column":133,"offset":5477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"what is this referring to?","position":{"start":{"line":169,"column":5,"offset":5482},"end":{"line":169,"column":31,"offset":5508}}}],"position":{"start":{"line":169,"column":3,"offset":5480},"end":{"line":169,"column":31,"offset":5508}}},{"type":"text","value":"\n"}],"position":{"start":{"line":169,"column":3,"offset":5480},"end":{"line":169,"column":31,"offset":5508}}},{"type":"text","value":"\n"}],"position":{"start":{"line":169,"column":1,"offset":5478},"end":{"line":169,"column":31,"offset":5508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.","position":{"start":{"line":170,"column":3,"offset":5511},"end":{"line":170,"column":131,"offset":5639}}}],"position":{"start":{"line":170,"column":1,"offset":5509},"end":{"line":170,"column":131,"offset":5639}}},{"type":"text","value":"\n"}],"position":{"start":{"line":164,"column":1,"offset":4951},"end":{"line":170,"column":131,"offset":5639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greaterCB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> callback1<span class=\"token punctuation\">,</span> callback2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greaterCB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> callback1<span class=\"token punctuation\">,</span> callback2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":172,"column":1,"offset":5641},"end":{"line":187,"column":4,"offset":5984}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// shorter version let greaterCB = function","position":{"start":{"line":189,"column":1,"offset":5986},"end":{"line":189,"column":44,"offset":6029}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":44,"offset":6029},"end":{"line":189,"column":46,"offset":6031}}},{"type":"text","value":"val, callback1, callback2","position":{"start":{"line":189,"column":46,"offset":6031},"end":{"line":189,"column":71,"offset":6056}}},{"type":"text","value":")","position":{"start":{"line":189,"column":71,"offset":6056},"end":{"line":189,"column":73,"offset":6058}}},{"type":"text","value":" { return Math.max","position":{"start":{"line":189,"column":73,"offset":6058},"end":{"line":189,"column":91,"offset":6076}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":91,"offset":6076},"end":{"line":189,"column":93,"offset":6078}}},{"type":"text","value":"callback1","position":{"start":{"line":189,"column":93,"offset":6078},"end":{"line":189,"column":102,"offset":6087}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":102,"offset":6087},"end":{"line":189,"column":104,"offset":6089}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":104,"offset":6089},"end":{"line":189,"column":107,"offset":6092}}},{"type":"text","value":")","position":{"start":{"line":189,"column":107,"offset":6092},"end":{"line":189,"column":109,"offset":6094}}},{"type":"text","value":", callback2","position":{"start":{"line":189,"column":109,"offset":6094},"end":{"line":189,"column":120,"offset":6105}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":120,"offset":6105},"end":{"line":189,"column":122,"offset":6107}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":122,"offset":6107},"end":{"line":189,"column":125,"offset":6110}}},{"type":"text","value":")","position":{"start":{"line":189,"column":125,"offset":6110},"end":{"line":189,"column":127,"offset":6112}}},{"type":"text","value":")","position":{"start":{"line":189,"column":127,"offset":6112},"end":{"line":189,"column":129,"offset":6114}}},{"type":"text","value":"; } // even shorter, cause why not let greaterCB = ","position":{"start":{"line":189,"column":129,"offset":6114},"end":{"line":189,"column":180,"offset":6165}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":180,"offset":6165},"end":{"line":189,"column":182,"offset":6167}}},{"type":"text","value":"val, cb1, cb2","position":{"start":{"line":189,"column":182,"offset":6167},"end":{"line":189,"column":195,"offset":6180}}},{"type":"text","value":")","position":{"start":{"line":189,"column":195,"offset":6180},"end":{"line":189,"column":197,"offset":6182}}},{"type":"text","value":" =","position":{"start":{"line":189,"column":197,"offset":6182},"end":{"line":189,"column":199,"offset":6184}}},{"type":"text","value":">","position":{"start":{"line":189,"column":199,"offset":6184},"end":{"line":189,"column":203,"offset":6188}}},{"type":"text","value":" Math.max","position":{"start":{"line":189,"column":203,"offset":6188},"end":{"line":189,"column":212,"offset":6197}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":212,"offset":6197},"end":{"line":189,"column":214,"offset":6199}}},{"type":"text","value":"cb1","position":{"start":{"line":189,"column":214,"offset":6199},"end":{"line":189,"column":217,"offset":6202}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":217,"offset":6202},"end":{"line":189,"column":219,"offset":6204}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":219,"offset":6204},"end":{"line":189,"column":222,"offset":6207}}},{"type":"text","value":")","position":{"start":{"line":189,"column":222,"offset":6207},"end":{"line":189,"column":224,"offset":6209}}},{"type":"text","value":", cb2","position":{"start":{"line":189,"column":224,"offset":6209},"end":{"line":189,"column":229,"offset":6214}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":229,"offset":6214},"end":{"line":189,"column":231,"offset":6216}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":231,"offset":6216},"end":{"line":189,"column":234,"offset":6219}}},{"type":"text","value":")","position":{"start":{"line":189,"column":234,"offset":6219},"end":{"line":189,"column":236,"offset":6221}}},{"type":"text","value":")","position":{"start":{"line":189,"column":236,"offset":6221},"end":{"line":189,"column":238,"offset":6223}}},{"type":"text","value":";","position":{"start":{"line":189,"column":238,"offset":6223},"end":{"line":189,"column":239,"offset":6224}}}],"position":{"start":{"line":189,"column":1,"offset":5986},"end":{"line":189,"column":239,"offset":6224}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Write a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> that takes <span class=\"token keyword\">in</span> an array and a callback <span class=\"token keyword\">as</span> arguments<span class=\"token punctuation\">.</span> The <span class=\"token keyword\">function</span> should mimic the behavior <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Array#map</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myMap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mapped <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">myMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [4, 5, 6];</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myMapArrow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myMapArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [4, 5, 6];</span></code></pre></div>","position":{"start":{"line":191,"column":1,"offset":6226},"end":{"line":214,"column":4,"offset":6883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of ","position":{"start":{"line":216,"column":3,"offset":6887},"end":{"line":216,"column":125,"offset":7009}}},{"type":"raw","value":"<code class=\"language-text\">Array#filter</code>","position":{"start":{"line":216,"column":125,"offset":7009},"end":{"line":216,"column":139,"offset":7023}}},{"type":"text","value":".","position":{"start":{"line":216,"column":139,"offset":7023},"end":{"line":216,"column":140,"offset":7024}}}],"position":{"start":{"line":216,"column":1,"offset":6885},"end":{"line":216,"column":140,"offset":7024}}},{"type":"text","value":"\n"}],"position":{"start":{"line":216,"column":1,"offset":6885},"end":{"line":216,"column":140,"offset":7024}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> filtered <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               filtered<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":218,"column":1,"offset":7026},"end":{"line":228,"column":5,"offset":7284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of ","position":{"start":{"line":230,"column":3,"offset":7288},"end":{"line":230,"column":124,"offset":7409}}},{"type":"raw","value":"<code class=\"language-text\">Array#every</code>","position":{"start":{"line":230,"column":124,"offset":7409},"end":{"line":230,"column":137,"offset":7422}}},{"type":"text","value":".","position":{"start":{"line":230,"column":137,"offset":7422},"end":{"line":230,"column":138,"offset":7423}}}],"position":{"start":{"line":230,"column":1,"offset":7286},"end":{"line":230,"column":138,"offset":7423}}},{"type":"text","value":"\n"}],"position":{"start":{"line":230,"column":1,"offset":7286},"end":{"line":230,"column":138,"offset":7423}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myEvery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// with arrow function syntax</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myEvery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":232,"column":1,"offset":7425},"end":{"line":251,"column":5,"offset":7911}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Scope Lesson Concepts","position":{"start":{"line":253,"column":5,"offset":7917},"end":{"line":253,"column":26,"offset":7938}}}],"position":{"start":{"line":253,"column":1,"offset":7913},"end":{"line":253,"column":26,"offset":7938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identify the difference between ","position":{"start":{"line":255,"column":3,"offset":7942},"end":{"line":255,"column":35,"offset":7974}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":255,"column":35,"offset":7974},"end":{"line":255,"column":42,"offset":7981}}},{"type":"text","value":", ","position":{"start":{"line":255,"column":42,"offset":7981},"end":{"line":255,"column":44,"offset":7983}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":255,"column":44,"offset":7983},"end":{"line":255,"column":49,"offset":7988}}},{"type":"text","value":", and ","position":{"start":{"line":255,"column":49,"offset":7988},"end":{"line":255,"column":55,"offset":7994}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":255,"column":55,"offset":7994},"end":{"line":255,"column":60,"offset":7999}}},{"type":"text","value":" declarations","position":{"start":{"line":255,"column":60,"offset":7999},"end":{"line":255,"column":73,"offset":8012}}}],"position":{"start":{"line":255,"column":3,"offset":7942},"end":{"line":255,"column":73,"offset":8012}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":256,"column":7,"offset":8019},"end":{"line":256,"column":14,"offset":8026}}},{"type":"text","value":" - cannot reassign variable, scoped to block","position":{"start":{"line":256,"column":14,"offset":8026},"end":{"line":256,"column":58,"offset":8070}}}],"position":{"start":{"line":256,"column":5,"offset":8017},"end":{"line":256,"column":58,"offset":8070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":257,"column":7,"offset":8077},"end":{"line":257,"column":12,"offset":8082}}},{"type":"text","value":" - can reassign variable, scoped to block","position":{"start":{"line":257,"column":12,"offset":8082},"end":{"line":257,"column":53,"offset":8123}}}],"position":{"start":{"line":257,"column":5,"offset":8075},"end":{"line":257,"column":53,"offset":8123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":258,"column":7,"offset":8130},"end":{"line":258,"column":12,"offset":8135}}},{"type":"text","value":" - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!","position":{"start":{"line":258,"column":12,"offset":8135},"end":{"line":258,"column":123,"offset":8246}}}],"position":{"start":{"line":258,"column":5,"offset":8128},"end":{"line":258,"column":123,"offset":8246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"a variable will always evaluate to the value it contains regardless of how it was declared","position":{"start":{"line":259,"column":7,"offset":8253},"end":{"line":259,"column":97,"offset":8343}}}],"position":{"start":{"line":259,"column":5,"offset":8251},"end":{"line":259,"column":97,"offset":8343}}},{"type":"text","value":"\n"}],"position":{"start":{"line":256,"column":5,"offset":8017},"end":{"line":259,"column":97,"offset":8343}}},{"type":"text","value":"\n"}],"position":{"start":{"line":255,"column":1,"offset":7940},"end":{"line":259,"column":97,"offset":8343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Explain the difference between ","position":{"start":{"line":260,"column":3,"offset":8346},"end":{"line":260,"column":34,"offset":8377}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":260,"column":34,"offset":8377},"end":{"line":260,"column":41,"offset":8384}}},{"type":"text","value":", ","position":{"start":{"line":260,"column":41,"offset":8384},"end":{"line":260,"column":43,"offset":8386}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":260,"column":43,"offset":8386},"end":{"line":260,"column":48,"offset":8391}}},{"type":"text","value":", and ","position":{"start":{"line":260,"column":48,"offset":8391},"end":{"line":260,"column":54,"offset":8397}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":260,"column":54,"offset":8397},"end":{"line":260,"column":59,"offset":8402}}},{"type":"text","value":" declarations","position":{"start":{"line":260,"column":59,"offset":8402},"end":{"line":260,"column":72,"offset":8415}}}],"position":{"start":{"line":260,"column":3,"offset":8346},"end":{"line":260,"column":72,"offset":8415}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":261,"column":7,"offset":8422},"end":{"line":261,"column":12,"offset":8427}}},{"type":"text","value":" is function scoped—so if you declare it anywhere in a function, the declaration ","position":{"start":{"line":261,"column":12,"offset":8427},"end":{"line":261,"column":93,"offset":8508}}},{"type":"text","value":"(","position":{"start":{"line":261,"column":93,"offset":8508},"end":{"line":261,"column":95,"offset":8510}}},{"type":"text","value":"but not assignment","position":{"start":{"line":261,"column":95,"offset":8510},"end":{"line":261,"column":113,"offset":8528}}},{"type":"text","value":")","position":{"start":{"line":261,"column":113,"offset":8528},"end":{"line":261,"column":115,"offset":8530}}},{"type":"text","value":" is \"hoisted\"","position":{"start":{"line":261,"column":115,"offset":8530},"end":{"line":261,"column":128,"offset":8543}}}],"position":{"start":{"line":261,"column":7,"offset":8422},"end":{"line":261,"column":128,"offset":8543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"so it will exist in memory as \"undefined\" which is bad and unpredictable","position":{"start":{"line":262,"column":11,"offset":8554},"end":{"line":262,"column":83,"offset":8626}}}],"position":{"start":{"line":262,"column":9,"offset":8552},"end":{"line":262,"column":83,"offset":8626}}},{"type":"text","value":"\n"}],"position":{"start":{"line":262,"column":9,"offset":8552},"end":{"line":262,"column":83,"offset":8626}}},{"type":"text","value":"\n"}],"position":{"start":{"line":261,"column":5,"offset":8420},"end":{"line":262,"column":83,"offset":8626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":263,"column":7,"offset":8633},"end":{"line":263,"column":12,"offset":8638}}},{"type":"text","value":" will also allow you to redeclare a variable, while ","position":{"start":{"line":263,"column":12,"offset":8638},"end":{"line":263,"column":64,"offset":8690}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":263,"column":64,"offset":8690},"end":{"line":263,"column":69,"offset":8695}}},{"type":"text","value":" or ","position":{"start":{"line":263,"column":69,"offset":8695},"end":{"line":263,"column":73,"offset":8699}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":263,"column":73,"offset":8699},"end":{"line":263,"column":80,"offset":8706}}},{"type":"text","value":" will raise a syntax error. you shouldn't be able to do that!","position":{"start":{"line":263,"column":80,"offset":8706},"end":{"line":263,"column":141,"offset":8767}}}],"position":{"start":{"line":263,"column":5,"offset":8631},"end":{"line":263,"column":141,"offset":8767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":264,"column":7,"offset":8774},"end":{"line":264,"column":14,"offset":8781}}},{"type":"text","value":" won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object","position":{"start":{"line":264,"column":14,"offset":8781},"end":{"line":264,"column":153,"offset":8920}}}],"position":{"start":{"line":264,"column":5,"offset":8772},"end":{"line":264,"column":153,"offset":8920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"block-scoped variables allow new variables with the same name in new scopes","position":{"start":{"line":265,"column":7,"offset":8927},"end":{"line":265,"column":82,"offset":9002}}}],"position":{"start":{"line":265,"column":5,"offset":8925},"end":{"line":265,"column":82,"offset":9002}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of ","position":{"start":{"line":266,"column":7,"offset":9009},"end":{"line":266,"column":121,"offset":9123}}},{"type":"raw","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":266,"column":121,"offset":9123},"end":{"line":266,"column":132,"offset":9134}}},{"type":"text","value":" like ","position":{"start":{"line":266,"column":132,"offset":9134},"end":{"line":266,"column":138,"offset":9140}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":266,"column":138,"offset":9140},"end":{"line":266,"column":143,"offset":9145}}},{"type":"text","value":" does, so it throws a specific reference error if you try to access the value before it has been declared","position":{"start":{"line":266,"column":143,"offset":9145},"end":{"line":266,"column":248,"offset":9250}}}],"position":{"start":{"line":266,"column":5,"offset":9007},"end":{"line":266,"column":248,"offset":9250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"if you do not use ","position":{"start":{"line":267,"column":7,"offset":9257},"end":{"line":267,"column":25,"offset":9275}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":267,"column":25,"offset":9275},"end":{"line":267,"column":30,"offset":9280}}},{"type":"text","value":" or ","position":{"start":{"line":267,"column":30,"offset":9280},"end":{"line":267,"column":34,"offset":9284}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":267,"column":34,"offset":9284},"end":{"line":267,"column":39,"offset":9289}}},{"type":"text","value":" or ","position":{"start":{"line":267,"column":39,"offset":9289},"end":{"line":267,"column":43,"offset":9293}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":267,"column":43,"offset":9293},"end":{"line":267,"column":50,"offset":9300}}},{"type":"text","value":" when initializing, it will be declared as global—THIS IS BAD","position":{"start":{"line":267,"column":50,"offset":9300},"end":{"line":267,"column":111,"offset":9361}}}],"position":{"start":{"line":267,"column":7,"offset":9257},"end":{"line":267,"column":111,"offset":9361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you assign a value without a declaration, it exists in the global scope ","position":{"start":{"line":268,"column":11,"offset":9372},"end":{"line":268,"column":86,"offset":9447}}},{"type":"text","value":"(","position":{"start":{"line":268,"column":86,"offset":9447},"end":{"line":268,"column":88,"offset":9449}}},{"type":"text","value":"so then it would be accessible by all outer scopes, so bad","position":{"start":{"line":268,"column":88,"offset":9449},"end":{"line":268,"column":146,"offset":9507}}},{"type":"text","value":")","position":{"start":{"line":268,"column":146,"offset":9507},"end":{"line":268,"column":148,"offset":9509}}},{"type":"text","value":". however, there's no hoisting, so it doesn't exist in the scope until after the line is run","position":{"start":{"line":268,"column":148,"offset":9509},"end":{"line":268,"column":240,"offset":9601}}}],"position":{"start":{"line":268,"column":9,"offset":9370},"end":{"line":268,"column":240,"offset":9601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":268,"column":9,"offset":9370},"end":{"line":268,"column":240,"offset":9601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":267,"column":5,"offset":9255},"end":{"line":268,"column":240,"offset":9601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":261,"column":5,"offset":8420},"end":{"line":268,"column":240,"offset":9601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":8344},"end":{"line":268,"column":240,"offset":9601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining","position":{"start":{"line":269,"column":3,"offset":9604},"end":{"line":269,"column":110,"offset":9711}}}],"position":{"start":{"line":269,"column":3,"offset":9604},"end":{"line":269,"column":110,"offset":9711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scope of a program means the set of variables that are available for use within the program","position":{"start":{"line":270,"column":7,"offset":9718},"end":{"line":270,"column":98,"offset":9809}}}],"position":{"start":{"line":270,"column":5,"offset":9716},"end":{"line":270,"column":98,"offset":9809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"global scope is represented by the ","position":{"start":{"line":271,"column":7,"offset":9816},"end":{"line":271,"column":42,"offset":9851}}},{"type":"raw","value":"<code class=\"language-text\">window</code>","position":{"start":{"line":271,"column":42,"offset":9851},"end":{"line":271,"column":50,"offset":9859}}},{"type":"text","value":" object in the browser and the ","position":{"start":{"line":271,"column":50,"offset":9859},"end":{"line":271,"column":81,"offset":9890}}},{"type":"raw","value":"<code class=\"language-text\">global</code>","position":{"start":{"line":271,"column":81,"offset":9890},"end":{"line":271,"column":89,"offset":9898}}},{"type":"text","value":" object in Node.js","position":{"start":{"line":271,"column":89,"offset":9898},"end":{"line":271,"column":107,"offset":9916}}}],"position":{"start":{"line":271,"column":7,"offset":9816},"end":{"line":271,"column":107,"offset":9916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"global variables are available everywhere, and so increase the risk of name collisions","position":{"start":{"line":272,"column":11,"offset":9927},"end":{"line":272,"column":97,"offset":10013}}}],"position":{"start":{"line":272,"column":9,"offset":9925},"end":{"line":272,"column":97,"offset":10013}}},{"type":"text","value":"\n"}],"position":{"start":{"line":272,"column":9,"offset":9925},"end":{"line":272,"column":97,"offset":10013}}},{"type":"text","value":"\n"}],"position":{"start":{"line":271,"column":5,"offset":9814},"end":{"line":272,"column":97,"offset":10013}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"local scope is the set of variables available for use within the function","position":{"start":{"line":273,"column":7,"offset":10020},"end":{"line":273,"column":80,"offset":10093}}}],"position":{"start":{"line":273,"column":7,"offset":10020},"end":{"line":273,"column":80,"offset":10093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"when we enter a function, we enter a new scope","position":{"start":{"line":274,"column":11,"offset":10104},"end":{"line":274,"column":57,"offset":10150}}}],"position":{"start":{"line":274,"column":9,"offset":10102},"end":{"line":274,"column":57,"offset":10150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined ","position":{"start":{"line":275,"column":11,"offset":10161},"end":{"line":275,"column":157,"offset":10307}}},{"type":"text","value":"(","position":{"start":{"line":275,"column":157,"offset":10307},"end":{"line":275,"column":159,"offset":10309}}},{"type":"text","value":"hmm about that last one","position":{"start":{"line":275,"column":159,"offset":10309},"end":{"line":275,"column":182,"offset":10332}}},{"type":"text","value":")","position":{"start":{"line":275,"column":182,"offset":10332},"end":{"line":275,"column":184,"offset":10334}}}],"position":{"start":{"line":275,"column":9,"offset":10159},"end":{"line":275,"column":184,"offset":10334}}},{"type":"text","value":"\n"}],"position":{"start":{"line":274,"column":9,"offset":10102},"end":{"line":275,"column":184,"offset":10334}}},{"type":"text","value":"\n"}],"position":{"start":{"line":273,"column":5,"offset":10018},"end":{"line":275,"column":184,"offset":10334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"for blocks ","position":{"start":{"line":276,"column":7,"offset":10341},"end":{"line":276,"column":18,"offset":10352}}},{"type":"text","value":"(","position":{"start":{"line":276,"column":18,"offset":10352},"end":{"line":276,"column":20,"offset":10354}}},{"type":"text","value":"denoted by curly braces ","position":{"start":{"line":276,"column":20,"offset":10354},"end":{"line":276,"column":44,"offset":10378}}},{"type":"raw","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":276,"column":44,"offset":10378},"end":{"line":276,"column":48,"offset":10382}}},{"type":"text","value":", as in conditionals or ","position":{"start":{"line":276,"column":48,"offset":10382},"end":{"line":276,"column":72,"offset":10406}}},{"type":"raw","value":"<code class=\"language-text\">for</code>","position":{"start":{"line":276,"column":72,"offset":10406},"end":{"line":276,"column":77,"offset":10411}}},{"type":"text","value":" loops","position":{"start":{"line":276,"column":77,"offset":10411},"end":{"line":276,"column":83,"offset":10417}}},{"type":"text","value":")","position":{"start":{"line":276,"column":83,"offset":10417},"end":{"line":276,"column":85,"offset":10419}}},{"type":"text","value":", variables can be block scoped","position":{"start":{"line":276,"column":85,"offset":10419},"end":{"line":276,"column":116,"offset":10450}}}],"position":{"start":{"line":276,"column":5,"offset":10339},"end":{"line":276,"column":116,"offset":10450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"inner scope does not have access to variables in the outer scope","position":{"start":{"line":277,"column":7,"offset":10457},"end":{"line":277,"column":71,"offset":10521}}}],"position":{"start":{"line":277,"column":7,"offset":10457},"end":{"line":277,"column":71,"offset":10521}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found","position":{"start":{"line":278,"column":11,"offset":10532},"end":{"line":278,"column":153,"offset":10674}}}],"position":{"start":{"line":278,"column":9,"offset":10530},"end":{"line":278,"column":153,"offset":10674}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"so an inner scope can access outer scope variables","position":{"start":{"line":279,"column":11,"offset":10685},"end":{"line":279,"column":61,"offset":10735}}}],"position":{"start":{"line":279,"column":9,"offset":10683},"end":{"line":279,"column":61,"offset":10735}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"but an outer scope can never access inner scope variables","position":{"start":{"line":280,"column":11,"offset":10746},"end":{"line":280,"column":68,"offset":10803}}}],"position":{"start":{"line":280,"column":9,"offset":10744},"end":{"line":280,"column":68,"offset":10803}}},{"type":"text","value":"\n"}],"position":{"start":{"line":278,"column":9,"offset":10530},"end":{"line":280,"column":68,"offset":10803}}},{"type":"text","value":"\n"}],"position":{"start":{"line":277,"column":5,"offset":10455},"end":{"line":280,"column":68,"offset":10803}}},{"type":"text","value":"\n"}],"position":{"start":{"line":270,"column":5,"offset":9716},"end":{"line":280,"column":68,"offset":10803}}},{"type":"text","value":"\n"}],"position":{"start":{"line":269,"column":1,"offset":9602},"end":{"line":280,"column":68,"offset":10803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define an arrow function","position":{"start":{"line":281,"column":3,"offset":10806},"end":{"line":281,"column":27,"offset":10830}}}],"position":{"start":{"line":281,"column":3,"offset":10806},"end":{"line":281,"column":27,"offset":10830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":283,"column":5,"offset":10836},"end":{"line":283,"column":7,"offset":10838}}},{"type":"text","value":"`","position":{"start":{"line":283,"column":7,"offset":10838},"end":{"line":283,"column":9,"offset":10840}}},{"type":"text","value":"`","position":{"start":{"line":283,"column":9,"offset":10840},"end":{"line":283,"column":11,"offset":10842}}},{"type":"text","value":"javascript","position":{"start":{"line":283,"column":11,"offset":10842},"end":{"line":283,"column":21,"offset":10852}}}],"position":{"start":{"line":283,"column":5,"offset":10836},"end":{"line":283,"column":21,"offset":10852}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let arrowFunction = ","position":{"start":{"line":285,"column":5,"offset":10858},"end":{"line":285,"column":25,"offset":10878}}},{"type":"text","value":"(","position":{"start":{"line":285,"column":25,"offset":10878},"end":{"line":285,"column":27,"offset":10880}}},{"type":"text","value":"param1, param2","position":{"start":{"line":285,"column":27,"offset":10880},"end":{"line":285,"column":41,"offset":10894}}},{"type":"text","value":")","position":{"start":{"line":285,"column":41,"offset":10894},"end":{"line":285,"column":43,"offset":10896}}},{"type":"text","value":" =","position":{"start":{"line":285,"column":43,"offset":10896},"end":{"line":285,"column":45,"offset":10898}}},{"type":"text","value":">","position":{"start":{"line":285,"column":45,"offset":10898},"end":{"line":285,"column":49,"offset":10902}}},{"type":"text","value":" {","position":{"start":{"line":285,"column":49,"offset":10902},"end":{"line":285,"column":51,"offset":10904}}}],"position":{"start":{"line":285,"column":5,"offset":10858},"end":{"line":285,"column":51,"offset":10904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let sum = param1 + param2;","position":{"start":{"line":287,"column":5,"offset":10910},"end":{"line":287,"column":31,"offset":10936}}}],"position":{"start":{"line":287,"column":5,"offset":10910},"end":{"line":287,"column":31,"offset":10936}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"return sum;","position":{"start":{"line":289,"column":5,"offset":10942},"end":{"line":289,"column":16,"offset":10953}}}],"position":{"start":{"line":289,"column":5,"offset":10942},"end":{"line":289,"column":16,"offset":10953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"}","position":{"start":{"line":291,"column":5,"offset":10959},"end":{"line":291,"column":6,"offset":10960}}}],"position":{"start":{"line":291,"column":5,"offset":10959},"end":{"line":291,"column":6,"offset":10960}}},{"type":"text","value":"\n"}],"position":{"start":{"line":281,"column":1,"offset":10804},"end":{"line":291,"column":6,"offset":10960}}},{"type":"text","value":"\n"}],"position":{"start":{"line":255,"column":1,"offset":7940},"end":{"line":291,"column":6,"offset":10960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// with 1 param you can remove parens around parameters let arrowFunction = param =","position":{"start":{"line":293,"column":1,"offset":10962},"end":{"line":293,"column":84,"offset":11045}}},{"type":"text","value":">","position":{"start":{"line":293,"column":84,"offset":11045},"end":{"line":293,"column":88,"offset":11049}}},{"type":"text","value":" { param += 1; return param; }","position":{"start":{"line":293,"column":88,"offset":11049},"end":{"line":293,"column":118,"offset":11079}}}],"position":{"start":{"line":293,"column":1,"offset":10962},"end":{"line":293,"column":118,"offset":11079}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// if your return statement is one line, you can use implied return let arrowFunction = param =","position":{"start":{"line":295,"column":1,"offset":11081},"end":{"line":295,"column":96,"offset":11176}}},{"type":"text","value":">","position":{"start":{"line":295,"column":96,"offset":11176},"end":{"line":295,"column":100,"offset":11180}}},{"type":"text","value":" param + 1;","position":{"start":{"line":295,"column":100,"offset":11180},"end":{"line":295,"column":111,"offset":11191}}}],"position":{"start":{"line":295,"column":1,"offset":11081},"end":{"line":295,"column":111,"offset":11191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// you don't have to assign to variable, can be anonymous // if you never need to use it again param =","position":{"start":{"line":297,"column":1,"offset":11193},"end":{"line":297,"column":103,"offset":11295}}},{"type":"text","value":">","position":{"start":{"line":297,"column":103,"offset":11295},"end":{"line":297,"column":107,"offset":11299}}},{"type":"text","value":" param + 1;","position":{"start":{"line":297,"column":107,"offset":11299},"end":{"line":297,"column":118,"offset":11310}}}],"position":{"start":{"line":297,"column":1,"offset":11193},"end":{"line":297,"column":118,"offset":11310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":299,"column":1,"offset":11312},"end":{"line":299,"column":3,"offset":11314}}},{"type":"text","value":"`","position":{"start":{"line":299,"column":3,"offset":11314},"end":{"line":299,"column":5,"offset":11316}}},{"type":"text","value":"`","position":{"start":{"line":299,"column":5,"offset":11316},"end":{"line":299,"column":7,"offset":11318}}}],"position":{"start":{"line":299,"column":1,"offset":11312},"end":{"line":299,"column":7,"offset":11318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an arrow function, deduce the value of ","position":{"start":{"line":301,"column":3,"offset":11322},"end":{"line":301,"column":48,"offset":11367}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":301,"column":48,"offset":11367},"end":{"line":301,"column":54,"offset":11373}}},{"type":"text","value":" without executing the code","position":{"start":{"line":301,"column":54,"offset":11373},"end":{"line":301,"column":81,"offset":11400}}}],"position":{"start":{"line":301,"column":3,"offset":11322},"end":{"line":301,"column":81,"offset":11400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"arrow functions are automatically bound to the context they were declared in","position":{"start":{"line":303,"column":7,"offset":11408},"end":{"line":303,"column":83,"offset":11484}}}],"position":{"start":{"line":303,"column":5,"offset":11406},"end":{"line":303,"column":83,"offset":11484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"unlike regular function which use the context they are invoked in ","position":{"start":{"line":304,"column":7,"offset":11491},"end":{"line":304,"column":73,"offset":11557}}},{"type":"text","value":"(","position":{"start":{"line":304,"column":73,"offset":11557},"end":{"line":304,"column":75,"offset":11559}}},{"type":"text","value":"unless they have been bound using ","position":{"start":{"line":304,"column":75,"offset":11559},"end":{"line":304,"column":109,"offset":11593}}},{"type":"raw","value":"<code class=\"language-text\">Function#bind</code>","position":{"start":{"line":304,"column":109,"offset":11593},"end":{"line":304,"column":124,"offset":11608}}},{"type":"text","value":")","position":{"start":{"line":304,"column":124,"offset":11608},"end":{"line":304,"column":126,"offset":11610}}}],"position":{"start":{"line":304,"column":5,"offset":11489},"end":{"line":304,"column":126,"offset":11610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context","position":{"start":{"line":305,"column":7,"offset":11617},"end":{"line":305,"column":147,"offset":11757}}}],"position":{"start":{"line":305,"column":5,"offset":11615},"end":{"line":305,"column":147,"offset":11757}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"so you can't use an arrow function to define a method directly","position":{"start":{"line":306,"column":7,"offset":11764},"end":{"line":306,"column":69,"offset":11826}}}],"position":{"start":{"line":306,"column":7,"offset":11764},"end":{"line":306,"column":69,"offset":11826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":308,"column":9,"offset":11836},"end":{"line":308,"column":11,"offset":11838}}},{"type":"text","value":"`","position":{"start":{"line":308,"column":11,"offset":11838},"end":{"line":308,"column":13,"offset":11840}}},{"type":"text","value":"`","position":{"start":{"line":308,"column":13,"offset":11840},"end":{"line":308,"column":15,"offset":11842}}},{"type":"text","value":"javascript","position":{"start":{"line":308,"column":15,"offset":11842},"end":{"line":308,"column":25,"offset":11852}}}],"position":{"start":{"line":308,"column":9,"offset":11836},"end":{"line":308,"column":25,"offset":11852}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let obj = {","position":{"start":{"line":310,"column":9,"offset":11862},"end":{"line":310,"column":20,"offset":11873}}}],"position":{"start":{"line":310,"column":9,"offset":11862},"end":{"line":310,"column":20,"offset":11873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"name: \"my object\",","position":{"start":{"line":312,"column":9,"offset":11883},"end":{"line":312,"column":27,"offset":11901}}}],"position":{"start":{"line":312,"column":9,"offset":11883},"end":{"line":312,"column":27,"offset":11901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"unboundFunc: function ","position":{"start":{"line":314,"column":9,"offset":11911},"end":{"line":314,"column":31,"offset":11933}}},{"type":"text","value":"(","position":{"start":{"line":314,"column":31,"offset":11933},"end":{"line":314,"column":33,"offset":11935}}},{"type":"text","value":")","position":{"start":{"line":314,"column":33,"offset":11935},"end":{"line":314,"column":35,"offset":11937}}},{"type":"text","value":" {","position":{"start":{"line":314,"column":35,"offset":11937},"end":{"line":314,"column":37,"offset":11939}}}],"position":{"start":{"line":314,"column":9,"offset":11911},"end":{"line":314,"column":37,"offset":11939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"return this.name;","position":{"start":{"line":316,"column":9,"offset":11949},"end":{"line":316,"column":26,"offset":11966}}}],"position":{"start":{"line":316,"column":9,"offset":11949},"end":{"line":316,"column":26,"offset":11966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// this function will be able to be called on different objects","position":{"start":{"line":318,"column":9,"offset":11976},"end":{"line":318,"column":72,"offset":12039}}}],"position":{"start":{"line":318,"column":9,"offset":11976},"end":{"line":318,"column":72,"offset":12039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":320,"column":9,"offset":12049},"end":{"line":320,"column":11,"offset":12051}}}],"position":{"start":{"line":320,"column":9,"offset":12049},"end":{"line":320,"column":11,"offset":12051}}},{"type":"text","value":"\n"}],"position":{"start":{"line":306,"column":5,"offset":11762},"end":{"line":320,"column":11,"offset":12051}}},{"type":"text","value":"\n"}],"position":{"start":{"line":303,"column":5,"offset":11406},"end":{"line":320,"column":11,"offset":12051}}},{"type":"text","value":"\n"}],"position":{"start":{"line":301,"column":1,"offset":11320},"end":{"line":320,"column":11,"offset":12051}}},{"type":"text","value":"\n"}],"position":{"start":{"line":301,"column":1,"offset":11320},"end":{"line":320,"column":11,"offset":12051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":322,"column":1,"offset":12053},"end":{"line":322,"column":4,"offset":12056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"boundToGlobal: ","position":{"start":{"line":324,"column":1,"offset":12058},"end":{"line":324,"column":16,"offset":12073}}},{"type":"text","value":"(","position":{"start":{"line":324,"column":16,"offset":12073},"end":{"line":324,"column":18,"offset":12075}}},{"type":"text","value":")","position":{"start":{"line":324,"column":18,"offset":12075},"end":{"line":324,"column":20,"offset":12077}}},{"type":"text","value":" =","position":{"start":{"line":324,"column":20,"offset":12077},"end":{"line":324,"column":22,"offset":12079}}},{"type":"text","value":">","position":{"start":{"line":324,"column":22,"offset":12079},"end":{"line":324,"column":26,"offset":12083}}},{"type":"text","value":" { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },","position":{"start":{"line":324,"column":26,"offset":12083},"end":{"line":324,"column":212,"offset":12269}}}],"position":{"start":{"line":324,"column":1,"offset":12058},"end":{"line":324,"column":212,"offset":12269}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function-variable function\">makeFuncBoundToObj</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// this function will return a function that will be bound</span>\n    <span class=\"token comment\">// to the object where we call the outer method</span>\n    <span class=\"token comment\">// because the arrow syntax is nested inside one of this</span>\n    <span class=\"token comment\">// function's methods, it cannot be rebound</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">makeUnboundFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//this function will return a function that will still be unbound</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">immediatelyInvokedFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this property will be set to the return value of this anonymous function,</span>\n<span class=\"token comment\">// which is invoked during the object definition;</span>\n<span class=\"token comment\">// basically, it's a way to check the context inside of an object, at this moment</span>\n\n<span class=\"token literal-property property\">innerObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inner object\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">innerArrowFunc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// the context inside a nested object is not the parent, it's still</span>\n    <span class=\"token comment\">// the global object. entering an object definition doesn't change the context</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token keyword\">let</span> otherObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my other object\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"</span>\n<span class=\"token comment\">// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined</span>\n<span class=\"token comment\">// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"</span>\n<span class=\"token comment\">// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"</span>\n<span class=\"token comment\">// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined</span>\n<span class=\"token comment\">// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined</span></code></pre></div>","position":{"start":{"line":326,"column":1,"offset":12271},"end":{"line":366,"column":4,"offset":15387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"}","position":{"start":{"line":368,"column":1,"offset":15389},"end":{"line":368,"column":2,"offset":15390}}}],"position":{"start":{"line":368,"column":1,"offset":15389},"end":{"line":368,"column":2,"offset":15390}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Implement a closure and explain how the closure effects scope\n   <span class=\"token operator\">-</span> a closure is <span class=\"token string\">\"the combination of a function and the lexical environment within which that function was declared\"</span>\n      <span class=\"token operator\">-</span> alternatively<span class=\"token punctuation\">,</span> <span class=\"token string\">\"when an inner function uses or changes variables in an outer function\"</span>\n   <span class=\"token operator\">-</span> closures have access to any variables within their own scope <span class=\"token operator\">+</span> scope <span class=\"token keyword\">of</span> outer functions <span class=\"token operator\">+</span> global scope — the <span class=\"token keyword\">set</span> <span class=\"token keyword\">of</span> all these available variables is <span class=\"token string\">\"lexical environemnt\"</span>\n   <span class=\"token operator\">-</span> closure keeps reference to all variables <span class=\"token operator\">**</span>even <span class=\"token keyword\">if</span> the outer <span class=\"token keyword\">function</span> has returned<span class=\"token operator\">**</span>\n      <span class=\"token operator\">-</span> each <span class=\"token keyword\">function</span> has a <span class=\"token keyword\">private</span> mutable state that cannot be accessed externally\n      <span class=\"token operator\">-</span> the inner <span class=\"token keyword\">function</span> will maintain a reference to the scope <span class=\"token keyword\">in</span> which it was declared<span class=\"token punctuation\">.</span> so it has access to variables that were initialized <span class=\"token keyword\">in</span> any outer scope—even <span class=\"token keyword\">if</span> that scope\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> a variable exists <span class=\"token keyword\">in</span> the scope <span class=\"token keyword\">of</span> what could have been accessed by a <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span> global scope<span class=\"token punctuation\">,</span> outer <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> etc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> does that variable wind up <span class=\"token keyword\">in</span> the closure even <span class=\"token keyword\">if</span> it never got accessed<span class=\"token operator\">?</span>\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you change the value <span class=\"token keyword\">of</span> a <span class=\"token function\">variable</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> you will change the value <span class=\"token keyword\">of</span> that variable <span class=\"token keyword\">in</span> the scope that it was declared <span class=\"token keyword\">in</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// this function starts a counter at 0, then returns a</span>\n   <span class=\"token comment\">// new function that can access and change that counter</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// each new counter you create will have a single internal</span>\n   <span class=\"token comment\">// state, that can be changed only by calling the function.</span>\n   <span class=\"token comment\">// you can't access that state from outside of the function,</span>\n   <span class=\"token comment\">// even though the count variable in question is initialized</span>\n   <span class=\"token comment\">// by the outer function, and it remains accessible to the</span>\n   <span class=\"token comment\">// inner function after the outer function returns.</span>\n   <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 2</span>\n<span class=\"token comment\">// so the closure here comes into play because</span>\n<span class=\"token comment\">// an inner function is accessing and changing</span>\n<span class=\"token comment\">// a variable from an outer function</span>\n\n<span class=\"token comment\">// the closure is the combination of the counter</span>\n<span class=\"token comment\">// function and the all the variables that existed</span>\n<span class=\"token comment\">// in the scope that it was declared in. because</span>\n<span class=\"token comment\">// inner blocks/functions have access to outer</span>\n<span class=\"token comment\">// scopes, that includes the scope of the outer</span>\n<span class=\"token comment\">// function.</span>\n\n<span class=\"token comment\">// so counter variable is a closure, in that</span>\n<span class=\"token comment\">// it contains the inner count value that was</span>\n<span class=\"token comment\">// initialized by the outer createCounter() function</span>\n<span class=\"token comment\">// count has been captured or closed over</span>\n\n<span class=\"token comment\">// this state is private, so if i run createCounter again</span>\n<span class=\"token comment\">// i get a totally separate count that doesn't interact</span>\n<span class=\"token comment\">// with the previous one and each of the new functions</span>\n<span class=\"token comment\">// will have their own internal state based on the</span>\n<span class=\"token comment\">// initial declaration in the now-closed outer function</span>\n\n<span class=\"token keyword\">let</span> counter2 <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n\n<span class=\"token comment\">// if i set a new function equal to my existing counter</span>\n<span class=\"token comment\">// the internal state is shared with the new function</span>\n<span class=\"token keyword\">let</span> counter3 <span class=\"token operator\">=</span> counter2<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":370,"column":1,"offset":15392},"end":{"line":438,"column":4,"offset":18351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a method that references ","position":{"start":{"line":440,"column":3,"offset":18355},"end":{"line":440,"column":35,"offset":18387}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":440,"column":35,"offset":18387},"end":{"line":440,"column":41,"offset":18393}}},{"type":"text","value":" on an object literal","position":{"start":{"line":440,"column":41,"offset":18393},"end":{"line":440,"column":62,"offset":18414}}}],"position":{"start":{"line":440,"column":3,"offset":18355},"end":{"line":440,"column":62,"offset":18414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"when we use ","position":{"start":{"line":441,"column":7,"offset":18421},"end":{"line":441,"column":19,"offset":18433}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":441,"column":19,"offset":18433},"end":{"line":441,"column":25,"offset":18439}}},{"type":"text","value":" in a method it refers to the object that the method is invoked on","position":{"start":{"line":441,"column":25,"offset":18439},"end":{"line":441,"column":91,"offset":18505}}}],"position":{"start":{"line":441,"column":7,"offset":18421},"end":{"line":441,"column":91,"offset":18505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"it will let you access other pieces of information from within that object, or even other methods","position":{"start":{"line":442,"column":11,"offset":18516},"end":{"line":442,"column":108,"offset":18613}}}],"position":{"start":{"line":442,"column":9,"offset":18514},"end":{"line":442,"column":108,"offset":18613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"method style invocation - ","position":{"start":{"line":443,"column":11,"offset":18624},"end":{"line":443,"column":37,"offset":18650}}},{"type":"raw","value":"<code class=\"language-text\">object.method(args)</code>","position":{"start":{"line":443,"column":37,"offset":18650},"end":{"line":443,"column":58,"offset":18671}}},{"type":"text","value":" ","position":{"start":{"line":443,"column":58,"offset":18671},"end":{"line":443,"column":59,"offset":18672}}},{"type":"text","value":"(","position":{"start":{"line":443,"column":59,"offset":18672},"end":{"line":443,"column":61,"offset":18674}}},{"type":"text","value":"e.g. built in examples like ","position":{"start":{"line":443,"column":61,"offset":18674},"end":{"line":443,"column":89,"offset":18702}}},{"type":"raw","value":"<code class=\"language-text\">Array#push</code>","position":{"start":{"line":443,"column":89,"offset":18702},"end":{"line":443,"column":101,"offset":18714}}},{"type":"text","value":", or ","position":{"start":{"line":443,"column":101,"offset":18714},"end":{"line":443,"column":106,"offset":18719}}},{"type":"raw","value":"<code class=\"language-text\">String#toUpperCase</code>","position":{"start":{"line":443,"column":106,"offset":18719},"end":{"line":443,"column":126,"offset":18739}}},{"type":"text","value":")","position":{"start":{"line":443,"column":126,"offset":18739},"end":{"line":443,"column":128,"offset":18741}}}],"position":{"start":{"line":443,"column":9,"offset":18622},"end":{"line":443,"column":128,"offset":18741}}},{"type":"text","value":"\n"}],"position":{"start":{"line":442,"column":9,"offset":18514},"end":{"line":443,"column":128,"offset":18741}}},{"type":"text","value":"\n"}],"position":{"start":{"line":441,"column":5,"offset":18419},"end":{"line":443,"column":128,"offset":18741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"context is set every time we invoke a function","position":{"start":{"line":444,"column":7,"offset":18748},"end":{"line":444,"column":53,"offset":18794}}}],"position":{"start":{"line":444,"column":5,"offset":18746},"end":{"line":444,"column":53,"offset":18794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"function style invocation sets the context to the global object no matter what","position":{"start":{"line":445,"column":7,"offset":18801},"end":{"line":445,"column":85,"offset":18879}}}],"position":{"start":{"line":445,"column":5,"offset":18799},"end":{"line":445,"column":85,"offset":18879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"being inside an object does not make the context that object! you still have to use method-style invocation","position":{"start":{"line":446,"column":7,"offset":18886},"end":{"line":446,"column":114,"offset":18993}}}],"position":{"start":{"line":446,"column":5,"offset":18884},"end":{"line":446,"column":114,"offset":18993}}},{"type":"text","value":"\n"}],"position":{"start":{"line":441,"column":5,"offset":18419},"end":{"line":446,"column":114,"offset":18993}}},{"type":"text","value":"\n"}],"position":{"start":{"line":440,"column":1,"offset":18353},"end":{"line":446,"column":114,"offset":18993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Utilize the built in ","position":{"start":{"line":447,"column":3,"offset":18996},"end":{"line":447,"column":24,"offset":19017}}},{"type":"raw","value":"<code class=\"language-text\">Function#bind</code>","position":{"start":{"line":447,"column":24,"offset":19017},"end":{"line":447,"column":39,"offset":19032}}},{"type":"text","value":" on a callback to maintain the context of this","position":{"start":{"line":447,"column":39,"offset":19032},"end":{"line":447,"column":85,"offset":19078}}}],"position":{"start":{"line":447,"column":3,"offset":18996},"end":{"line":447,"column":85,"offset":19078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function","position":{"start":{"line":449,"column":7,"offset":19086},"end":{"line":449,"column":131,"offset":19210}}}],"position":{"start":{"line":449,"column":5,"offset":19084},"end":{"line":449,"column":131,"offset":19210}}},{"type":"text","value":"\n"}],"position":{"start":{"line":449,"column":5,"offset":19084},"end":{"line":449,"column":131,"offset":19210}}},{"type":"text","value":"\n"}],"position":{"start":{"line":447,"column":1,"offset":18994},"end":{"line":449,"column":131,"offset":19210}}},{"type":"text","value":"\n"}],"position":{"start":{"line":440,"column":1,"offset":18353},"end":{"line":449,"column":131,"offset":19210}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   let cat = {\n   purr: function () {\n   console.log(\"meow\");\n   },\n   purrMore: function () {\n   this.purr();\n   },\n   };\n   let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n   // we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\n   boundCat(); // prints \"meow\"</code></pre></div>","position":{"start":{"line":451,"column":1,"offset":19212},"end":{"line":464,"column":5,"offset":19621}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\\`\\`</code></pre></div>","position":{"start":{"line":466,"column":1,"offset":19623},"end":{"line":466,"column":9,"offset":19631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":468,"column":1,"offset":19633},"end":{"line":468,"column":4,"offset":19636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":470,"column":1,"offset":19638},"end":{"line":470,"column":4,"offset":19641}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bind</span><span class=\"token template-punctuation string\">`</span></span> can also work <span class=\"token keyword\">with</span> arguments<span class=\"token punctuation\">,</span> so you can have a version <span class=\"token keyword\">of</span> a <span class=\"token keyword\">function</span> <span class=\"token keyword\">with</span> particular arguments and a particular context<span class=\"token punctuation\">.</span> the first arg will be the context aka the <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> you want it to use<span class=\"token punctuation\">.</span> the next arguments will be the functions arguments that you are binding\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you just want to bind it to those arguments <span class=\"token keyword\">in</span> particular<span class=\"token punctuation\">,</span> you can use <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> the first argument<span class=\"token punctuation\">,</span> so the context won't be bound<span class=\"token punctuation\">,</span> just the arguments\n<span class=\"token operator\">-</span> Given a code snippet<span class=\"token punctuation\">,</span> identify what <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> refers to\n   <span class=\"token operator\">-</span> important to recognize the difference between scope and context\n      <span class=\"token operator\">-</span> scope works like a dictionary that has all the variables that are available within a given block<span class=\"token punctuation\">,</span> plus a pointer back the next outer <span class=\"token function\">scope</span> <span class=\"token punctuation\">(</span>which itself has pointers to <span class=\"token keyword\">new</span> <span class=\"token class-name\">scopes</span> until you reach the global scope<span class=\"token punctuation\">.</span> so you can think about a whole given block's scope <span class=\"token keyword\">as</span> a kind <span class=\"token keyword\">of</span> linked list <span class=\"token keyword\">of</span> dictionaries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>also<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> is not to say that scope is actually implemented <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span> way<span class=\"token punctuation\">,</span> that is just the schema that i can use to understand it<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span> context refers to the value <span class=\"token keyword\">of</span> the <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> keyword\n   <span class=\"token operator\">-</span> the keyword <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> exists <span class=\"token keyword\">in</span> every <span class=\"token keyword\">function</span> and it evaluates to the object that is currently invoking that <span class=\"token keyword\">function</span>\n   <span class=\"token operator\">-</span> so the context is fairly straightforward when we talk about methods being called on specific objects\n   <span class=\"token operator\">-</span> you could<span class=\"token punctuation\">,</span> however<span class=\"token punctuation\">,</span> call an object's method on something other than that object<span class=\"token punctuation\">,</span> and then <span class=\"token keyword\">this</span> would refer to the context where<span class=\"token operator\">/</span>how it was called<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bowser\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">changeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Layla\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// note this is **not invoked** - we are assigning the function itself</span>\n<span class=\"token keyword\">let</span> change <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>changeName<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// our dog still has the same name</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: 'Bowser', changeName: [Function: changeName] }</span>\n\n<span class=\"token comment\">// instead of changing the dog we changed the global name!!!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object [global] {etc, etc, etc,  name: 'Layla'}</span></code></pre></div>","position":{"start":{"line":472,"column":1,"offset":19643},"end":{"line":501,"column":4,"offset":21589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!","position":{"start":{"line":503,"column":3,"offset":21593},"end":{"line":503,"column":58,"offset":21648}}}],"position":{"start":{"line":503,"column":3,"offset":21593},"end":{"line":503,"column":58,"offset":21648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"could throw an error if it expects this to have some other method or whatever that doesn't exist","position":{"start":{"line":504,"column":7,"offset":21655},"end":{"line":504,"column":103,"offset":21751}}}],"position":{"start":{"line":504,"column":5,"offset":21653},"end":{"line":504,"column":103,"offset":21751}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"you could also overwrite values or assign values to exist in a space where they should not exist","position":{"start":{"line":505,"column":7,"offset":21758},"end":{"line":505,"column":103,"offset":21854}}}],"position":{"start":{"line":505,"column":5,"offset":21756},"end":{"line":505,"column":103,"offset":21854}}},{"type":"text","value":"\n"}],"position":{"start":{"line":504,"column":5,"offset":21653},"end":{"line":505,"column":103,"offset":21854}}},{"type":"text","value":"\n"}],"position":{"start":{"line":503,"column":1,"offset":21591},"end":{"line":505,"column":103,"offset":21854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you call a function as a callback, it will set ","position":{"start":{"line":506,"column":3,"offset":21857},"end":{"line":506,"column":53,"offset":21907}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":506,"column":53,"offset":21907},"end":{"line":506,"column":59,"offset":21913}}},{"type":"text","value":" to be the outer function itself, even if the function you were calling is a method that was called on a particular object","position":{"start":{"line":506,"column":59,"offset":21913},"end":{"line":506,"column":181,"offset":22035}}}],"position":{"start":{"line":506,"column":1,"offset":21855},"end":{"line":506,"column":181,"offset":22035}}},{"type":"text","value":"\n"}],"position":{"start":{"line":503,"column":1,"offset":21591},"end":{"line":506,"column":181,"offset":22035}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   let cat = {\n   purr: function () {\n   console.log(\"meow\");\n   },\n   purrMore: function () {\n   this.purr();\n   },\n   };\n   global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</code></pre></div>","position":{"start":{"line":508,"column":1,"offset":22037},"end":{"line":518,"column":5,"offset":22283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"we can use strict mode with ","position":{"start":{"line":520,"column":1,"offset":22285},"end":{"line":520,"column":29,"offset":22313}}},{"type":"raw","value":"<code class=\"language-text\">\"use strict\";</code>","position":{"start":{"line":520,"column":29,"offset":22313},"end":{"line":520,"column":44,"offset":22328}}},{"type":"text","value":" this will prevent you from accessing the global object with ","position":{"start":{"line":520,"column":44,"offset":22328},"end":{"line":520,"column":105,"offset":22389}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":520,"column":105,"offset":22389},"end":{"line":520,"column":111,"offset":22395}}},{"type":"text","value":" in functions, so if you try to call ","position":{"start":{"line":520,"column":111,"offset":22395},"end":{"line":520,"column":148,"offset":22432}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":520,"column":148,"offset":22432},"end":{"line":520,"column":154,"offset":22438}}},{"type":"text","value":" in the global context and change a value, you will get a type error, and the things you try to access will be undefined","position":{"start":{"line":520,"column":154,"offset":22438},"end":{"line":520,"column":274,"offset":22558}}}],"position":{"start":{"line":520,"column":1,"offset":22285},"end":{"line":520,"column":274,"offset":22558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":522,"column":1,"offset":22560},"end":{"line":522,"column":4,"offset":22563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let sayMeow = cat.purrMore; console.log","position":{"start":{"line":524,"column":1,"offset":22565},"end":{"line":524,"column":40,"offset":22604}}},{"type":"text","value":"(","position":{"start":{"line":524,"column":40,"offset":22604},"end":{"line":524,"column":42,"offset":22606}}},{"type":"text","value":"sayMeow","position":{"start":{"line":524,"column":42,"offset":22606},"end":{"line":524,"column":49,"offset":22613}}},{"type":"text","value":"(","position":{"start":{"line":524,"column":49,"offset":22613},"end":{"line":524,"column":51,"offset":22615}}},{"type":"text","value":")","position":{"start":{"line":524,"column":51,"offset":22615},"end":{"line":524,"column":53,"offset":22617}}},{"type":"text","value":")","position":{"start":{"line":524,"column":53,"offset":22617},"end":{"line":524,"column":55,"offset":22619}}},{"type":"text","value":"; // TypeError: this.purr is not a function","position":{"start":{"line":524,"column":55,"offset":22619},"end":{"line":524,"column":98,"offset":22662}}}],"position":{"start":{"line":524,"column":1,"offset":22565},"end":{"line":524,"column":98,"offset":22662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// we can use the built in Function.bind to ensure our context, our ","position":{"start":{"line":526,"column":1,"offset":22664},"end":{"line":526,"column":69,"offset":22732}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":526,"column":69,"offset":22732},"end":{"line":526,"column":75,"offset":22738}}},{"type":"text","value":", // is the cat object let boundCat = sayMeow.bind","position":{"start":{"line":526,"column":75,"offset":22738},"end":{"line":526,"column":125,"offset":22788}}},{"type":"text","value":"(","position":{"start":{"line":526,"column":125,"offset":22788},"end":{"line":526,"column":127,"offset":22790}}},{"type":"text","value":"cat","position":{"start":{"line":526,"column":127,"offset":22790},"end":{"line":526,"column":130,"offset":22793}}},{"type":"text","value":")","position":{"start":{"line":526,"column":130,"offset":22793},"end":{"line":526,"column":132,"offset":22795}}},{"type":"text","value":";","position":{"start":{"line":526,"column":132,"offset":22795},"end":{"line":526,"column":133,"offset":22796}}}],"position":{"start":{"line":526,"column":1,"offset":22664},"end":{"line":526,"column":133,"offset":22796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"boundCat","position":{"start":{"line":528,"column":1,"offset":22798},"end":{"line":528,"column":9,"offset":22806}}},{"type":"text","value":"(","position":{"start":{"line":528,"column":9,"offset":22806},"end":{"line":528,"column":11,"offset":22808}}},{"type":"text","value":")","position":{"start":{"line":528,"column":11,"offset":22808},"end":{"line":528,"column":13,"offset":22810}}},{"type":"text","value":"; // prints \"meow\"","position":{"start":{"line":528,"column":13,"offset":22810},"end":{"line":528,"column":31,"offset":22828}}}],"position":{"start":{"line":528,"column":1,"offset":22798},"end":{"line":528,"column":31,"offset":22828}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```js\n//\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}</code></pre></div>","position":{"start":{"line":530,"column":1,"offset":22830},"end":{"line":558,"column":4,"offset":24775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!","position":{"start":{"line":560,"column":3,"offset":24779},"end":{"line":560,"column":58,"offset":24834}}}],"position":{"start":{"line":560,"column":3,"offset":24779},"end":{"line":560,"column":58,"offset":24834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"could throw an error if it expects this to have some other method or whatever that doesn't exist","position":{"start":{"line":561,"column":7,"offset":24841},"end":{"line":561,"column":103,"offset":24937}}}],"position":{"start":{"line":561,"column":5,"offset":24839},"end":{"line":561,"column":103,"offset":24937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"you could also overwrite values or assign values to exist in a space where they should not exist","position":{"start":{"line":562,"column":7,"offset":24944},"end":{"line":562,"column":103,"offset":25040}}}],"position":{"start":{"line":562,"column":5,"offset":24942},"end":{"line":562,"column":103,"offset":25040}}},{"type":"text","value":"\n"}],"position":{"start":{"line":561,"column":5,"offset":24839},"end":{"line":562,"column":103,"offset":25040}}},{"type":"text","value":"\n"}],"position":{"start":{"line":560,"column":1,"offset":24777},"end":{"line":562,"column":103,"offset":25040}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"if you call a function as a callback, it will set ","position":{"start":{"line":563,"column":3,"offset":25043},"end":{"line":563,"column":53,"offset":25093}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":563,"column":53,"offset":25093},"end":{"line":563,"column":59,"offset":25099}}},{"type":"text","value":" to be the outer function itself, even if the function you were calling is a method that was called on a particular object","position":{"start":{"line":563,"column":59,"offset":25099},"end":{"line":563,"column":181,"offset":25221}}}],"position":{"start":{"line":563,"column":3,"offset":25043},"end":{"line":563,"column":181,"offset":25221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":565,"column":5,"offset":25227},"end":{"line":565,"column":7,"offset":25229}}},{"type":"text","value":"`","position":{"start":{"line":565,"column":7,"offset":25229},"end":{"line":565,"column":9,"offset":25231}}},{"type":"text","value":"`","position":{"start":{"line":565,"column":9,"offset":25231},"end":{"line":565,"column":11,"offset":25233}}},{"type":"text","value":"javascript","position":{"start":{"line":565,"column":11,"offset":25233},"end":{"line":565,"column":21,"offset":25243}}}],"position":{"start":{"line":565,"column":5,"offset":25227},"end":{"line":565,"column":21,"offset":25243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let cat = {","position":{"start":{"line":567,"column":5,"offset":25249},"end":{"line":567,"column":16,"offset":25260}}}],"position":{"start":{"line":567,"column":5,"offset":25249},"end":{"line":567,"column":16,"offset":25260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"purr: function ","position":{"start":{"line":569,"column":5,"offset":25266},"end":{"line":569,"column":20,"offset":25281}}},{"type":"text","value":"(","position":{"start":{"line":569,"column":20,"offset":25281},"end":{"line":569,"column":22,"offset":25283}}},{"type":"text","value":")","position":{"start":{"line":569,"column":22,"offset":25283},"end":{"line":569,"column":24,"offset":25285}}},{"type":"text","value":" {","position":{"start":{"line":569,"column":24,"offset":25285},"end":{"line":569,"column":26,"offset":25287}}}],"position":{"start":{"line":569,"column":5,"offset":25266},"end":{"line":569,"column":26,"offset":25287}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":571,"column":5,"offset":25293},"end":{"line":571,"column":16,"offset":25304}}},{"type":"text","value":"(","position":{"start":{"line":571,"column":16,"offset":25304},"end":{"line":571,"column":18,"offset":25306}}},{"type":"text","value":"\"meow\"","position":{"start":{"line":571,"column":18,"offset":25306},"end":{"line":571,"column":24,"offset":25312}}},{"type":"text","value":")","position":{"start":{"line":571,"column":24,"offset":25312},"end":{"line":571,"column":26,"offset":25314}}},{"type":"text","value":";","position":{"start":{"line":571,"column":26,"offset":25314},"end":{"line":571,"column":27,"offset":25315}}}],"position":{"start":{"line":571,"column":5,"offset":25293},"end":{"line":571,"column":27,"offset":25315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":573,"column":5,"offset":25321},"end":{"line":573,"column":7,"offset":25323}}}],"position":{"start":{"line":573,"column":5,"offset":25321},"end":{"line":573,"column":7,"offset":25323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"purrMore: function ","position":{"start":{"line":575,"column":5,"offset":25329},"end":{"line":575,"column":24,"offset":25348}}},{"type":"text","value":"(","position":{"start":{"line":575,"column":24,"offset":25348},"end":{"line":575,"column":26,"offset":25350}}},{"type":"text","value":")","position":{"start":{"line":575,"column":26,"offset":25350},"end":{"line":575,"column":28,"offset":25352}}},{"type":"text","value":" {","position":{"start":{"line":575,"column":28,"offset":25352},"end":{"line":575,"column":30,"offset":25354}}}],"position":{"start":{"line":575,"column":5,"offset":25329},"end":{"line":575,"column":30,"offset":25354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"this.purr","position":{"start":{"line":577,"column":5,"offset":25360},"end":{"line":577,"column":14,"offset":25369}}},{"type":"text","value":"(","position":{"start":{"line":577,"column":14,"offset":25369},"end":{"line":577,"column":16,"offset":25371}}},{"type":"text","value":")","position":{"start":{"line":577,"column":16,"offset":25371},"end":{"line":577,"column":18,"offset":25373}}},{"type":"text","value":";","position":{"start":{"line":577,"column":18,"offset":25373},"end":{"line":577,"column":19,"offset":25374}}}],"position":{"start":{"line":577,"column":5,"offset":25360},"end":{"line":577,"column":19,"offset":25374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":579,"column":5,"offset":25380},"end":{"line":579,"column":7,"offset":25382}}}],"position":{"start":{"line":579,"column":5,"offset":25380},"end":{"line":579,"column":7,"offset":25382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"};","position":{"start":{"line":581,"column":5,"offset":25388},"end":{"line":581,"column":7,"offset":25390}}}],"position":{"start":{"line":581,"column":5,"offset":25388},"end":{"line":581,"column":7,"offset":25390}}},{"type":"text","value":"\n"}],"position":{"start":{"line":563,"column":1,"offset":25041},"end":{"line":581,"column":7,"offset":25390}}},{"type":"text","value":"\n"}],"position":{"start":{"line":560,"column":1,"offset":24777},"end":{"line":581,"column":7,"offset":25390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"global.setTimeout","position":{"start":{"line":583,"column":1,"offset":25392},"end":{"line":583,"column":18,"offset":25409}}},{"type":"text","value":"(","position":{"start":{"line":583,"column":18,"offset":25409},"end":{"line":583,"column":20,"offset":25411}}},{"type":"text","value":"cat.purrMore, 5000","position":{"start":{"line":583,"column":20,"offset":25411},"end":{"line":583,"column":38,"offset":25429}}},{"type":"text","value":")","position":{"start":{"line":583,"column":38,"offset":25429},"end":{"line":583,"column":40,"offset":25431}}},{"type":"text","value":"; // 5 seconds later: TypeError: this.purr is not a function","position":{"start":{"line":583,"column":40,"offset":25431},"end":{"line":583,"column":100,"offset":25491}}}],"position":{"start":{"line":583,"column":1,"offset":25392},"end":{"line":583,"column":100,"offset":25491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":585,"column":1,"offset":25493},"end":{"line":585,"column":3,"offset":25495}}},{"type":"text","value":"`","position":{"start":{"line":585,"column":3,"offset":25495},"end":{"line":585,"column":5,"offset":25497}}},{"type":"text","value":"`","position":{"start":{"line":585,"column":5,"offset":25497},"end":{"line":585,"column":7,"offset":25499}}}],"position":{"start":{"line":585,"column":1,"offset":25493},"end":{"line":585,"column":7,"offset":25499}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"we can use strict mode with ","position":{"start":{"line":587,"column":3,"offset":25503},"end":{"line":587,"column":31,"offset":25531}}},{"type":"raw","value":"<code class=\"language-text\">\"use strict\";</code>","position":{"start":{"line":587,"column":31,"offset":25531},"end":{"line":587,"column":46,"offset":25546}}},{"type":"text","value":" this will prevent you from accessing the global object with ","position":{"start":{"line":587,"column":46,"offset":25546},"end":{"line":587,"column":107,"offset":25607}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":587,"column":107,"offset":25607},"end":{"line":587,"column":113,"offset":25613}}},{"type":"text","value":" in functions, so if you try to call ","position":{"start":{"line":587,"column":113,"offset":25613},"end":{"line":587,"column":150,"offset":25650}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":587,"column":150,"offset":25650},"end":{"line":587,"column":156,"offset":25656}}},{"type":"text","value":" in the global context and change a value, you will get a type error, and the things you try to access will be undefined","position":{"start":{"line":587,"column":156,"offset":25656},"end":{"line":587,"column":276,"offset":25776}}}],"position":{"start":{"line":587,"column":1,"offset":25501},"end":{"line":587,"column":276,"offset":25776}}},{"type":"text","value":"\n"}],"position":{"start":{"line":587,"column":1,"offset":25501},"end":{"line":587,"column":276,"offset":25776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"POJOs","position":{"start":{"line":589,"column":5,"offset":25782},"end":{"line":589,"column":10,"offset":25787}}}],"position":{"start":{"line":589,"column":1,"offset":25778},"end":{"line":589,"column":10,"offset":25787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1. Label variables as either Primitive vs. Reference","position":{"start":{"line":591,"column":6,"offset":25794},"end":{"line":591,"column":58,"offset":25846}}}],"position":{"start":{"line":591,"column":1,"offset":25789},"end":{"line":591,"column":58,"offset":25846}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.","position":{"start":{"line":593,"column":1,"offset":25848},"end":{"line":593,"column":240,"offset":26087}}}],"position":{"start":{"line":593,"column":1,"offset":25848},"end":{"line":593,"column":240,"offset":26087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Boolean - Primitive","position":{"start":{"line":595,"column":3,"offset":26091},"end":{"line":595,"column":22,"offset":26110}}}],"position":{"start":{"line":595,"column":1,"offset":26089},"end":{"line":595,"column":22,"offset":26110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Null - Primitive","position":{"start":{"line":596,"column":3,"offset":26113},"end":{"line":596,"column":19,"offset":26129}}}],"position":{"start":{"line":596,"column":1,"offset":26111},"end":{"line":596,"column":19,"offset":26129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Undefined - Primitive","position":{"start":{"line":597,"column":3,"offset":26132},"end":{"line":597,"column":24,"offset":26153}}}],"position":{"start":{"line":597,"column":1,"offset":26130},"end":{"line":597,"column":24,"offset":26153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Number - Primitive","position":{"start":{"line":598,"column":3,"offset":26156},"end":{"line":598,"column":21,"offset":26174}}}],"position":{"start":{"line":598,"column":1,"offset":26154},"end":{"line":598,"column":21,"offset":26174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"String - Primitive","position":{"start":{"line":599,"column":3,"offset":26177},"end":{"line":599,"column":21,"offset":26195}}}],"position":{"start":{"line":599,"column":1,"offset":26175},"end":{"line":599,"column":21,"offset":26195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array - Reference","position":{"start":{"line":600,"column":3,"offset":26198},"end":{"line":600,"column":20,"offset":26215}}}],"position":{"start":{"line":600,"column":1,"offset":26196},"end":{"line":600,"column":20,"offset":26215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Object - Reference","position":{"start":{"line":601,"column":3,"offset":26218},"end":{"line":601,"column":21,"offset":26236}}}],"position":{"start":{"line":601,"column":1,"offset":26216},"end":{"line":601,"column":21,"offset":26236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Function - Reference","position":{"start":{"line":602,"column":3,"offset":26239},"end":{"line":602,"column":23,"offset":26259}}}],"position":{"start":{"line":602,"column":1,"offset":26237},"end":{"line":602,"column":23,"offset":26259}}},{"type":"text","value":"\n"}],"position":{"start":{"line":595,"column":1,"offset":26089},"end":{"line":602,"column":23,"offset":26259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2. Identify when to use . vs ","position":{"start":{"line":604,"column":6,"offset":26266},"end":{"line":604,"column":35,"offset":26295}}},{"type":"text","value":"[","position":{"start":{"line":604,"column":35,"offset":26295},"end":{"line":604,"column":37,"offset":26297}}},{"type":"text","value":"]","position":{"start":{"line":604,"column":37,"offset":26297},"end":{"line":604,"column":39,"offset":26299}}},{"type":"text","value":" when accessing values of an object","position":{"start":{"line":604,"column":39,"offset":26299},"end":{"line":604,"column":74,"offset":26334}}}],"position":{"start":{"line":604,"column":1,"offset":26261},"end":{"line":604,"column":74,"offset":26334}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Choose the square brackets property accessor when the property name is determined at</span>\n<span class=\"token comment\">// runtime, or if the property name is not a valid identifier</span>\n<span class=\"token keyword\">let</span> myKey <span class=\"token operator\">=</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>myKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Choose the dot property accessor when the property name is known ahead of time.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":606,"column":1,"offset":26336},"end":{"line":617,"column":4,"offset":26679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3. Write an object literal with a variable key using interpolation","position":{"start":{"line":619,"column":6,"offset":26686},"end":{"line":619,"column":72,"offset":26752}}}],"position":{"start":{"line":619,"column":1,"offset":26681},"end":{"line":619,"column":72,"offset":26752}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> keyName <span class=\"token operator\">=</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the key is not known, you can use an alternative `[]` syntax for</span>\n<span class=\"token comment\">// object initialization only</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>keyName<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":621,"column":1,"offset":26754},"end":{"line":629,"column":4,"offset":26937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"4. Use the obj","position":{"start":{"line":631,"column":6,"offset":26944},"end":{"line":631,"column":20,"offset":26958}}},{"type":"text","value":"[","position":{"start":{"line":631,"column":20,"offset":26958},"end":{"line":631,"column":22,"offset":26960}}},{"type":"text","value":"key","position":{"start":{"line":631,"column":22,"offset":26960},"end":{"line":631,"column":25,"offset":26963}}},{"type":"text","value":"]","position":{"start":{"line":631,"column":25,"offset":26963},"end":{"line":631,"column":27,"offset":26965}}},{"type":"text","value":" !== undefined pattern to check if a given variable that contains a key exists in an object","position":{"start":{"line":631,"column":27,"offset":26965},"end":{"line":631,"column":118,"offset":27056}}}],"position":{"start":{"line":631,"column":1,"offset":26939},"end":{"line":631,"column":118,"offset":27056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":633,"column":1,"offset":27058},"end":{"line":633,"column":4,"offset":27061}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// obj[key] !== undefined</span>\n    <span class=\"token comment\">// or:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> course <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bootcamp</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lambda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">course</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bootcamp Prep'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">,</span> <span class=\"token string\">'course'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>","position":{"start":{"line":636,"column":1,"offset":27064},"end":{"line":649,"column":4,"offset":27352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"5. Utilize Object.keys and Object.values in a function","position":{"start":{"line":651,"column":6,"offset":27359},"end":{"line":651,"column":60,"offset":27413}}}],"position":{"start":{"line":651,"column":1,"offset":27354},"end":{"line":651,"column":60,"offset":27413}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":653,"column":1,"offset":27415},"end":{"line":653,"column":4,"offset":27418}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printValues</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'Strelka'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dog2</span><span class=\"token operator\">:</span> <span class=\"token string\">'Belka'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'Strelka'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dog2</span><span class=\"token operator\">:</span> <span class=\"token string\">'Belka'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":656,"column":1,"offset":27421},"end":{"line":670,"column":4,"offset":27687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"6. Iterate through an object using a for in loop","position":{"start":{"line":672,"column":6,"offset":27694},"end":{"line":672,"column":54,"offset":27742}}}],"position":{"start":{"line":672,"column":1,"offset":27689},"end":{"line":672,"column":54,"offset":27742}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sergey'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'hockey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":674,"column":1,"offset":27744},"end":{"line":683,"column":4,"offset":27908}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments","position":{"start":{"line":685,"column":6,"offset":27915},"end":{"line":685,"column":98,"offset":28007}}}],"position":{"start":{"line":685,"column":1,"offset":27910},"end":{"line":685,"column":98,"offset":28007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":687,"column":1,"offset":28009},"end":{"line":687,"column":4,"offset":28012}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>otherNums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherNums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 14</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0</span></code></pre></div>","position":{"start":{"line":690,"column":1,"offset":28015},"end":{"line":707,"column":4,"offset":28325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"8. Use ...spread syntax for Object literals and Array literals","position":{"start":{"line":709,"column":6,"offset":28332},"end":{"line":709,"column":68,"offset":28394}}}],"position":{"start":{"line":709,"column":1,"offset":28327},"end":{"line":709,"column":68,"offset":28394}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> numArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> moreNums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>numArray<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moreNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> shoe <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newShoe <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>shoe<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Nike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newShoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnewShoe<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newShoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":711,"column":1,"offset":28396},"end":{"line":725,"column":4,"offset":28678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"9. Destructure an array to reference specific elements","position":{"start":{"line":727,"column":6,"offset":28685},"end":{"line":727,"column":60,"offset":28739}}}],"position":{"start":{"line":727,"column":1,"offset":28680},"end":{"line":727,"column":60,"offset":28739}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":729,"column":1,"offset":28741},"end":{"line":735,"column":4,"offset":28828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"10. Destructure an object to reference specific values","position":{"start":{"line":737,"column":6,"offset":28835},"end":{"line":737,"column":60,"offset":28889}}}],"position":{"start":{"line":737,"column":1,"offset":28830},"end":{"line":737,"column":60,"offset":28889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ian'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">instruments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'synth'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guitar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">siblings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">brothers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alistair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">sisters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Meghan'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">instruments</span><span class=\"token operator\">:</span> musical_instruments<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">siblings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> sisters <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> me<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>musical_instruments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sisters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":739,"column":1,"offset":28891},"end":{"line":759,"column":4,"offset":29227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array","position":{"start":{"line":761,"column":6,"offset":29234},"end":{"line":761,"column":139,"offset":29367}}}],"position":{"start":{"line":761,"column":1,"offset":29229},"end":{"line":761,"column":139,"offset":29367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":763,"column":1,"offset":29369},"end":{"line":763,"column":4,"offset":29372}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> inputString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">accum<span class=\"token punctuation\">,</span> el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token keyword\">in</span> accum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> accum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":766,"column":1,"offset":29375},"end":{"line":783,"column":4,"offset":29734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":785,"column":1,"offset":29736},"end":{"line":785,"column":4,"offset":29739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Review of Concepts","position":{"start":{"line":787,"column":5,"offset":29745},"end":{"line":787,"column":23,"offset":29763}}}],"position":{"start":{"line":787,"column":1,"offset":29741},"end":{"line":787,"column":23,"offset":29763}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1. Identify the difference between const, let, and var declarations","position":{"start":{"line":789,"column":6,"offset":29770},"end":{"line":789,"column":73,"offset":29837}}}],"position":{"start":{"line":789,"column":1,"offset":29765},"end":{"line":789,"column":73,"offset":29837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2. Explain the difference between const, let, and var declarations","position":{"start":{"line":791,"column":6,"offset":29844},"end":{"line":791,"column":72,"offset":29910}}}],"position":{"start":{"line":791,"column":1,"offset":29839},"end":{"line":791,"column":72,"offset":29910}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":793,"column":1,"offset":29912},"end":{"line":796,"column":4,"offset":29937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":798,"column":3,"offset":29941},"end":{"line":798,"column":8,"offset":29946}}},{"type":"text","value":" is the historical keyword used for variable declaration.","position":{"start":{"line":798,"column":8,"offset":29946},"end":{"line":798,"column":65,"offset":30003}}}],"position":{"start":{"line":798,"column":1,"offset":29939},"end":{"line":798,"column":65,"offset":30003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":799,"column":3,"offset":30006},"end":{"line":799,"column":8,"offset":30011}}},{"type":"text","value":" declares variables in function scope, or global scope if not inside a function.","position":{"start":{"line":799,"column":8,"offset":30011},"end":{"line":799,"column":88,"offset":30091}}}],"position":{"start":{"line":799,"column":1,"offset":30004},"end":{"line":799,"column":88,"offset":30091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We consider ","position":{"start":{"line":800,"column":3,"offset":30094},"end":{"line":800,"column":15,"offset":30106}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":800,"column":15,"offset":30106},"end":{"line":800,"column":20,"offset":30111}}},{"type":"text","value":" to be ","position":{"start":{"line":800,"column":20,"offset":30111},"end":{"line":800,"column":27,"offset":30118}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"deprecated","position":{"start":{"line":800,"column":28,"offset":30119},"end":{"line":800,"column":38,"offset":30129}}}],"position":{"start":{"line":800,"column":27,"offset":30118},"end":{"line":800,"column":39,"offset":30130}}},{"type":"text","value":" and it is never used in this course.","position":{"start":{"line":800,"column":39,"offset":30130},"end":{"line":800,"column":76,"offset":30167}}}],"position":{"start":{"line":800,"column":1,"offset":30092},"end":{"line":800,"column":76,"offset":30167}}},{"type":"text","value":"\n"}],"position":{"start":{"line":798,"column":1,"offset":29939},"end":{"line":800,"column":76,"offset":30167}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":802,"column":1,"offset":30169},"end":{"line":805,"column":4,"offset":30194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":807,"column":3,"offset":30198},"end":{"line":807,"column":8,"offset":30203}}},{"type":"text","value":" is the keyword we use most often for variable declaration.","position":{"start":{"line":807,"column":8,"offset":30203},"end":{"line":807,"column":67,"offset":30262}}}],"position":{"start":{"line":807,"column":1,"offset":30196},"end":{"line":807,"column":67,"offset":30262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":808,"column":3,"offset":30265},"end":{"line":808,"column":8,"offset":30270}}},{"type":"text","value":" declares variables in block scope.","position":{"start":{"line":808,"column":8,"offset":30270},"end":{"line":808,"column":43,"offset":30305}}}],"position":{"start":{"line":808,"column":1,"offset":30263},"end":{"line":808,"column":43,"offset":30305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"variables declared with ","position":{"start":{"line":809,"column":3,"offset":30308},"end":{"line":809,"column":27,"offset":30332}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":809,"column":27,"offset":30332},"end":{"line":809,"column":32,"offset":30337}}},{"type":"text","value":" are re-assignable.","position":{"start":{"line":809,"column":32,"offset":30337},"end":{"line":809,"column":51,"offset":30356}}}],"position":{"start":{"line":809,"column":1,"offset":30306},"end":{"line":809,"column":51,"offset":30356}}},{"type":"text","value":"\n"}],"position":{"start":{"line":807,"column":1,"offset":30196},"end":{"line":809,"column":51,"offset":30356}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":811,"column":1,"offset":30358},"end":{"line":814,"column":4,"offset":30385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":816,"column":3,"offset":30389},"end":{"line":816,"column":10,"offset":30396}}},{"type":"text","value":" is a specialized form of ","position":{"start":{"line":816,"column":10,"offset":30396},"end":{"line":816,"column":36,"offset":30422}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":816,"column":36,"offset":30422},"end":{"line":816,"column":41,"offset":30427}}},{"type":"text","value":" that can only be used to ","position":{"start":{"line":816,"column":41,"offset":30427},"end":{"line":816,"column":67,"offset":30453}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"initialize","position":{"start":{"line":816,"column":69,"offset":30455},"end":{"line":816,"column":79,"offset":30465}}}],"position":{"start":{"line":816,"column":67,"offset":30453},"end":{"line":816,"column":81,"offset":30467}}},{"type":"text","value":" a variable.","position":{"start":{"line":816,"column":81,"offset":30467},"end":{"line":816,"column":93,"offset":30479}}}],"position":{"start":{"line":816,"column":1,"offset":30387},"end":{"line":816,"column":93,"offset":30479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Except when it is declared, you cannot assign to a ","position":{"start":{"line":817,"column":3,"offset":30482},"end":{"line":817,"column":54,"offset":30533}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":817,"column":54,"offset":30533},"end":{"line":817,"column":61,"offset":30540}}},{"type":"text","value":" variable.","position":{"start":{"line":817,"column":61,"offset":30540},"end":{"line":817,"column":71,"offset":30550}}}],"position":{"start":{"line":817,"column":1,"offset":30480},"end":{"line":817,"column":71,"offset":30550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":818,"column":3,"offset":30553},"end":{"line":818,"column":10,"offset":30560}}},{"type":"text","value":" scopes variables the same way that ","position":{"start":{"line":818,"column":10,"offset":30560},"end":{"line":818,"column":46,"offset":30596}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":818,"column":46,"offset":30596},"end":{"line":818,"column":51,"offset":30601}}},{"type":"text","value":" does.","position":{"start":{"line":818,"column":51,"offset":30601},"end":{"line":818,"column":57,"offset":30607}}}],"position":{"start":{"line":818,"column":1,"offset":30551},"end":{"line":818,"column":57,"offset":30607}}},{"type":"text","value":"\n"}],"position":{"start":{"line":816,"column":1,"offset":30387},"end":{"line":818,"column":57,"offset":30607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining","position":{"start":{"line":820,"column":6,"offset":30614},"end":{"line":820,"column":116,"offset":30724}}}],"position":{"start":{"line":820,"column":1,"offset":30609},"end":{"line":820,"column":116,"offset":30724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":822,"column":1,"offset":30726},"end":{"line":822,"column":15,"offset":30740}}},{"type":"raw","value":"<code class=\"language-text\">run</code>","position":{"start":{"line":822,"column":15,"offset":30740},"end":{"line":822,"column":20,"offset":30745}}},{"type":"text","value":" function, inside which ","position":{"start":{"line":822,"column":20,"offset":30745},"end":{"line":822,"column":44,"offset":30769}}},{"type":"raw","value":"<code class=\"language-text\">foo</code>","position":{"start":{"line":822,"column":44,"offset":30769},"end":{"line":822,"column":49,"offset":30774}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":49,"offset":30774},"end":{"line":822,"column":54,"offset":30779}}},{"type":"raw","value":"<code class=\"language-text\">bar</code>","position":{"start":{"line":822,"column":54,"offset":30779},"end":{"line":822,"column":59,"offset":30784}}},{"type":"text","value":" have ","position":{"start":{"line":822,"column":59,"offset":30784},"end":{"line":822,"column":65,"offset":30790}}},{"type":"raw","value":"<code class=\"language-text\">function scope</code>","position":{"start":{"line":822,"column":65,"offset":30790},"end":{"line":822,"column":81,"offset":30806}}},{"type":"text","value":". ","position":{"start":{"line":822,"column":81,"offset":30806},"end":{"line":822,"column":83,"offset":30808}}},{"type":"raw","value":"<code class=\"language-text\">i</code>","position":{"start":{"line":822,"column":83,"offset":30808},"end":{"line":822,"column":86,"offset":30811}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":86,"offset":30811},"end":{"line":822,"column":91,"offset":30816}}},{"type":"raw","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":822,"column":91,"offset":30816},"end":{"line":822,"column":96,"offset":30821}}},{"type":"text","value":" are scoped to the block expression.","position":{"start":{"line":822,"column":96,"offset":30821},"end":{"line":822,"column":132,"offset":30857}}}],"position":{"start":{"line":822,"column":1,"offset":30726},"end":{"line":822,"column":132,"offset":30857}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// function and block scope in this example</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token string\">'Bazz'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":824,"column":1,"offset":30859},"end":{"line":843,"column":4,"offset":31144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice that referencing ","position":{"start":{"line":845,"column":1,"offset":31146},"end":{"line":845,"column":25,"offset":31170}}},{"type":"raw","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":845,"column":25,"offset":31170},"end":{"line":845,"column":30,"offset":31175}}},{"type":"text","value":" from outside it's block results in JavaScript throwing a ReferenceError.","position":{"start":{"line":845,"column":30,"offset":31175},"end":{"line":845,"column":103,"offset":31248}}}],"position":{"start":{"line":845,"column":1,"offset":31146},"end":{"line":845,"column":103,"offset":31248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":847,"column":1,"offset":31250},"end":{"line":847,"column":15,"offset":31264}}},{"type":"raw","value":"<code class=\"language-text\">run</code>","position":{"start":{"line":847,"column":15,"offset":31264},"end":{"line":847,"column":20,"offset":31269}}},{"type":"text","value":" function, inside of which ","position":{"start":{"line":847,"column":20,"offset":31269},"end":{"line":847,"column":47,"offset":31296}}},{"type":"raw","value":"<code class=\"language-text\">foo</code>","position":{"start":{"line":847,"column":47,"offset":31296},"end":{"line":847,"column":52,"offset":31301}}},{"type":"text","value":" has ","position":{"start":{"line":847,"column":52,"offset":31301},"end":{"line":847,"column":57,"offset":31306}}},{"type":"raw","value":"<code class=\"language-text\">function scope</code>","position":{"start":{"line":847,"column":57,"offset":31306},"end":{"line":847,"column":73,"offset":31322}}},{"type":"text","value":".","position":{"start":{"line":847,"column":73,"offset":31322},"end":{"line":847,"column":74,"offset":31323}}}],"position":{"start":{"line":847,"column":1,"offset":31250},"end":{"line":847,"column":74,"offset":31323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":849,"column":1,"offset":31325},"end":{"line":849,"column":4,"offset":31328}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Foo</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":852,"column":1,"offset":31331},"end":{"line":863,"column":4,"offset":31457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":865,"column":1,"offset":31459},"end":{"line":865,"column":15,"offset":31473}}},{"type":"raw","value":"<code class=\"language-text\">func1</code>","position":{"start":{"line":865,"column":15,"offset":31473},"end":{"line":865,"column":22,"offset":31480}}},{"type":"text","value":" function and it's nested scopes.","position":{"start":{"line":865,"column":22,"offset":31480},"end":{"line":865,"column":55,"offset":31513}}}],"position":{"start":{"line":865,"column":1,"offset":31459},"end":{"line":865,"column":55,"offset":31513}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// global scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// func1 scope</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// func2 scope</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// func3 scope</span>\n\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":867,"column":1,"offset":31515},"end":{"line":883,"column":4,"offset":31773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"6. Implement a closure and explain how the closure effects scope","position":{"start":{"line":885,"column":6,"offset":31780},"end":{"line":885,"column":70,"offset":31844}}}],"position":{"start":{"line":885,"column":1,"offset":31775},"end":{"line":885,"column":70,"offset":31844}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 4;</span></code></pre></div>","position":{"start":{"line":887,"column":1,"offset":31846},"end":{"line":898,"column":4,"offset":32025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"4. Define an arrow function","position":{"start":{"line":900,"column":6,"offset":32032},"end":{"line":900,"column":33,"offset":32059}}}],"position":{"start":{"line":900,"column":1,"offset":32027},"end":{"line":900,"column":33,"offset":32059}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">returnValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> val<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":902,"column":1,"offset":32061},"end":{"line":905,"column":4,"offset":32107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This simple construct will create a function that accepts ","position":{"start":{"line":907,"column":1,"offset":32109},"end":{"line":907,"column":59,"offset":32167}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":907,"column":59,"offset":32167},"end":{"line":907,"column":64,"offset":32172}}},{"type":"text","value":" as a parameter, and returns ","position":{"start":{"line":907,"column":64,"offset":32172},"end":{"line":907,"column":93,"offset":32201}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":907,"column":93,"offset":32201},"end":{"line":907,"column":98,"offset":32206}}},{"type":"text","value":" immediately. We do not need to type ","position":{"start":{"line":907,"column":98,"offset":32206},"end":{"line":907,"column":135,"offset":32243}}},{"type":"raw","value":"<code class=\"language-text\">return val</code>","position":{"start":{"line":907,"column":135,"offset":32243},"end":{"line":907,"column":147,"offset":32255}}},{"type":"text","value":", because this is a single-line function.","position":{"start":{"line":907,"column":147,"offset":32255},"end":{"line":907,"column":188,"offset":32296}}}],"position":{"start":{"line":907,"column":1,"offset":32109},"end":{"line":907,"column":188,"offset":32296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identically, we could write","position":{"start":{"line":909,"column":1,"offset":32298},"end":{"line":909,"column":28,"offset":32325}}}],"position":{"start":{"line":909,"column":1,"offset":32298},"end":{"line":909,"column":28,"offset":32325}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">returnValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":911,"column":1,"offset":32327},"end":{"line":916,"column":4,"offset":32389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"5. Given an arrow function, deduce the value of ","position":{"start":{"line":918,"column":6,"offset":32396},"end":{"line":918,"column":54,"offset":32444}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":918,"column":54,"offset":32444},"end":{"line":918,"column":60,"offset":32450}}},{"type":"text","value":" without executing the code","position":{"start":{"line":918,"column":60,"offset":32450},"end":{"line":918,"column":87,"offset":32477}}}],"position":{"start":{"line":918,"column":1,"offset":32391},"end":{"line":918,"column":87,"offset":32477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":920,"column":1,"offset":32479},"end":{"line":920,"column":4,"offset":32482}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fDAdder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> ele<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fDAdder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":923,"column":1,"offset":32485},"end":{"line":936,"column":4,"offset":32645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we use a ","position":{"start":{"line":938,"column":1,"offset":32647},"end":{"line":938,"column":13,"offset":32659}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"function declaration","position":{"start":{"line":938,"column":14,"offset":32660},"end":{"line":938,"column":34,"offset":32680}}}],"position":{"start":{"line":938,"column":13,"offset":32659},"end":{"line":938,"column":35,"offset":32681}}},{"type":"text","value":" style function, the ","position":{"start":{"line":938,"column":35,"offset":32681},"end":{"line":938,"column":56,"offset":32702}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":938,"column":56,"offset":32702},"end":{"line":938,"column":62,"offset":32708}}},{"type":"text","value":" variable is set to the ","position":{"start":{"line":938,"column":62,"offset":32708},"end":{"line":938,"column":86,"offset":32732}}},{"type":"raw","value":"<code class=\"language-text\">global</code>","position":{"start":{"line":938,"column":86,"offset":32732},"end":{"line":938,"column":94,"offset":32740}}},{"type":"text","value":" object ","position":{"start":{"line":938,"column":94,"offset":32740},"end":{"line":938,"column":102,"offset":32748}}},{"type":"text","value":"(","position":{"start":{"line":938,"column":102,"offset":32748},"end":{"line":938,"column":104,"offset":32750}}},{"type":"text","value":"i.e. ","position":{"start":{"line":938,"column":104,"offset":32750},"end":{"line":938,"column":109,"offset":32755}}},{"type":"raw","value":"<code class=\"language-text\">Object [global]</code>","position":{"start":{"line":938,"column":109,"offset":32755},"end":{"line":938,"column":126,"offset":32772}}},{"type":"text","value":" in Node.JS and ","position":{"start":{"line":938,"column":126,"offset":32772},"end":{"line":938,"column":142,"offset":32788}}},{"type":"raw","value":"<code class=\"language-text\">Window</code>","position":{"start":{"line":938,"column":142,"offset":32788},"end":{"line":938,"column":150,"offset":32796}}},{"type":"text","value":" in your browser","position":{"start":{"line":938,"column":150,"offset":32796},"end":{"line":938,"column":166,"offset":32812}}},{"type":"text","value":")","position":{"start":{"line":938,"column":166,"offset":32812},"end":{"line":938,"column":168,"offset":32814}}},{"type":"text","value":".","position":{"start":{"line":938,"column":168,"offset":32814},"end":{"line":938,"column":169,"offset":32815}}}],"position":{"start":{"line":938,"column":1,"offset":32647},"end":{"line":938,"column":169,"offset":32815}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":940,"column":1,"offset":32817},"end":{"line":947,"column":4,"offset":32945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example, we use a ","position":{"start":{"line":949,"column":1,"offset":32947},"end":{"line":949,"column":27,"offset":32973}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"fat arrow","position":{"start":{"line":949,"column":28,"offset":32974},"end":{"line":949,"column":37,"offset":32983}}}],"position":{"start":{"line":949,"column":27,"offset":32973},"end":{"line":949,"column":38,"offset":32984}}},{"type":"text","value":" style function. Note that when we declare a funciton like this ","position":{"start":{"line":949,"column":38,"offset":32984},"end":{"line":949,"column":102,"offset":33048}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":949,"column":102,"offset":33048},"end":{"line":949,"column":108,"offset":33054}}},{"type":"text","value":" becomes","position":{"start":{"line":949,"column":108,"offset":33054},"end":{"line":949,"column":116,"offset":33062}}}],"position":{"start":{"line":949,"column":1,"offset":32947},"end":{"line":949,"column":116,"offset":33062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"7. Define a method that references this on an object literal","position":{"start":{"line":951,"column":6,"offset":33069},"end":{"line":951,"column":66,"offset":33129}}}],"position":{"start":{"line":951,"column":1,"offset":33064},"end":{"line":951,"column":66,"offset":33129}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pika'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Chu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getPokeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fullname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pokemon<span class=\"token punctuation\">.</span><span class=\"token function\">getPokeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":953,"column":1,"offset":33131},"end":{"line":965,"column":4,"offset":33370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"8. Utilize the built in Function","position":{"start":{"line":967,"column":6,"offset":33377},"end":{"line":967,"column":38,"offset":33409}}},{"type":"text","value":"#","position":{"start":{"line":967,"column":38,"offset":33409},"end":{"line":967,"column":40,"offset":33411}}},{"type":"text","value":"bind on a callback to maintain the context of ","position":{"start":{"line":967,"column":40,"offset":33411},"end":{"line":967,"column":86,"offset":33457}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":967,"column":86,"offset":33457},"end":{"line":967,"column":92,"offset":33463}}}],"position":{"start":{"line":967,"column":1,"offset":33372},"end":{"line":967,"column":92,"offset":33463}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pika'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Chu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getPokeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fullname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logPokemon <span class=\"token operator\">=</span> pokemon<span class=\"token punctuation\">.</span><span class=\"token function\">getPokename</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pokemon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">logPokemon</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sushi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'algorithms'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pika Chu loves sushi and algorithms</span></code></pre></div>","position":{"start":{"line":969,"column":1,"offset":33465},"end":{"line":983,"column":4,"offset":33797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"9. Given a code snippet, identify what ","position":{"start":{"line":985,"column":6,"offset":33804},"end":{"line":985,"column":45,"offset":33843}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":985,"column":45,"offset":33843},"end":{"line":985,"column":51,"offset":33849}}},{"type":"text","value":" refers to","position":{"start":{"line":985,"column":51,"offset":33849},"end":{"line":985,"column":61,"offset":33859}}}],"position":{"start":{"line":985,"column":1,"offset":33799},"end":{"line":985,"column":61,"offset":33859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":987,"column":1,"offset":33861},"end":{"line":987,"column":4,"offset":33864}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this.name = name;</span>\n    <span class=\"token comment\">// let that = this;</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// console.log(this); // => Window</span>\n        <span class=\"token comment\">// console.log(that); // => [Function] => Person</span>\n        <span class=\"token comment\">// this.sayName(); // => no method error</span>\n        that<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":990,"column":1,"offset":33867},"end":{"line":1011,"column":4,"offset":34280}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1012,"column":1,"offset":34281}}}}