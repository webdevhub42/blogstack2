{"expireTime":9007200911206587000,"key":"transformer-remark-markdown-html-4128c24c5ede2bfd1c57def144d6913d-gatsby-remark-prismjs-","val":"<h2>Python Notes</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><a href=\"https://lambda-6.gitbook.io/python/\">https://lambda-6.gitbook.io/python/</a></th>\n<th align=\"left\">This Gitbook As A Website</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<blockquote>\n<hr>\n<p><a href=\"https://ds-unit-5-lambda.netlify.app/\"><strong><em>https://ds-unit-5-lambda.netlify.app</em></strong></a></p>\n<p><strong><em>/</em></strong></p>\n</blockquote>\n<blockquote>\n<hr>\n<p><a href=\"https://bryan-guner.gitbook.io/datastructures-in-pytho/\"><strong><em>https://bryan-guner.gitbook.io/datastructures-in-pytho/</em></strong></a></p>\n<hr>\n</blockquote>\n<blockquote>\n<hr>\n<hr>\n<p><a href=\"https://replit.com/@bgoonz/DATASTRUCPYTHONNOTES-2\"><strong><em>https://replit.com/@bgoonz/DATASTRUCPYTHONNOTES-2</em></strong></a></p>\n</blockquote>\n<p><strong>Keywords</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">**</span><span class=\"token operator\">*</span><span class=\"token keyword\">and</span>       <span class=\"token keyword\">del</span>       <span class=\"token keyword\">for</span>       <span class=\"token keyword\">is</span>        <span class=\"token keyword\">raise</span>\n<span class=\"token keyword\">assert</span>    <span class=\"token keyword\">elif</span>      <span class=\"token keyword\">from</span>      <span class=\"token keyword\">lambda</span>    <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">break</span>     <span class=\"token keyword\">else</span>      <span class=\"token keyword\">global</span>    <span class=\"token keyword\">not</span>       <span class=\"token keyword\">try</span>\n<span class=\"token keyword\">class</span>     <span class=\"token class-name\">except</span>    <span class=\"token keyword\">if</span>        <span class=\"token keyword\">or</span>        <span class=\"token keyword\">while</span>\n<span class=\"token keyword\">continue</span>  <span class=\"token keyword\">exec</span>      <span class=\"token keyword\">import</span>    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">def</span>       <span class=\"token keyword\">finally</span>   <span class=\"token keyword\">in</span>        <span class=\"token keyword\">print</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span></code></pre></div>\n<p><a href=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c25bca5-0198-42ad-aa8b-7668cb904571/py-notes.pdf\">py-notes.pdf</a></p>\n<p><a href=\"https://bryan-guner.gitbook.io/notesarchive/\">https://bryan-guner.gitbook.io/notesarchive/</a></p>\n<h2>DOCS:</h2>\n<p><a href=\"https://docs.python.org/3/\">https://docs.python.org/3/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"&lt;---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_hi<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Should get the print inside the function, then None</span>\n<span class=\"token comment\"># Boolean Values</span>\n<span class=\"token comment\"># Work the same as in JS, except they are title case: True and False</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nb <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token comment\"># Logical Operators</span>\n<span class=\"token comment\"># ! = not, || = or, &amp;&amp; = and</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Truthiness - Everything is True except...</span>\n<span class=\"token comment\"># False - None, False, '', [], (), set(), range(0)</span>\n<span class=\"token comment\"># Number Values</span>\n<span class=\"token comment\"># Integers are numbers without a floating decimal point</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># type returns the type of whatever argument you pass in</span>\n<span class=\"token comment\"># Floating Point values are numbers with a floating decimal point</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Type Casting</span>\n<span class=\"token comment\"># You can convert between ints and floats (along with other types...)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># If you convert a float to an int, it will truncate the decimal</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Python does not automatically convert types like JS</span>\n<span class=\"token comment\"># print(17.0 + ' heyooo ' + 17)  # TypeError</span>\n<span class=\"token comment\"># Arithmetic Operators</span>\n<span class=\"token comment\"># ** - exponent (comparable to Math.pow(num, pow))</span>\n<span class=\"token comment\"># // - integer division</span>\n<span class=\"token comment\"># There is no ++ or -- in Python</span>\n<span class=\"token comment\"># String Values</span>\n<span class=\"token comment\"># We can use single quotes, double quotes, or f'' for string formats</span>\n<span class=\"token comment\"># We can use triple single quotes for multiline strings</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"This here's a story\nAll about how\nMy life got twist\nTurned upside down\n\"\"\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Three double quotes can also be used, but we typically reserve these for</span>\n<span class=\"token comment\"># multi-line comments and function docstrings (refer to lines 6-9)(Nice :D)</span>\n<span class=\"token comment\"># We use len() to get the length of something</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7 characters</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ho\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ho\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5 list items</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8 set items</span>\n<span class=\"token comment\"># We can index into strings, list, etc..self.</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"Bryan\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B, r, y, a, n</span>\n<span class=\"token comment\"># We can index starting from the end as well, with negatives</span>\noccupation <span class=\"token operator\">=</span> <span class=\"token string\">\"Full Stack Software Engineer\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># e</span>\n<span class=\"token comment\"># We can also get ranges in the index with the [start:stop:step] syntax</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># step and stop are optional, stop is exclusive</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># beginning to end, every 4th letter</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Let's get weird with it!</span>\n<span class=\"token comment\"># NOTE: Indexing out of range will give you an IndexError</span>\n<span class=\"token comment\"># We can also get the index og things with the .index() method, similar to indexOf()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cole\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cole\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can count how many times a substring/item appears in something as well</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>occupation<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Now this here's a story all about how\nMy life got twist turned upside down\nI forget the rest but the the the potato\nsmells like the potato\"\"\"</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"the\"</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We concatenate the same as Javascript, but we can also multiply strings</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ha\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use format for a multitude of things, from spaces to decimal places</span>\nfirst_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bryan\"</span>\nlast_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Guner\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your name is {0} {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Useful String Methods</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># HELLO</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"lo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello There\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [Hello, There]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False,  must consist only of letters</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True, must consist of only letters and numbers</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3215235123\"</span><span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True, must be all numbers</span>\n<span class=\"token comment\"># True, must consist of only spaces/tabs/newlines</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       \\\\n     \"</span><span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># False, index 0 must be upper case and the rest lower</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan Guner\"</span><span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael Lee\"</span><span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True!</span>\n<span class=\"token comment\"># Duck Typing - If it walks like a duck, and talks like a duck, it must be a duck</span>\n<span class=\"token comment\"># Assignment - All like JS, but there are no special keywords like let or const</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nb <span class=\"token operator\">=</span> a\nc <span class=\"token operator\">=</span> <span class=\"token string\">\"heyoo\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"reassignment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G!\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Comparison Operators - Python uses the same equality operators as JS, but no ===</span>\n<span class=\"token comment\"># &lt; - Less than</span>\n<span class=\"token comment\"># > - Greater than</span>\n<span class=\"token comment\"># &lt;= - Less than or Equal</span>\n<span class=\"token comment\"># >= - Greater than or Equal</span>\n<span class=\"token comment\"># == - Equal to</span>\n<span class=\"token comment\"># != - Not equal to</span>\n<span class=\"token comment\"># is - Refers to exact same memory location</span>\n<span class=\"token comment\"># not - !</span>\n<span class=\"token comment\"># Precedence - Negative Signs(not) are applied first(part of each number)</span>\n<span class=\"token comment\">#            - Multiplication and Division(and) happen next</span>\n<span class=\"token comment\">#            - Addition and Subtraction(or) are the last step</span>\n<span class=\"token comment\">#  NOTE: Be careful when using not along with ==</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token comment\"># print(a == not b) # Syntax Error</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># This fixes it. Answer: False</span>\n<span class=\"token comment\"># Python does short-circuit evaluation</span>\n<span class=\"token comment\"># Assignment Operators - Mostly the same as JS except Python has **= and //= (int division)</span>\n<span class=\"token comment\"># Flow Control Statements - if, while, for</span>\n<span class=\"token comment\"># Note: Python smushes 'else if' into 'elif'!</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We don't get here\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nor here...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey there!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a string</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a range</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a list</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Looping over a dictionary</span>\nspam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"items\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hooo!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> spam<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Loop over a list of tuples and destructuring the values</span>\n<span class=\"token comment\"># Assuming spam.items returns a list of tuples each containing two items (k, v)</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> spam<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># While loops as long as the condition is True</span>\n<span class=\"token comment\">#  - Exit loop early with break</span>\n<span class=\"token comment\">#  - Exit iteration early with continue</span>\nspam <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sike That's the wrong Numba\"</span><span class=\"token punctuation\">)</span>\n    spam <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> spam <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">break</span>\n\n<span class=\"token comment\"># Functions - use def keyword to define a function in Python</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">printCopyright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Copyright 2021, Bgoonz\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span>\n\navg<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Calling it with keyword arguments, order does not matter</span>\navg<span class=\"token punctuation\">(</span>num2<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> num1<span class=\"token operator\">=</span><span class=\"token number\">1252</span><span class=\"token punctuation\">)</span>\nprintCopyright<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can give parameters default arguments like JS</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> saying<span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>saying<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ngreeting<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Hello Mike</span>\ngreeting<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bryan\"</span><span class=\"token punctuation\">,</span> saying<span class=\"token operator\">=</span><span class=\"token string\">\"Hello there...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># A common gotcha is using a mutable object for a default parameter</span>\n<span class=\"token comment\"># All invocations of the function reference the same mutable object</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">append_item</span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">,</span> item_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Will it obey and give us a new list?</span>\n    item_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item_list\n\n<span class=\"token comment\"># Uses same item list unless otherwise stated which is counterintuitive</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>append_item<span class=\"token punctuation\">(</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,</span>\n<span class=\"token comment\">#          it will throw an error</span>\n<span class=\"token comment\"># avg(1)  # TypeError</span>\n<span class=\"token comment\"># avg(1, 2, 2) # TypeError</span>\n<span class=\"token comment\"># ----------------------------------- DAY 2 ----------------------------------------</span>\n<span class=\"token comment\"># Functions - * to get rest of position arguments as tuple</span>\n<span class=\"token comment\">#           - ** to get rest of keyword arguments as a dictionary</span>\n<span class=\"token comment\"># Variable Length positional arguments</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># args is a tuple of the rest of the arguments</span>\n    total <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">+=</span> n\n    <span class=\"token keyword\">return</span> total\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># args is None, returns 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># args is (3, 4, 5, 6), returns 21</span>\n<span class=\"token comment\"># Variable Length Keyword Arguments</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_names_and_countries</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># kwargs is a dictionary of the rest of the keyword arguments</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\nprint_names_and_countries<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Hey there\"</span><span class=\"token punctuation\">,</span> Monica<span class=\"token operator\">=</span><span class=\"token string\">\"Sweden\"</span><span class=\"token punctuation\">,</span> Mike<span class=\"token operator\">=</span><span class=\"token string\">\"The United States\"</span><span class=\"token punctuation\">,</span> Mark<span class=\"token operator\">=</span><span class=\"token string\">\"China\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can combine all of these together</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">example2</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> kw_1<span class=\"token operator\">=</span><span class=\"token string\">\"cheese\"</span><span class=\"token punctuation\">,</span> kw_2<span class=\"token operator\">=</span><span class=\"token string\">\"horse\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># Lists are mutable arrays</span>\nempty_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nroomates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Beau\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Delynn\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># List built-in function makes a list too</span>\nspecials <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use 'in' to test if something is in the list, like 'includes' in JS</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Dictionaries - Similar to JS POJO's or Map, containing key value pairs</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>one<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> three<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Can use 'in' on dictionaries too (for keys)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Sets - Just like JS, unordered collection of distinct objects</span>\nbedroom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"bed\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"computer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clothes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"playstation 4\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")</span>\nschool_bag <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paper\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pencil\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pencil\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eraser\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>school_bag<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bedroom<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># We can use 'in' on sets as wel</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Tuples are immutable lists of items</span>\ntime_blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AM\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PM\"</span><span class=\"token punctuation\">)</span>\ncolors <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span>  <span class=\"token comment\"># Parenthesis not needed but encouraged</span>\n<span class=\"token comment\"># The tuple built-in function can be used to convert things to tuples</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'in' may be used on tuples as well</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token comment\"># Ranges are immutable lists of numbers, often used with for loops</span>\n<span class=\"token comment\">#   - start - default: 0, first number in sequence</span>\n<span class=\"token comment\">#   - stop - required, next number past last number in sequence</span>\n<span class=\"token comment\">#   - step - default: 1, difference between each number in sequence</span>\nrange1 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0,1,2,3,4]</span>\nrange2 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3,4]</span>\nrange3 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0,5,10,15,20]</span>\nrange4 <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># []</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range1<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Built-in functions:</span>\n<span class=\"token comment\"># Filter</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n\nfiltered <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>isOdd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> filtered<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"first way: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"list comprehension: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Map</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nupperCased <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>upperCased<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Sorted</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Notice uppercase comes before lowercase</span>\n<span class=\"token comment\"># Using a key function to control the sorting and make it case insensitive</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can also reverse the sort</span>\nsorted_items <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sonny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      key<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted_items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Enumerate creates a tuple with an index for what you're enumerating</span>\nquarters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Third\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fourth\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>quarters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>quarters<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Zip takes list and combines them as key value pairs, or really however you need</span>\nkeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">)</span>\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Buster\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cheetoh@johhnydepp.com\"</span><span class=\"token punctuation\">)</span>\nzipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can zip more than 2</span>\nx_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\ny_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nz_coords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncoords <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x_coords<span class=\"token punctuation\">,</span> y_coords<span class=\"token punctuation\">,</span> z_coords<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Len reports the length of strings along with list and any other object data type</span>\n<span class=\"token comment\"># doing this to save myself some typing</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_len</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nprint_len<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4 because there is a duplicate here (10)</span>\nprint_len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Max will return the max number in a given scenario</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1012</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Min</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Sum</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Any</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># All</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Dir returns all the attributes of an object including it's methods and dunder methods</span>\nuser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bob@bob.com\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Importing packages and modules</span>\n<span class=\"token comment\">#  - Module - A Python code in a file or directory</span>\n<span class=\"token comment\">#  - Package - A module which is a directory containing an __init__.py file</span>\n<span class=\"token comment\">#  - Submodule - A module which is contained within a package</span>\n<span class=\"token comment\">#  - Name - An exported function, class, or variable in a module</span>\n<span class=\"token comment\"># Unlike JS, modules export ALL names contained within them without any special export key</span>\n<span class=\"token comment\"># Assuming we have the following package with four submodules</span>\n<span class=\"token comment\">#  math</span>\n<span class=\"token comment\">#  |  __init__.py</span>\n<span class=\"token comment\">#  | addition.py</span>\n<span class=\"token comment\">#  | subtraction.py</span>\n<span class=\"token comment\">#  | multiplication.py</span>\n<span class=\"token comment\">#  | division.py</span>\n<span class=\"token comment\"># If we peek into the addition.py file we see there's an add function</span>\n<span class=\"token comment\"># addition.py</span>\n<span class=\"token comment\"># We can import 'add' from other places because it's a 'name' and is automatically exported</span>\n\n<span class=\"token comment\"># def add(num1, num2):</span>\n<span class=\"token comment\">#     return num1 + num2</span>\n\n<span class=\"token comment\"># Notice the . syntax because this package can import it's own submodules.</span>\n<span class=\"token comment\"># Our __init__.py has the following files</span>\n<span class=\"token comment\"># This imports the 'add' function</span>\n<span class=\"token comment\"># And now it's also re-exported in here as well</span>\n<span class=\"token comment\"># from .addition import add</span>\n<span class=\"token comment\"># These import and re-export the rest of the functions from the submodule</span>\n<span class=\"token comment\"># from .subtraction import subtract</span>\n<span class=\"token comment\"># from .division import divide</span>\n<span class=\"token comment\"># from .multiplication import multiply</span>\n<span class=\"token comment\"># So if we have a script.py and want to import add, we could do it many ways</span>\n<span class=\"token comment\"># This will load and execute the 'math/__init__.py' file and give</span>\n<span class=\"token comment\"># us an object with the exported names in 'math/__init__.py'</span>\n<span class=\"token comment\"># print(math.add(1,2))</span>\n<span class=\"token comment\"># This imports JUST the add from 'math/__init__.py'</span>\n<span class=\"token comment\"># from math import add</span>\n<span class=\"token comment\"># print(add(1, 2))</span>\n<span class=\"token comment\"># This skips importing from 'math/__init__.py' (although it still runs)</span>\n<span class=\"token comment\"># and imports directly from the addition.py file</span>\n<span class=\"token comment\"># from math.addition import add</span>\n<span class=\"token comment\"># This imports all the functions individually from 'math/__init__.py'</span>\n<span class=\"token comment\"># from math import add, subtract, multiply, divide</span>\n<span class=\"token comment\"># print(add(1, 2))</span>\n<span class=\"token comment\"># print(subtract(2, 1))</span>\n<span class=\"token comment\"># This imports 'add' renames it to 'add_some_numbers'</span>\n<span class=\"token comment\"># from math import add as add_some_numbers</span>\n<span class=\"token comment\"># --------------------------------------- DAY 3 ---------------------------------------</span>\n<span class=\"token comment\"># Classes, Methods, and Properties</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AngryBird</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Slots optimize property access and memory usage and prevent you</span>\n    <span class=\"token comment\"># from arbitrarily assigning new properties the instance</span>\n    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"_x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_y\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Constructor</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Doc String</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"</span>\n        <span class=\"token comment\"># Instance Variables</span>\n        self<span class=\"token punctuation\">.</span>_x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">=</span> y\n\n    <span class=\"token comment\"># Instance Method</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move_up_by</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">+=</span> delta\n\n    <span class=\"token comment\"># Getter</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_x\n\n    <span class=\"token comment\"># Setter</span>\n\n    <span class=\"token decorator annotation punctuation\">@x<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_x <span class=\"token operator\">=</span> value\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_y\n\n    <span class=\"token decorator annotation punctuation\">@y<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_y <span class=\"token operator\">=</span> value\n\n    <span class=\"token comment\"># Dunder Repr... called by 'print'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&lt;AngryBird (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>_x<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>_y<span class=\"token punctuation\">}</span></span><span class=\"token string\">)>\"</span></span>\n\n<span class=\"token comment\"># JS to Python Classes cheat table</span>\n<span class=\"token comment\">#        JS                    Python</span>\n<span class=\"token comment\">#   constructor()         def __init__(self):</span>\n<span class=\"token comment\">#      super()            super().__init__()</span>\n<span class=\"token comment\">#   this.property           self.property</span>\n<span class=\"token comment\">#    this.method            self.method()</span>\n<span class=\"token comment\"># method(arg1, arg2){}    def method(self, arg1, ...)</span>\n<span class=\"token comment\"># get someProperty(){}    @property</span>\n<span class=\"token comment\"># set someProperty(){}    @someProperty.setter</span>\n<span class=\"token comment\"># List Comprehensions are a way to transform a list from one format to another</span>\n<span class=\"token comment\">#  - Pythonic Alternative to using map or filter</span>\n<span class=\"token comment\">#  - Syntax of a list comprehension</span>\n<span class=\"token comment\">#     - new_list = [value loop condition]</span>\n<span class=\"token comment\"># Using a for loop</span>\nsquares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    squares<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># value = i ** 2</span>\n<span class=\"token comment\"># loop = for i in range(10)</span>\nsquares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"the rocket came back from mars\"</span>\nvowels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>character <span class=\"token keyword\">for</span> character <span class=\"token keyword\">in</span> sentence <span class=\"token keyword\">if</span> character <span class=\"token keyword\">in</span> <span class=\"token string\">\"aeiou\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>vowels<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># You can also use them on dictionaries. We can use the items() method</span>\n<span class=\"token comment\"># for the dictionary to loop through it getting the keys and values out at once</span>\nperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Corina\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.4</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># This loops through and capitalizes the first letter of all keys</span>\nnewPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> value <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2><strong>2.1.7 Indentation</strong></h2>\n<p>Leading whitespace (spaces and tabs) at the beginning of a logical line is used to compute the indentation level of the line, which in turn is used to determine the grouping of statements.</p>\n<p>First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line's indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.</p>\n<p><strong>Cross-platform compatibility note:</strong> because of the nature of text editors on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for the indentation in a single source file.</p>\n<p>A formfeed character may be present at the start of the line; it will be ignored for the indentation calculations above. Formfeed characters occurring elsewhere in the leading whitespace have an undefined effect (for instance, they may reset the space count to zero).</p>\n<p>The indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as follows.</p>\n<p>Before the first line of the file is read, a single zero is pushed on the stack; this will never be popped off again. The numbers pushed on the stack will always be strictly increasing from bottom to top. At the beginning of each logical line, the line's indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger, it is pushed on the stack, and one INDENT token is generated. If it is smaller, it must be one of the numbers occurring on the stack; all numbers on the stack that are larger are popped off, and for each number popped off a DEDENT token is generated. At the end of the file, a DEDENT token is generated for each number remaining on the stack that is larger than zero.</p>\n<p>Here is an example of a correctly (though confusingly) indented piece of Python code:</p>\n<p><code class=\"language-text\">def perm(l): # Compute the list of all permutations of l if len(l) &lt;= 1: return [l] r = [] for i in range(len(l)): s = l[:i] + l[i+1:] p = perm(s) for x in p: r.append(l[i:i+1] + x) return r</code></p>\n<p>The following example shows various indentation errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> `def perm(l):                       # error: first line indented\nfor i in range(len(l)):             # error: not indented\n    s = l[:i] + l[i+1:]\n        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n        for x in p:\n                r.append(l[i:i+1] + x)\n            return r                # error: inconsistent dedent`</code></pre></div>\n<p>(Actually, the first three errors are detected by the parser; only the last error is found by the lexical analyzer -- the indentation of <code class=\"language-text\">return r</code> does not match a level popped off the stack.)</p>\n<p><a href=\"https://ds-unit-5-lambda.netlify.app/\">https://ds-unit-5-lambda.netlify.app/</a></p>\n<h2>Python Study Guide for a JavaScript Programmer</h2>\n<p><a href=\"https://bryanguner.medium.com/?source=post_page-----5cfdf3d2bdfb--------------------------------\">Bryan Guner</a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb?source=post_page-----5cfdf3d2bdfb--------------------------------\">Mar 5</a> · 15 min read</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*3V9VOfPk_hrFdbEAd3j-QQ.png\" alt=\"https://miro.medium.com/max/1400/1*3V9VOfPk_hrFdbEAd3j-QQ.png\"></p>\n<h2><strong>Applications of Tutorial &#x26; Cheat Sheet Respectivley (At Bottom Of Tutorial):</strong></h2>\n<h2><strong>Basics</strong></h2>\n<ul>\n<li><strong>PEP8</strong> : Python Enhancement Proposals, style-guide for Python.</li>\n<li><code class=\"language-text\">print</code> is the equivalent of <code class=\"language-text\">console.log</code>.</li>\n</ul>\n<blockquote>\n<p>'print() == console.log()'</p>\n</blockquote>\n<h2><code class=\"language-text\"></code>** is used to make comments in your code.**</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def foo():\n    \"\"\"\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n    \"\"\"\n    secretThing()</code></pre></div>\n<blockquote>\n<p>Python has a built in help function that let's you see a description of the source code without having to navigate to it… \"-SickNasty … Autor Unknown\"</p>\n</blockquote>\n<h2><strong>Numbers</strong></h2>\n<ul>\n<li>Python has three types of numbers:</li>\n<li><strong>Integer</strong></li>\n<li><strong>Positive and Negative Counting Numbers.</strong></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number … or … with the int() constructor.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(3) # => 3\nprint(int(19)) # => 19\nprint(int()) # => 0</code></pre></div>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h3><strong>Boolean is a subtype of integer in Python.🤷‍♂️</strong></h3>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme…</p>\n</blockquote>\n<blockquote>\n<p>Than I am sure you will find the means to suspend your disbelief.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(2.24) # => 2.24\nprint(2.) # => 2.0\nprint(float()) # => 0.0\nprint(27e-5) # => 0.00027</code></pre></div>\n<h2><strong>KEEP IN MIND:</strong></h2>\n<blockquote>\n<p>The i is switched to a j in programming.</p>\n</blockquote>\n<p><strong>T*</strong>his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-<strong>space</strong> when there's another 25 letters that don't get used for every loop under the sun. My most medium apologies to Leonhard Euler.*</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(7j) # => 7j\nprint(5.1+7.7j)) # => 5.1+7.7j\nprint(complex(3, 5)) # => 3+5j\nprint(complex(17)) # => 17+0j\nprint(complex()) # => 0j</code></pre></div>\n<ul>\n<li><strong>Type Casting</strong> : The process of converting one number to another.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Using Float\nprint(17)               # => 17\nprint(float(17))        # => 17.0# Using Int\nprint(17.0)             # => 17.0\nprint(int(17.0))        # => 17# Using Str\nprint(str(17.0) + ' and ' + str(17))        # => 17.0 and 17</code></pre></div>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><em>\"**\" : Double asterisk for exponent.</em></li>\n<li><em>\"//\" : Integer Division.</em></li>\n<li><strong>There are no spaces between math operations in Python.</strong></li>\n<li><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing <code class=\"language-text\">Math.floor()</code> in JS.</strong></li>\n<li><strong>There are no <code class=\"language-text\">++</code> and <code class=\"language-text\">-</code> in Python, the only shorthand operators are:</strong></li>\n</ul>\n<h2><strong>Strings</strong></h2>\n<ul>\n<li>Python uses both single and double quotes.</li>\n<li>You can escape strings like so <code class=\"language-text\">'Jodi asked, \"What\\\\'s up, Sam?\"'</code></li>\n<li>Multiline strings use triple quotes.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print('''My instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!''')</code></pre></div>\n<p><strong>Use the <code class=\"language-text\">len()</code> function to get the length of a string.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(len(\"Spaghetti\")) # => 9</code></pre></div>\n<h2><strong>Python uses <code class=\"language-text\">zero-based indexing</code></strong></h2>\n<h3><strong>Python allows negative indexing (thank god!)</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(\"Spaghetti\"[-1]) # => i print(\"Spaghetti\"[-4]) # => e</code></pre></div>\n<ul>\n<li>Python let's you use ranges</li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string… <em>(mind you that in JS … strings are wrapped in an object (under the hood)… upon which the string methods are actually called. As a immutable privative type <strong>by textbook definition</strong>, a string literal could not hope to invoke most of it's methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(\"Spaghetti\"[1:4]) # => pag\nprint(\"Spaghetti\"[4:-1]) # => hett\nprint(\"Spaghetti\"[4:4]) # => (empty string)</code></pre></div>\n<ul>\n<li>The end range is exclusive just like <code class=\"language-text\">slice</code> in JS.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Shortcut to get from the beginning of a string to a certain index.\nprint(\"Spaghetti\"[:4])  # => Spag\nprint(\"Spaghetti\"[:-1])    # => Spaghett# Shortcut to get from a certain index to the end of a string.\nprint(\"Spaghetti\"[1:])  # => paghetti\nprint(\"Spaghetti\"[-4:])    # => etti</code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">index</code> string function is the equiv. of <code class=\"language-text\">indexOf()</code> in JS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(\"Spaghetti\".index(\"h\"))    # => 4\nprint(\"Spaghetti\".index(\"t\"))    # => 6</code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">count</code> function finds out how many times a substring appears in a string… pretty nifty for a hard coded feature of the language.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(\"Spaghetti\".count(\"h\"))    # => 1\nprint(\"Spaghetti\".count(\"t\"))    # => 2\nprint(\"Spaghetti\".count(\"s\"))    # => 0\nprint('''We choose to go to the moon in this decade and do the other things,\nnot because they are easy, but because they are hard, because that goal will\nserve to organize and measure the best of our energies and skills, because that\nchallenge is one that we are willing to accept, one we are unwilling to\npostpone, and one which we intend to win, and the others, too.\n'''.count('the '))                # => 4</code></pre></div>\n<ul>\n<li><strong>You can use <code class=\"language-text\">+</code> to concatenate strings, just like in JS.</strong></li>\n<li><strong>You can also use \"*\" to repeat strings or multiply strings.</strong></li>\n<li><strong>Use the <code class=\"language-text\">format()</code> function to use placeholders in a string to input values later on.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">first_name = \"Billy\"\nlast_name = \"Bob\"\nprint('Your name is {0} {1}'.format(first_name, last_name))  # => Your name is Billy Bob</code></pre></div>\n<ul>\n<li><em>Shorthand way to use format function is:</em><code class=\"language-text\">print(f'Your name is {first_name} {last_name}')</code></li>\n</ul>\n<h3><strong>Some useful string methods.</strong></h3>\n<ul>\n<li><strong>Note that in JS <code class=\"language-text\">join</code> is used on an Array, in Python it is used on String.</strong></li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/630/0*eE3E5H0AoqkhqK1z.png\" alt=\"https://miro.medium.com/max/630/0*eE3E5H0AoqkhqK1z.png\"></p>\n<ul>\n<li>There are also many handy testing methods.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/630/0*Q0CMqFd4PozLDFPB.png\" alt=\"https://miro.medium.com/max/630/0*Q0CMqFd4PozLDFPB.png\"></p>\n<h2><strong>Variables and Expressions</strong></h2>\n<ul>\n<li><strong>Duck-Typing</strong> : Programming Style which avoids checking an object's type to figure out what it can do.</li>\n<li>Duck Typing is the fundamental approach of Python.</li>\n<li>Assignment of a value automatically declares a variable.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 7\nb = 'Marbles'\nprint(a)         # => 7\nprint(b)         # => Marbles</code></pre></div>\n<ul>\n<li><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></li>\n</ul>\n<h3><strong>Use with caution as this is highly unreadable</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">count = max = min = 0\nprint(count)           # => 0\nprint(max)             # => 0\nprint(min)             # => 0</code></pre></div>\n<h3><strong>The value and type of a variable can be re-assigned at any time.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 17\nprint(a)         # => 17\na = 'seventeen'\nprint(a)         # => seventeen</code></pre></div>\n<ul>\n<li><code class=\"language-text\">* does not exist in Python, but you can 'create' it like so:</code>*</li>\n<li><em>Python replaces <code class=\"language-text\">null</code> with <code class=\"language-text\">none</code>.</em></li>\n<li><code class=\"language-text\"></code><strong>* is an object</strong> and can be directly assigned to a variable.*</li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<h2><strong>Boolean Data Type</strong></h2>\n<ul>\n<li>One of the biggest benefits of Python is that it reads more like English than JS does.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/1400/0*HQpndNhm1Z_xSoHb.png\" alt=\"https://miro.medium.com/max/1400/0*HQpndNhm1Z_xSoHb.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Logical AND\nprint(True and True)    # => True\nprint(True and False)   # => False\nprint(False and False)  # => False# Logical OR\nprint(True or True)     # => True\nprint(True or False)    # => True\nprint(False or False)   # => False# Logical NOT\nprint(not True)             # => False\nprint(not False and True)   # => True\nprint(not True or False)    # => False</code></pre></div>\n<ul>\n<li>By default, Python considers an object to be true UNLESS it is one of the following:</li>\n<li>Constant <code class=\"language-text\">None</code> or <code class=\"language-text\">False</code></li>\n<li>Zero of any numeric type.</li>\n<li>Empty Sequence or Collection.</li>\n<li><code class=\"language-text\">True</code> and <code class=\"language-text\">False</code> must be capitalized</li>\n</ul>\n<h2><strong>Comparison Operators</strong></h2>\n<ul>\n<li>Python uses all the same equality operators as JS.</li>\n<li>In Python, equality operators are processed from left to right.</li>\n<li>Logical operators are processed in this order:</li>\n<li><strong>NOT</strong></li>\n<li><strong>AND</strong></li>\n<li><strong>OR</strong></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use parentheses to change the inherent order of operations.Short Circuit : Stopping a program when a true or false has been reached.</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/630/0*qHzGRLTOMTf30miT.png\" alt=\"https://miro.medium.com/max/630/0*qHzGRLTOMTf30miT.png\"></p>\n<h2><strong>Identity vs Equality</strong></h2>\n<p>****</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print (2 == '2')    # => False\nprint (2 is '2')    # => Falseprint (\"2\" == '2')    # => True\nprint (\"2\" is '2')    # => True# There is a distinction between the number types.\nprint (2 == 2.0)    # => True\nprint (2 is 2.0)    # => False</code></pre></div>\n<ul>\n<li>In the Python community it is better to use <code class=\"language-text\">is</code> and <code class=\"language-text\">is not</code> over <code class=\"language-text\">==</code> or <code class=\"language-text\">!=</code></li>\n</ul>\n<p><strong>If Statements</strong></p>\n<p><code class=\"language-text\">if name == 'Monica': print('Hi, Monica.')if name == 'Monica': print('Hi, Monica.')else: print('Hello, stranger.')if name == 'Monica': print('Hi, Monica.')elif age &lt; 12: print('You are not Monica, kiddo.')elif age > 2000: print('Unlike you, Monica is not an undead, immortal vampire.')elif age > 100: print('You are not Monica, grannie.')</code><em>Remember the order of <code class=\"language-text\">elif</code> statements matter.</em></p>\n<h2><strong>While Statements</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spam = 0\nwhile spam &lt; 5:\n  print('Hello, world.')\n  spam = spam + 1</code></pre></div>\n<ul>\n<li><code class=\"language-text\">Break</code> statement also exists in Python.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam >= 5:\n    break</code></pre></div>\n<ul>\n<li>As are <code class=\"language-text\">continue</code> statements</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam &lt; 5:\n    continue\n  break</code></pre></div>\n<h2><strong>Try/Except Statements</strong></h2>\n<ul>\n<li>Python equivalent to <code class=\"language-text\">try/catch</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 321\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a)a = '321'\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a))</code></pre></div>\n<ul>\n<li>You can name an error to give the output more specificity.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 100\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    c = None\nprint(c)</code></pre></div>\n<ul>\n<li>You can also use the <code class=\"language-text\">pass</code> commmand to by pass a certain error.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 100\nb = 0\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass</code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">pass</code> method won't allow you to bypass every single error so you can chain an exception series like so:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 100\n# b = \"5\"\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\nexcept (TypeError, NameError):\n    print(\"ERROR!\")</code></pre></div>\n<ul>\n<li>You can use an <code class=\"language-text\">else</code> statement to end a chain of <code class=\"language-text\">except</code> statements.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># tuple of file names\nfiles = ('one.txt', 'two.txt', 'three.txt')# simple loop\nfor filename in files:\n    try:\n        # open the file in read mode\n        f = open(filename, 'r')\n    except OSError:\n        # handle the case where file does not exist or permission is denied\n        print('cannot open file', filename)\n    else:\n        # do stuff with the file object (f)\n        print(filename, 'opened successfully')\n        print('found', len(f.readlines()), 'lines')\n        f.close()</code></pre></div>\n<ul>\n<li><code class=\"language-text\">finally</code> is used at the end to clean up all actions under any circumstance.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n    else:\n        print(\"Result is\", result)\n    finally:\n        print(\"Finally...\")</code></pre></div>\n<ul>\n<li>Using duck typing to check to see if some value is able to use a certain method.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Try a number - nothing will print out\na = 321\nif hasattr(a, '__len__'):\n    print(len(a))# Try a string - the length will print out (4 in this case)\nb = \"5555\"\nif hasattr(b, '__len__'):\n    print(len(b))</code></pre></div>\n<h2><strong>Pass</strong></h2>\n<ul>\n<li>Pass Keyword is required to write the JS equivalent of :</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (true) {\n}while (true) {}if True:\n  passwhile True:\n  pass</code></pre></div>\n<h2><strong>Functions</strong></h2>\n<ul>\n<li><strong>Function definition includes:</strong></li>\n<li><strong>The <code class=\"language-text\">def</code> keyword</strong></li>\n<li><strong>The name of the function</strong></li>\n<li><strong>A list of parameters enclosed in parentheses.</strong></li>\n<li><strong>A colon at the end of the line.</strong></li>\n<li><strong>One tab indentation for the code to run.</strong></li>\n<li><strong>You can use default parameters just like in JS</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def greeting(name, saying=\"Hello\"):\n    print(saying, name)greeting(\"Monica\")\n# Hello Monicagreeting(\"Barry\", \"Hey\")\n# Hey Barry</code></pre></div>\n<h3><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># THIS IS BAD CODE AND WILL NOT RUN\ndef increment(delta=1, value):\n    return delta + value</code></pre></div>\n<ul>\n<li><em>You can specify arguments by name without destructuring in Python.</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def greeting(name, saying=\"Hello\"):\n    print(saying, name)# name has no default value, so just provide the value\n# saying has a default value, so use a keyword argument\ngreeting(\"Monica\", saying=\"Hi\")</code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">lambda</code> keyword is used to create anonymous functions and are supposed to be <code class=\"language-text\">one-liners</code>.</li>\n</ul>\n<p><code class=\"language-text\">toUpper = lambda s: s.upper()</code></p>\n<h2><strong>Notes</strong></h2>\n<h3><strong>Formatted Strings</strong></h3>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.Python has a very powerful formatting engine.format() is also applied directly to strings.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">shopping_list = ['bread','milk','eggs']\nprint(','.join(shopping_list))</code></pre></div>\n<h2><strong>Comma Thousands Separator</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print('{:,}'.format(1234567890))\n'1,234,567,890'</code></pre></div>\n<h2><strong>Date and Time</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">d = datetime.datetime(2020, 7, 4, 12, 15, 58)\nprint('{:%Y-%m-%d %H:%M:%S}'.format(d))\n'2020-07-04 12:15:58'</code></pre></div>\n<h2><strong>Percentage</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">points = 190\ntotal = 220\nprint('Correct answers: {:.2%}'.format(points/total))\nCorrect answers: 86.36%</code></pre></div>\n<h2><strong>Data Tables</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">width=8\nprint(' decimal hex binary')\nprint('-'*27)\nfor num in range(1,16):\nfor base in 'dXb':\nprint('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')\nprint()\nGetting Input from the Command Line\nPython runs synchronously, all programs and processes will stop when listening for a user input.\nThe input function shows a prompt to a user and waits for them to type 'ENTER'.\nScripts vs Programs\nProgramming Script : A set of code that runs in a linear fashion.\nThe largest difference between scripts and programs is the level of complexity and purpose. Programs typically have many UI's.</code></pre></div>\n<p>**Python can be used to display html, css, and JS.**<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h3><strong>Structured Data</strong></h3>\n<h3><strong>Sequence : The most basic data structure in Python where the index determines the order.</strong></h3>\n<blockquote>\n<p>List-Tuple-Range-Collections : Unordered data structures, hashable values.</p>\n</blockquote>\n<h3><strong>Dictionaries-Sets-Iterable : Generic name for a sequence or collection; any object that can be iterated through.Can be mutable or immutable.Built In Data Types</strong></h3>\n<h2><strong>Lists are the python equivalent of arrays.</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">empty_list = []\ndepartments = ['HR','Development','Sales','Finance','IT','Customer Support']</code></pre></div>\n<h2><strong>You can instantiate</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">specials = list()</code></pre></div>\n<h3><strong>Test if a value is in a list.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(1 in [1, 2, 3]) #> True\nprint(4 in [1, 2, 3]) #> False\n# Tuples : Very similar to lists, but they are immutable</code></pre></div>\n<h3><strong>Instantiated with parentheses</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time_blocks = ('AM','PM')</code></pre></div>\n<h3><strong>Sometimes instantiated without</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">colors = 'red','blue','green'\nnumbers = 1, 2, 3</code></pre></div>\n<h3><strong>Tuple() built in can be used to convert other data into a tuple</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tuple('abc') # returns ('a', 'b', 'c')\ntuple([1,2,3]) # returns (1, 2, 3)\n# Think of tuples as constant variables.</code></pre></div>\n<h3><strong>Ranges : A list of numbers which can't be changed; often used with for loops.</strong></h3>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start : opt. default 0, first # in sequence.Stop : required next number past the last number in the sequence.Step : opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 2, 3, 4]</span>\n<span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3, 4]</span>\n<span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 5, 10, 15, 20]</span>\n<span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [ ]</span>\n<span class=\"token keyword\">for</span> let <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> let <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> let <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> let<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Keep in mind that stop is not included in the range.</span></code></pre></div>\n<h3><strong>Dictionaries : Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</strong></h3>\n<h3><strong>Mutable.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = {'one':1, 'two':2, 'three':3}\nb = dict(one=1, two=2, three=3)\nc = dict([('two', 2), ('one', 1), ('three', 3)])\n# a, b, and c are all equal</code></pre></div>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p>Benefit of dictionaries in Python is that it doesn't matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p><strong>Sets : Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p>Always be unique, duplicate items are auto dropped from the set.</p>\n</blockquote>\n<h3><strong>Common Uses:</strong></h3>\n<blockquote>\n<p>Removing DuplicatesMembership TestingMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.Sets created by putting comma seperated values inside braces:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">school_bag = {'book','paper','pencil','pencil','book','book','book','eraser'}\nprint(school_bag)</code></pre></div>\n<h3><strong>Also can use set constructor to automatically put it into a set.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">letters = set('abracadabra')\nprint(letters)\n#Built-In Functions\n#Functions using iterables</code></pre></div>\n<p><strong>filter(function, iterable) : creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable) : creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False) : creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0) : starts with a sequence and converts it to a series of tuples</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">quarters = ['First', 'Second', 'Third', 'Fourth']\nprint(enumerate(quarters))\nprint(enumerate(quarters, start=1))</code></pre></div>\n<h3><strong>(0, 'First'), (1, 'Second'), (2, 'Third'), (3, 'Fourth')</strong></h3>\n<h3><strong>(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Fourth')</strong></h3>\n<blockquote>\n<p>zip(*iterables) : creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.Functions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable) : returns the count of the number of items.</strong></p>\n<p>*<em>max(args, key=None) : returns the largest of two or more arguments.</em></p>\n<p><strong>max(iterable, key=None) : returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.min works the same way as max</em></p>\n<p><strong>sum(iterable) : used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable) : returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable) : returns True is all items in the iterable are true.</strong></p>\n<h2><strong>Working with dictionaries</strong></h2>\n<p><strong>dir(dictionary) : returns the list of keys in the dictionary.Working with sets</strong></p>\n<p>*<em>Union : The pipe | operator or union(sets) function can be used to produce a new set which is a combination of all elements in the provided set.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a | b) # => {1, 2, 3, 4, 6}</code></pre></div>\n<h3><strong>Intersection : The &#x26; operator ca be used to produce a new set of only the elements that appear in all sets.</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a &amp; b) # => {2}\nDifference : The — operator can be used to produce a new set of only the elements that appear in the first set and NOT the others.</code></pre></div>\n<p><strong>Symmetric Difference : The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a — b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {1, 3}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b — a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {4, 6}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {1, 3, 4, 6}</span></code></pre></div>\n<h2><strong>For StatementsIn python, there is only one for loop.</strong></h2>\n<p>Always Includes:</p>\n<blockquote>\n<ol>\n<li>The for keyword2. A variable name3. The 'in' keyword4. An iterable of some kid5. A colon6. On the next line, an indented block of code called the for clause.</li>\n</ol>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Carlita Cinco ('</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\ntotal <span class=\"token operator\">+=</span> num\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>\nLooping over a <span class=\"token builtin\">list</span> <span class=\"token keyword\">in</span> Python\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">supplies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pens'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'staplers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'flame-throwers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'binders'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>supplies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Index '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' in supplies is: '</span> <span class=\"token operator\">+</span> supplies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>****</p>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">l = 1, 2], [3, 4], [5, 6\nfor a, b in l:\nprint(a, ', ', b)</code></pre></div>\n<blockquote>\n<p>Prints 1, 2Prints 3, 4Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spam = {'color': 'red', 'age': 42}\nfor v in spam.values():\nprint(v)</code></pre></div>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for k in spam.keys():\nprint(k)</code></pre></div>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for i in spam.items():\nprint(i)</code></pre></div>\n<p><em>Prints ('color', 'red')</em></p>\n<p><em>Prints ('age', 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for k, v in spam.items():\nprint('Key: ' + k + ' Value: ' + str(v))</code></pre></div>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for c in \"abcdefg\":\nprint(c)</code></pre></div>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<ul>\n<li>args</li>\n</ul>\n<p><em>keyword args with default values</em></p>\n<ul>\n<li>*kwargs</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def example(arg_1, arg_2, *args, **kwargs):\npassdef example2(arg_1, arg_2, *args, kw_1=\"shark\", kw_2=\"blowfish\", **kwargs):\npass</code></pre></div>\n<h2><strong>Importing in Python</strong></h2>\n<p><strong>Modules are similar to packages in Node.js</strong>Come in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<h2><strong>Terms</strong></h2>\n<blockquote>\n<p>module : Python code in a separate file.package : Path to a directory that contains <a href=\"http://modules.init.py\">modules.init.py</a> : Default file for a package.submodule : Another file in a module's folder.function : Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file</strong> <a href=\"http://init.py\"><strong>init.py</strong></a> <strong>into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from urllib.request import (\nHTTPDefaultErrorHandler as ErrorHandler,\nHTTPRedirectHandler as RedirectHandler,\nRequest,\npathname2url,\nurl2pathname,\nurlopen,\n)</code></pre></div>\n<h2><strong>Watching Out for Python 2</strong></h2>\n<p><strong>Python 3 removed &#x3C;> and only uses !=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.md5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparsersets were killed in favor of set() class.</strong></p>\n<h3><strong>print was a statement in P2, but is a function in P3.</strong></h3>\n<p><a href=\"https://gist.github.com/bgoonz/82154f50603f73826c27377ebaa498b5#file-python-study-guide-py\">https://gist.github.com/bgoonz/82154f50603f73826c27377ebaa498b5#file-python-study-guide-py</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/282774d28326ff83d8b42ae77ab1fee3#file-python-cheatsheet-py\">https://gist.github.com/bgoonz/282774d28326ff83d8b42ae77ab1fee3#file-python-cheatsheet-py</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/999163a278b987fe47fb247fd4d66904#file-python-cheat-sheet-md\">https://gist.github.com/bgoonz/999163a278b987fe47fb247fd4d66904#file-python-cheat-sheet-md</a></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be5715e2-c834-458f-8c5b-ea185717fe37/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be5715e2-c834-458f-8c5b-ea185717fe37/Untitled.png\"></p>\n<h2>Built-in Functions</h2>"}