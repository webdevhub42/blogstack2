{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-26b4134a5a4ed88bb57d76991b1b6d08-gatsby-remark-prismjs-","val":"<h2><a href=\"https://leetcode.com/problems/roman-to-integer/description/\">13. Roman to Integer</a></h2>\n<h3>Problem:</h3>\n<p>Roman numerals are represented by seven different symbols: <code class=\"language-text\">I</code>, <code class=\"language-text\">V</code>, <code class=\"language-text\">X</code>, <code class=\"language-text\">L</code>, <code class=\"language-text\">C</code>, <code class=\"language-text\">D</code> and <code class=\"language-text\">M</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</code></pre></div>\n<p>For example, two is written as <code class=\"language-text\">II</code> in Roman numeral, just two one's added together. Twelve is written as, <code class=\"language-text\">XII</code>, which is simply <code class=\"language-text\">X</code> + <code class=\"language-text\">II</code>. The number twenty seven is written as <code class=\"language-text\">XXVII</code>, which is <code class=\"language-text\">XX</code> + <code class=\"language-text\">V</code> + <code class=\"language-text\">II</code>.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code class=\"language-text\">IIII</code>. Instead, the number four is written as <code class=\"language-text\">IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code class=\"language-text\">IX</code>. There are six instances where subtraction is used:</p>\n<ul>\n<li><code class=\"language-text\">I</code> can be placed before <code class=\"language-text\">V</code> (5) and <code class=\"language-text\">X</code> (10) to make 4 and 9.</li>\n<li><code class=\"language-text\">X</code> can be placed before <code class=\"language-text\">L</code> (50) and <code class=\"language-text\">C</code> (100) to make 40 and 90.</li>\n<li><code class=\"language-text\">C</code> can be placed before <code class=\"language-text\">D</code> (500) and <code class=\"language-text\">M</code> (1000) to make 400 and 900.</li>\n</ul>\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"III\"\nOutput: 3</code></pre></div>\n<p><strong>Example 2:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"IV\"\nOutput: 4</code></pre></div>\n<p><strong>Example 3:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"IX\"\nOutput: 9</code></pre></div>\n<p><strong>Example 4:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"LVIII\"\nOutput: 58\nExplanation: C = 100, L = 50, XXX = 30 and III = 3.</code></pre></div>\n<p><strong>Example 5:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.</code></pre></div>\n<h3>Solution:</h3>\n<p>Normally we just add up the digits, except when the digit is greater than its left (e.g. IV). In that case we need to fallback and remove the last digit then combine the two as new digit. That is why we subtract the last digit twice.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">romanToInt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> rdigit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">I</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">V</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">X</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">L</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">D</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">M</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lastDigit <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> digit <span class=\"token operator\">=</span> rdigit<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result <span class=\"token operator\">+=</span> digit <span class=\"token operator\">&lt;=</span> lastDigit <span class=\"token operator\">?</span> digit <span class=\"token operator\">:</span> digit <span class=\"token operator\">-</span> lastDigit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        lastDigit <span class=\"token operator\">=</span> digit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}