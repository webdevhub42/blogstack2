{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-35e00cc73f0b5d7deb9779185b04eef2-gatsby-remark-prismjs-","val":"<h1>String</h1>\n<p>The <code class=\"language-text\">String</code> object is used to represent and manipulate a sequence of characters.</p>\n<h2>Description</h2>\n<p>Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their <a href=\"string/length\"><code class=\"language-text\">length</code></a>, to build and concatenate them using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#string_operators\">+ and += string operators</a>, checking for the existence or location of substrings with the <a href=\"string/indexof\"><code class=\"language-text\">indexOf()</code></a> method, or extracting substrings with the <a href=\"string/substring\"><code class=\"language-text\">substring()</code></a> method.</p>\n<h3>Creating strings</h3>\n<p>Strings can be created as primitives, from string literals, or as objects, using the <a href=\"string/string\"><code class=\"language-text\">String()</code></a> constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const string1 = \"A string primitive\";\nconst string2 = 'Also a string primitive';\nconst string3 = `Yet another string primitive`;\n\nconst string4 = new String(\"A String object\");</code></pre></div>\n<p>String primitives and string objects can be used interchangeably in most situations. See \"<a href=\"#string_primitives_and_string_objects\">String primitives and String objects</a>\" below.</p>\n<p>String literals can be specified using single or double quotes, which are treated identically, or using the backtick character `. This last form specifies a <a href=\"../template_literals\">template literal</a>: with this form you can interpolate expressions.</p>\n<h3>Character access</h3>\n<p>There are two ways to access an individual character in a string. The first is the <a href=\"string/charat\"><code class=\"language-text\">charAt()</code></a> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return 'cat'.charAt(1) // returns \"a\"</code></pre></div>\n<p>The other way (introduced in ECMAScript 5) is to treat the string as an array-like object, where individual characters correspond to a numerical index:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return 'cat'[1] // returns \"a\"</code></pre></div>\n<p>When using bracket notation for character access, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See <a href=\"object/defineproperty\"><code class=\"language-text\">Object.defineProperty()</code></a> for more information.)</p>\n<h3>Comparing strings</h3>\n<p>In C, the <code class=\"language-text\">strcmp()</code> function is used for comparing strings. In JavaScript, you just use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\">less-than and greater-than operators</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a = 'a'\nlet b = 'b'\nif (a &lt; b) { // true\n  console.log(a + ' is less than ' + b)\n} else if (a > b) {\n  console.log(a + ' is greater than ' + b)\n} else {\n  console.log(a + ' and ' + b + ' are equal.')\n}</code></pre></div>\n<p>A similar result can be achieved using the <a href=\"string/localecompare\"><code class=\"language-text\">localeCompare()</code></a> method inherited by <code class=\"language-text\">String</code> instances.</p>\n<p>Note that <code class=\"language-text\">a == b</code> compares the strings in <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> for being equal in the usual case-sensitive way. If you wish to compare without regard to upper or lower case characters, use a function similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function isEqual(str1, str2)\n{\n    return str1.toUpperCase() === str2.toUpperCase()\n} // isEqual</code></pre></div>\n<p>Upper case is used instead of lower case in this function, due to problems with certain UTF-8 character conversions.</p>\n<h3>String primitives and String objects</h3>\n<p>Note that JavaScript distinguishes between <code class=\"language-text\">String</code> objects and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive string</a> values. (The same is true of <a href=\"boolean\"><code class=\"language-text\">Boolean</code></a> and <a href=\"number\"><code class=\"language-text\">Numbers</code></a>.)</p>\n<p>String literals (denoted by double or single quotes) and strings returned from <code class=\"language-text\">String</code> calls in a non-constructor context (that is, called without using the <a href=\"../operators/new\"><code class=\"language-text\">new</code></a> keyword) are primitive strings. JavaScript automatically converts primitives to <code class=\"language-text\">String</code> objects, so that it's possible to use <code class=\"language-text\">String</code> object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let s_prim = 'foo'\nlet s_obj = new String(s_prim)\n\nconsole.log(typeof s_prim) // Logs \"string\"\nconsole.log(typeof s_obj)  // Logs \"object\"</code></pre></div>\n<p>String primitives and <code class=\"language-text\">String</code> objects also give different results when using <a href=\"eval\"><code class=\"language-text\">eval()</code></a>. Primitives passed to <code class=\"language-text\">eval</code> are treated as source code; <code class=\"language-text\">String</code> objects are treated as all other objects are, by returning the object. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let s1 = '2 + 2'              // creates a string primitive\nlet s2 = new String('2 + 2')  // creates a String object\nconsole.log(eval(s1))         // returns the number 4\nconsole.log(eval(s2))         // returns the string \"2 + 2\"</code></pre></div>\n<p>For these reasons, the code may break when it encounters <code class=\"language-text\">String</code> objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.</p>\n<p>A <code class=\"language-text\">String</code> object can always be converted to its primitive counterpart with the <a href=\"string/valueof\"><code class=\"language-text\">valueOf()</code></a> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(eval(s2.valueOf()))  // returns the number 4</code></pre></div>\n<h3><span id=\"escape_sequences\">Escape sequences</span></h3>\n<p>Special characters can be encoded using escape sequences:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Escape sequence</th>\n<th>Unicode code point</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\n<code>\\0</code>\n</td>\n<td>null character (U+0000 NULL)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\'</code>\n</td>\n<td>single quote (U+0027 APOSTROPHE)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\\"</code>\n</td>\n<td>double quote (U+0022 QUOTATION MARK)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\\\</code>\n</td>\n<td>backslash (U+005C REVERSE SOLIDUS)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\n</code>\n</td>\n<td>newline (U+000A LINE FEED; LF)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\r</code>\n</td>\n<td>carriage return (U+000D CARRIAGE RETURN; CR)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\v</code>\n</td>\n<td>vertical tab (U+000B LINE TABULATION)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\t</code>\n</td>\n<td>tab (U+0009 CHARACTER TABULATION)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\b</code>\n</td>\n<td>backspace (U+0008 BACKSPACE)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\f</code>\n</td>\n<td>form feed (U+000C FORM FEED)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\uXXXX</code>\n<br/>\n<p>…where <code>XXXX</code> is exactly 4 hex digits in the range <code>0000</code>-<code>FFFF</code>; e.g., <code>\\u000A</code> is the same as <code>\\n</code> (LINE FEED); <code>\\u0021</code> is \"<code>!</code>\"</td></p>\n<td>Unicode code point between <code>U+0000</code> and <code>U+FFFF</code> (the Unicode Basic Multilingual Plane)</td>\n</tr>\n<tr class=\"even\">\n<td>\n<code>\\u{X}</code>…<code>\\u{XXXXXX}</code>\n<br/>\n<p>…where <code>X</code>…<code>XXXXXX</code> is 1-6 hex digits in the range <code>0</code>-<code>10FFFF</code>; e.g., <code>\\u{A}</code> is the same as <code>\\n</code> (LINE FEED); <code>\\u{21}</code> is \"<code>!</code>\"</td></p>\n<td>Unicode code point between <code>U+0000</code> and <code>U+10FFFF</code> (the entirety of Unicode)</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<code>\\xXX</code>\n<br/>\n<p>…where <code>XX</code> is exactly 2 hex digits in the range <code>00</code>-<code>FF</code>; e.g., <code>\\x0A</code> is the same as <code>\\n</code> (LINE FEED); <code>\\x21</code> is \"<code>!</code>\"</td></p>\n<td>Unicode code point between <code>U+0000</code> and <code>U+00FF</code> (the Basic Latin and Latin-1 Supplement blocks; equivalent to ISO-8859-1)</td>\n</tr>\n</tbody>\n</table>\n<h3>Long literal strings</h3>\n<p>Sometimes, your code will include strings which are very long. Rather than having lines that go on endlessly, or wrap at the whim of your editor, you may wish to specifically break the string into multiple lines in the source code without affecting the actual string contents. There are two ways you can do this.</p>\n<h4>Method 1</h4>\n<p>You can use the <a href=\"../operators/addition\">+</a> operator to append multiple strings together, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let longString = \"This is a very long string which needs \" +\n                 \"to wrap across multiple lines because \" +\n                 \"otherwise my code is unreadable.\"</code></pre></div>\n<h4>Method 2</h4>\n<p>You can use the backslash character (<code class=\"language-text\">\\</code>) at the end of each line to indicate that the string will continue on the next line. Make sure there is no space or any other character after the backslash (except for a line break), or as an indent; otherwise it will not work.</p>\n<p>That form looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let longString = \"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable.\"</code></pre></div>\n<p>Both of the above methods result in identical strings.</p>\n<h2>Constructor</h2>\n<p><a href=\"string/string\"><code class=\"language-text\">String()</code></a>\nCreates a new <code class=\"language-text\">String</code> object. It performs type conversion when called as a function, rather than as a constructor, which is usually more useful.</p>\n<h2>Static methods</h2>\n<p><a href=\"string/fromcharcode\"><code class=\"language-text\">String.fromCharCode(num1 [, ...[, numN]])</code></a>\nReturns a string created by using the specified sequence of Unicode values.</p>\n<p>[<code class=\"language-text\">String.fromCodePoint(num1 [, ...[, numN)</code>](string/fromcodepoint)\nReturns a string created by using the specified sequence of code points.</p>\n<p><a href=\"string/raw\"><code class=\"language-text\">String.raw()</code></a>\nReturns a string created from a raw template string.</p>\n<h2>Instance properties</h2>\n<p><a href=\"string/length\"><code class=\"language-text\">String.prototype.length</code></a>\nReflects the <code class=\"language-text\">length</code> of the string. Read-only.</p>\n<h2>Instance methods</h2>\n<p><a href=\"string/at\"><code class=\"language-text\">String.prototype.at(index)</code></a><span class=\"icon experimental\" viewbox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\"> This is an experimental API that should not be used in production code. </span>\nReturns the character (exactly one UTF-16 code unit) at the specified <code class=\"language-text\">index</code>. Accepts negative integers, which count back from the last string character.</p>\n<p><a href=\"string/charat\"><code class=\"language-text\">String.prototype.charAt(index)</code></a>\nReturns the character (exactly one UTF-16 code unit) at the specified <code class=\"language-text\">index</code>.</p>\n<p><a href=\"string/charcodeat\"><code class=\"language-text\">String.prototype.charCodeAt(index)</code></a>\nReturns a number that is the UTF-16 code unit value at the given <code class=\"language-text\">index</code>.</p>\n<p><a href=\"string/codepointat\"><code class=\"language-text\">String.prototype.codePointAt(pos)</code></a>\nReturns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified <code class=\"language-text\">pos</code>.</p>\n<p><a href=\"string/concat\"><code class=\"language-text\">String.prototype.concat(str [, ...strN ])</code></a>\nCombines the text of two (or more) strings and returns a new string.</p>\n<p><a href=\"string/includes\"><code class=\"language-text\">String.prototype.includes(searchString [, position])</code></a>\nDetermines whether the calling string contains <code class=\"language-text\">searchString</code>.</p>\n<p><a href=\"string/endswith\"><code class=\"language-text\">String.prototype.endsWith(searchString [, length])</code></a>\nDetermines whether a string ends with the characters of the string <code class=\"language-text\">searchString</code>.</p>\n<p><a href=\"string/indexof\"><code class=\"language-text\">String.prototype.indexOf(searchValue [, fromIndex])</code></a>\nReturns the index within the calling <a href=\"string\"><code class=\"language-text\">String</code></a> object of the first occurrence of <code class=\"language-text\">searchValue</code>, or <code class=\"language-text\">-1</code> if not found.</p>\n<p><a href=\"string/lastindexof\"><code class=\"language-text\">String.prototype.lastIndexOf(searchValue [, fromIndex])</code></a>\nReturns the index within the calling <a href=\"string\"><code class=\"language-text\">String</code></a> object of the last occurrence of <code class=\"language-text\">searchValue</code>, or <code class=\"language-text\">-1</code> if not found.</p>\n<p><a href=\"string/localecompare\"><code class=\"language-text\">String.prototype.localeCompare(compareString [, locales [, options]])</code></a>\nReturns a number indicating whether the reference string <code class=\"language-text\">compareString</code> comes before, after, or is equivalent to the given string in sort order.</p>\n<p><a href=\"string/match\"><code class=\"language-text\">String.prototype.match(regexp)</code></a>\nUsed to match regular expression <code class=\"language-text\">regexp</code> against a string.</p>\n<p><a href=\"string/matchall\"><code class=\"language-text\">String.prototype.matchAll(regexp)</code></a>\nReturns an iterator of all <code class=\"language-text\">regexp</code>'s matches.</p>\n<p><a href=\"string/normalize\"><code class=\"language-text\">String.prototype.normalize([form])</code></a>\nReturns the Unicode Normalization Form of the calling string value.</p>\n<p><a href=\"string/padend\"><code class=\"language-text\">String.prototype.padEnd(targetLength [, padString])</code></a>\nPads the current string from the end with a given string and returns a new string of the length <code class=\"language-text\">targetLength</code>.</p>\n<p><a href=\"string/padstart\"><code class=\"language-text\">String.prototype.padStart(targetLength [, padString])</code></a>\nPads the current string from the start with a given string and returns a new string of the length <code class=\"language-text\">targetLength</code>.</p>\n<p><a href=\"string/repeat\"><code class=\"language-text\">String.prototype.repeat(count)</code></a>\nReturns a string consisting of the elements of the object repeated <code class=\"language-text\">count</code> times.</p>\n<p><a href=\"string/replace\"><code class=\"language-text\">String.prototype.replace(searchFor, replaceWith)</code></a>\nUsed to replace occurrences of <code class=\"language-text\">searchFor</code> using <code class=\"language-text\">replaceWith</code>. <code class=\"language-text\">searchFor</code> may be a string or Regular Expression, and <code class=\"language-text\">replaceWith</code> may be a string or function.</p>\n<p><a href=\"string/replaceall\"><code class=\"language-text\">String.prototype.replaceAll(searchFor, replaceWith)</code></a>\nUsed to replace all occurrences of <code class=\"language-text\">searchFor</code> using <code class=\"language-text\">replaceWith</code>. <code class=\"language-text\">searchFor</code> may be a string or Regular Expression, and <code class=\"language-text\">replaceWith</code> may be a string or function.</p>\n<p><a href=\"string/search\"><code class=\"language-text\">String.prototype.search(regexp)</code></a>\nSearch for a match between a regular expression <code class=\"language-text\">regexp</code> and the calling string.</p>\n<p><a href=\"string/slice\"><code class=\"language-text\">String.prototype.slice(beginIndex[, endIndex])</code></a>\nExtracts a section of a string and returns a new string.</p>\n<p><a href=\"string/split\"><code class=\"language-text\">String.prototype.split([sep [, limit] ])</code></a>\nReturns an array of strings populated by splitting the calling string at occurrences of the substring <code class=\"language-text\">sep</code>.</p>\n<p><a href=\"string/startswith\"><code class=\"language-text\">String.prototype.startsWith(searchString [, length])</code></a>\nDetermines whether the calling string begins with the characters of string <code class=\"language-text\">searchString</code>.</p>\n<p><a href=\"string/substring\"><code class=\"language-text\">String.prototype.substring(indexStart [, indexEnd])</code></a>\nReturns a new string containing characters of the calling string from (or between) the specified index (or indeces).</p>\n<p><a href=\"string/tolocalelowercase\"><code class=\"language-text\">String.prototype.toLocaleLowerCase( [locale, ...locales])</code></a>\nThe characters within a string are converted to lowercase while respecting the current locale.</p>\n<p>For most languages, this will return the same as <a href=\"string/tolowercase\"><code class=\"language-text\">toLowerCase()</code></a>.</p>\n<p><a href=\"string/tolocaleuppercase\"><code class=\"language-text\">String.prototype.toLocaleUpperCase( [locale, ...locales])</code></a>\nThe characters within a string are converted to uppercase while respecting the current locale.</p>\n<p>For most languages, this will return the same as <a href=\"string/touppercase\"><code class=\"language-text\">toUpperCase()</code></a>.</p>\n<p><a href=\"string/tolowercase\"><code class=\"language-text\">String.prototype.toLowerCase()</code></a>\nReturns the calling string value converted to lowercase.</p>\n<p><a href=\"string/tostring\"><code class=\"language-text\">String.prototype.toString()</code></a>\nReturns a string representing the specified object. Overrides the <a href=\"object/tostring\"><code class=\"language-text\">Object.prototype.toString()</code></a> method.</p>\n<p><a href=\"string/touppercase\"><code class=\"language-text\">String.prototype.toUpperCase()</code></a>\nReturns the calling string value converted to uppercase.</p>\n<p><a href=\"string/trim\"><code class=\"language-text\">String.prototype.trim()</code></a>\nTrims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.</p>\n<p><a href=\"string/trimstart\"><code class=\"language-text\">String.prototype.trimStart()</code></a>\nTrims whitespace from the beginning of the string.</p>\n<p><a href=\"string/trimend\"><code class=\"language-text\">String.prototype.trimEnd()</code></a>\nTrims whitespace from the end of the string.</p>\n<p><a href=\"string/valueof\"><code class=\"language-text\">String.prototype.valueOf()</code></a>\nReturns the primitive value of the specified object. Overrides the <a href=\"object/valueof\"><code class=\"language-text\">Object.prototype.valueOf()</code></a> method.</p>\n<p><a href=\"string/@@iterator\"><code class=\"language-text\">String.prototype.@@iterator()</code></a>\nReturns a new iterator object that iterates over the code points of a String value, returning each code point as a String value.</p>\n<h2>HTML wrapper methods</h2>\n<p><strong>Warning:</strong> Deprecated. Avoid these methods.</p>\n<p>They are of limited use, as they provide only a subset of the available HTML tags and attributes.</p>\n<p><a href=\"string/anchor\"><code class=\"language-text\">String.prototype.anchor()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-name\"><code class=\"language-text\">&lt;a name=\"name\"></code></a> (hypertext target)</p>\n<p><a href=\"string/big\"><code class=\"language-text\">String.prototype.big()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big\"><code class=\"language-text\">&lt;big></code></a></p>\n<p><a href=\"string/blink\"><code class=\"language-text\">String.prototype.blink()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink\"><code class=\"language-text\">&lt;blink></code></a></p>\n<p><a href=\"string/bold\"><code class=\"language-text\">String.prototype.bold()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\"><code class=\"language-text\">&lt;b></code></a></p>\n<p><a href=\"string/fixed\"><code class=\"language-text\">String.prototype.fixed()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt\"><code class=\"language-text\">&lt;tt></code></a></p>\n<p><a href=\"string/fontcolor\"><code class=\"language-text\">String.prototype.fontcolor()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-color\"><code class=\"language-text\">&lt;font color=\"color\"></code></a></p>\n<p><a href=\"string/fontsize\"><code class=\"language-text\">String.prototype.fontsize()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-size\"><code class=\"language-text\">&lt;font size=\"size\"></code></a></p>\n<p><a href=\"string/italics\"><code class=\"language-text\">String.prototype.italics()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\"><code class=\"language-text\">&lt;i></code></a></p>\n<p><a href=\"string/link\"><code class=\"language-text\">String.prototype.link()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href\"><code class=\"language-text\">&lt;a href=\"url\"></code></a> (link to URL)</p>\n<p><a href=\"string/small\"><code class=\"language-text\">String.prototype.small()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\"><code class=\"language-text\">&lt;small></code></a></p>\n<p><a href=\"string/strike\"><code class=\"language-text\">String.prototype.strike()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike\"><code class=\"language-text\">&lt;strike></code></a></p>\n<p><a href=\"string/sub\"><code class=\"language-text\">String.prototype.sub()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\"><code class=\"language-text\">&lt;sub></code></a></p>\n<p><a href=\"string/sup\"><code class=\"language-text\">String.prototype.sup()</code></a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\"><code class=\"language-text\">&lt;sup></code></a></p>\n<h2>Examples</h2>\n<h3>String conversion</h3>\n<p>It's possible to use <code class=\"language-text\">String</code> as a more reliable <a href=\"string/tostring\"><code class=\"language-text\">toString()</code></a> alternative, as it works when used on <a href=\"null\"><code class=\"language-text\">null</code></a>, <a href=\"undefined\"><code class=\"language-text\">undefined</code></a>, and on <a href=\"symbol\"><code class=\"language-text\">symbols</code></a>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let outputStrings = []\nfor (let i = 0, n = inputValues.length; i &lt; n; ++i) {\n  outputStrings.push(String(inputValues[i]));\n}</code></pre></div>"}