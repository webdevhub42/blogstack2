{"expireTime":9007200911206582000,"key":"transformer-remark-markdown-html-ast-d47f0e7eda8702166c3415aa58d9a88b-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring","position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":22,"offset":23}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":22,"offset":23}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a HTML Element","position":{"start":{"line":5,"column":5,"offset":29},"end":{"line":5,"column":38,"offset":62}}}],"position":{"start":{"line":5,"column":1,"offset":25},"end":{"line":5,"column":38,"offset":62}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: you want to make a ","position":{"start":{"line":7,"column":1,"offset":64},"end":{"line":7,"column":29,"offset":92}}},{"type":"raw","value":"<code class=\"language-text\">&lt;Button></code>","position":{"start":{"line":7,"column":29,"offset":92},"end":{"line":7,"column":39,"offset":102}}},{"type":"text","value":" that takes all the normal props of ","position":{"start":{"line":7,"column":39,"offset":102},"end":{"line":7,"column":75,"offset":138}}},{"type":"raw","value":"<code class=\"language-text\">&lt;button></code>","position":{"start":{"line":7,"column":75,"offset":138},"end":{"line":7,"column":85,"offset":148}}},{"type":"text","value":" and does extra stuff.","position":{"start":{"line":7,"column":85,"offset":148},"end":{"line":7,"column":107,"offset":170}}}],"position":{"start":{"line":7,"column":1,"offset":64},"end":{"line":7,"column":107,"offset":170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extend ","position":{"start":{"line":9,"column":1,"offset":172},"end":{"line":9,"column":18,"offset":189}}},{"type":"raw","value":"<code class=\"language-text\">React.ComponentPropsWithoutRef&lt;'button'></code>","position":{"start":{"line":9,"column":18,"offset":189},"end":{"line":9,"column":60,"offset":231}}}],"position":{"start":{"line":9,"column":1,"offset":172},"end":{"line":9,"column":60,"offset":231}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Type '\"foo\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.(2322)</span>\n    <span class=\"token comment\">// return &lt;Button type=\"foo\"> sldkj &lt;/Button></span>\n\n    <span class=\"token comment\">// no error</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> text </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// implementation</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ComponentPropsWithoutRef<span class=\"token operator\">&lt;</span><span class=\"token string\">'button'</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    specialProp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> specialProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// do something with specialProp</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":11,"column":1,"offset":233},"end":{"line":30,"column":4,"offset":773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUI4wPQtwCuqyA5lowQ4A7fMAhC4AQTBgAFAEo4Ab0Zw4bOABUAnmCzkARAQgQDZOMHRCI8NKmA8hyAEYAbfTAhwYu-WQPOHDCeQgZwAD5wBqgcziDAMGGRBpSoWIkRnEIAJlgEwEJY2WQAdLIATADM5eXyqurslDAcUBIAPABCQSHevgC8RiYGAHxwqK7ZANYAVnBtLF3B4sP19RrWcFhQxFD1TS3tiz0+egOBS6GjMFgAHvDzR8uMAL7MDBqgYO4gWEIwyDAxEJGLdILALH8tgQ8PpHkIAArEMDoW7XHLobB4GAlADCJEghT+iIgyLaZHOITIoxUDDUqD0uGAyFcxLAAH4AFxjGBQAo8egMV4MUHQQjCUTiOBw2RgJGoLlw1moRQ0tS4cSoeBKMYMpkspEAGjgJRNqXgzzgfTgspJqAFag02S8qBI6QAFny4AB3BJunVYRnM1l7dIHOYUyVKE0lM0WljDAXPIA"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"See this in the TS Playground","position":{"start":{"line":32,"column":3,"offset":777},"end":{"line":32,"column":32,"offset":806}}}],"position":{"start":{"line":32,"column":2,"offset":776},"end":{"line":32,"column":33,"offset":807}}}],"position":{"start":{"line":32,"column":1,"offset":775},"end":{"line":32,"column":609,"offset":1383}}}],"position":{"start":{"line":32,"column":1,"offset":775},"end":{"line":32,"column":609,"offset":1383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Forwarding Refs","position":{"start":{"line":34,"column":3,"offset":1387},"end":{"line":34,"column":18,"offset":1402}}}],"position":{"start":{"line":34,"column":1,"offset":1385},"end":{"line":34,"column":20,"offset":1404}}},{"type":"text","value":": As ","position":{"start":{"line":34,"column":20,"offset":1404},"end":{"line":34,"column":25,"offset":1409}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/forwarding-refs.html"},"children":[{"type":"text","value":"the React docs themselves note","position":{"start":{"line":34,"column":26,"offset":1410},"end":{"line":34,"column":56,"offset":1440}}}],"position":{"start":{"line":34,"column":25,"offset":1409},"end":{"line":34,"column":104,"offset":1488}}},{"type":"text","value":", most usecases will not need to obtain a ref to the inner element. But for people making reusable component libraries, you will need to ","position":{"start":{"line":34,"column":104,"offset":1488},"end":{"line":34,"column":241,"offset":1625}}},{"type":"raw","value":"<code class=\"language-text\">forwardRef</code>","position":{"start":{"line":34,"column":241,"offset":1625},"end":{"line":34,"column":253,"offset":1637}}},{"type":"text","value":" the underlying element, and then you can use ","position":{"start":{"line":34,"column":253,"offset":1637},"end":{"line":34,"column":299,"offset":1683}}},{"type":"raw","value":"<code class=\"language-text\">ComponentPropsWithRef</code>","position":{"start":{"line":34,"column":299,"offset":1683},"end":{"line":34,"column":322,"offset":1706}}},{"type":"text","value":" to grab props for your wrapper component. Check ","position":{"start":{"line":34,"column":322,"offset":1706},"end":{"line":34,"column":371,"offset":1755}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"our docs on forwarding Refs","position":{"start":{"line":34,"column":372,"offset":1756},"end":{"line":34,"column":399,"offset":1783}}}],"position":{"start":{"line":34,"column":371,"offset":1755},"end":{"line":34,"column":500,"offset":1884}}},{"type":"text","value":" for more.","position":{"start":{"line":34,"column":500,"offset":1884},"end":{"line":34,"column":510,"offset":1894}}}],"position":{"start":{"line":34,"column":1,"offset":1385},"end":{"line":34,"column":510,"offset":1894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In future, the need to ","position":{"start":{"line":36,"column":1,"offset":1896},"end":{"line":36,"column":24,"offset":1919}}},{"type":"raw","value":"<code class=\"language-text\">forwardRef</code>","position":{"start":{"line":36,"column":24,"offset":1919},"end":{"line":36,"column":36,"offset":1931}}},{"type":"text","value":" may go away in React 17+, but for now we still have to deal with this. 🙃","position":{"start":{"line":36,"column":36,"offset":1931},"end":{"line":36,"column":110,"offset":2005}}}],"position":{"start":{"line":36,"column":1,"offset":1896},"end":{"line":36,"column":110,"offset":2005}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>","position":{"start":{"line":38,"column":1,"offset":2007},"end":{"line":39,"column":10,"offset":2026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why not ","position":{"start":{"line":41,"column":1,"offset":2028},"end":{"line":41,"column":9,"offset":2036}}},{"type":"raw","value":"<code class=\"language-text\">ComponentProps</code>","position":{"start":{"line":41,"column":9,"offset":2036},"end":{"line":41,"column":25,"offset":2052}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":25,"offset":2052},"end":{"line":41,"column":29,"offset":2056}}},{"type":"raw","value":"<code class=\"language-text\">IntrinsicElements</code>","position":{"start":{"line":41,"column":29,"offset":2056},"end":{"line":41,"column":48,"offset":2075}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":48,"offset":2075},"end":{"line":41,"column":52,"offset":2079}}},{"type":"raw","value":"<code class=\"language-text\">[Element]HTMLAttributes</code>","position":{"start":{"line":41,"column":52,"offset":2079},"end":{"line":41,"column":77,"offset":2104}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":77,"offset":2104},"end":{"line":41,"column":81,"offset":2108}}},{"type":"raw","value":"<code class=\"language-text\">HTMLProps</code>","position":{"start":{"line":41,"column":81,"offset":2108},"end":{"line":41,"column":92,"offset":2119}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":92,"offset":2119},"end":{"line":41,"column":96,"offset":2123}}},{"type":"raw","value":"<code class=\"language-text\">HTMLAttributes</code>","position":{"start":{"line":41,"column":96,"offset":2123},"end":{"line":41,"column":112,"offset":2139}}},{"type":"text","value":"?","position":{"start":{"line":41,"column":112,"offset":2139},"end":{"line":41,"column":113,"offset":2140}}}],"position":{"start":{"line":41,"column":1,"offset":2028},"end":{"line":41,"column":113,"offset":2140}}},{"type":"text","value":"\n"},{"type":"raw","value":"</summary>","position":{"start":{"line":43,"column":1,"offset":2142},"end":{"line":43,"column":11,"offset":2152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ComponentProps</code>","position":{"start":{"line":45,"column":4,"offset":2157},"end":{"line":45,"column":20,"offset":2173}}}],"position":{"start":{"line":45,"column":1,"offset":2154},"end":{"line":45,"column":20,"offset":2173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You CAN use ","position":{"start":{"line":47,"column":1,"offset":2175},"end":{"line":47,"column":13,"offset":2187}}},{"type":"raw","value":"<code class=\"language-text\">ComponentProps</code>","position":{"start":{"line":47,"column":13,"offset":2187},"end":{"line":47,"column":29,"offset":2203}}},{"type":"text","value":" in place of ","position":{"start":{"line":47,"column":29,"offset":2203},"end":{"line":47,"column":42,"offset":2216}}},{"type":"raw","value":"<code class=\"language-text\">ComponentPropsWithRef</code>","position":{"start":{"line":47,"column":42,"offset":2216},"end":{"line":47,"column":65,"offset":2239}}},{"type":"text","value":", but you may prefer to be explicit about whether or not the component's refs are forwarded, which is what we have chosen to demonstrate. The tradeoff is slightly more intimidating terminology.","position":{"start":{"line":47,"column":65,"offset":2239},"end":{"line":47,"column":258,"offset":2432}}}],"position":{"start":{"line":47,"column":1,"offset":2175},"end":{"line":47,"column":258,"offset":2432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"More info: ","position":{"start":{"line":49,"column":1,"offset":2434},"end":{"line":49,"column":12,"offset":2445}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/","position":{"start":{"line":49,"column":12,"offset":2445},"end":{"line":49,"column":110,"offset":2543}}}],"position":{"start":{"line":49,"column":12,"offset":2445},"end":{"line":49,"column":110,"offset":2543}}}],"position":{"start":{"line":49,"column":1,"offset":2434},"end":{"line":49,"column":110,"offset":2543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Maybe ","position":{"start":{"line":51,"column":5,"offset":2549},"end":{"line":51,"column":11,"offset":2555}}},{"type":"raw","value":"<code class=\"language-text\">JSX.IntrinsicElements</code>","position":{"start":{"line":51,"column":11,"offset":2555},"end":{"line":51,"column":34,"offset":2578}}},{"type":"text","value":" or ","position":{"start":{"line":51,"column":34,"offset":2578},"end":{"line":51,"column":38,"offset":2582}}},{"type":"raw","value":"<code class=\"language-text\">React.[Element]HTMLAttributes</code>","position":{"start":{"line":51,"column":38,"offset":2582},"end":{"line":51,"column":69,"offset":2613}}}],"position":{"start":{"line":51,"column":1,"offset":2545},"end":{"line":51,"column":69,"offset":2613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are at least 2 other equivalent ways to do this, but they are more verbose:","position":{"start":{"line":53,"column":1,"offset":2615},"end":{"line":53,"column":82,"offset":2696}}}],"position":{"start":{"line":53,"column":1,"offset":2615},"end":{"line":53,"column":82,"offset":2696}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Method 1: JSX.IntrinsicElements</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">btnType</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements<span class=\"token punctuation\">[</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannot inline or will error</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">btnType</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// etc</span>\n\n<span class=\"token comment\">// Method 2: React.[Element]HTMLAttributes</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ButtonHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span></code></pre></div>","position":{"start":{"line":55,"column":1,"offset":2698},"end":{"line":62,"column":4,"offset":3004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Looking at ","position":{"start":{"line":64,"column":1,"offset":3006},"end":{"line":64,"column":12,"offset":3017}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f3134f4897c8473f590cbcdd5788da8d59796f45/types/react/index.d.ts#L821"},"children":[{"type":"text","value":"the source for ","position":{"start":{"line":64,"column":13,"offset":3018},"end":{"line":64,"column":28,"offset":3033}}},{"type":"raw","value":"<code class=\"language-text\">ComponentProps</code>","position":{"start":{"line":64,"column":28,"offset":3033},"end":{"line":64,"column":44,"offset":3049}}}],"position":{"start":{"line":64,"column":12,"offset":3017},"end":{"line":64,"column":171,"offset":3176}}},{"type":"text","value":" shows that this is a clever wrapper for ","position":{"start":{"line":64,"column":171,"offset":3176},"end":{"line":64,"column":212,"offset":3217}}},{"type":"raw","value":"<code class=\"language-text\">JSX.IntrinsicElements</code>","position":{"start":{"line":64,"column":212,"offset":3217},"end":{"line":64,"column":235,"offset":3240}}},{"type":"text","value":", whereas the second method relies on specialized interfaces with unfamiliar naming/capitalization.","position":{"start":{"line":64,"column":235,"offset":3240},"end":{"line":64,"column":334,"offset":3339}}}],"position":{"start":{"line":64,"column":1,"offset":3006},"end":{"line":64,"column":334,"offset":3339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: There are over 50 of these specialized interfaces available - look for ","position":{"start":{"line":66,"column":3,"offset":3343},"end":{"line":66,"column":80,"offset":3420}}},{"type":"raw","value":"<code class=\"language-text\">HTMLAttributes</code>","position":{"start":{"line":66,"column":80,"offset":3420},"end":{"line":66,"column":96,"offset":3436}}},{"type":"text","value":" in our ","position":{"start":{"line":66,"column":96,"offset":3436},"end":{"line":66,"column":104,"offset":3444}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/advanced/types_react_api#typesreact"},"children":[{"type":"raw","value":"<code class=\"language-text\">@types/react</code>","position":{"start":{"line":66,"column":105,"offset":3445},"end":{"line":66,"column":119,"offset":3459}}},{"type":"text","value":" commentary","position":{"start":{"line":66,"column":119,"offset":3459},"end":{"line":66,"column":130,"offset":3470}}}],"position":{"start":{"line":66,"column":104,"offset":3444},"end":{"line":66,"column":221,"offset":3561}}},{"type":"text","value":".","position":{"start":{"line":66,"column":221,"offset":3561},"end":{"line":66,"column":222,"offset":3562}}}],"position":{"start":{"line":66,"column":3,"offset":3343},"end":{"line":66,"column":222,"offset":3562}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":3341},"end":{"line":66,"column":222,"offset":3562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ultimately, ","position":{"start":{"line":68,"column":1,"offset":3564},"end":{"line":68,"column":13,"offset":3576}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/pull/276"},"children":[{"type":"text","value":"we picked the ","position":{"start":{"line":68,"column":14,"offset":3577},"end":{"line":68,"column":28,"offset":3591}}},{"type":"raw","value":"<code class=\"language-text\">ComponentProps</code>","position":{"start":{"line":68,"column":28,"offset":3591},"end":{"line":68,"column":44,"offset":3607}}},{"type":"text","value":" method","position":{"start":{"line":68,"column":44,"offset":3607},"end":{"line":68,"column":51,"offset":3614}}}],"position":{"start":{"line":68,"column":13,"offset":3576},"end":{"line":68,"column":110,"offset":3673}}},{"type":"text","value":" as it involves the least TS specific jargon and has the most ease of use. But you'll be fine with either of these methods if you prefer.","position":{"start":{"line":68,"column":110,"offset":3673},"end":{"line":68,"column":247,"offset":3810}}}],"position":{"start":{"line":68,"column":1,"offset":3564},"end":{"line":68,"column":247,"offset":3810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Definitely not ","position":{"start":{"line":70,"column":5,"offset":3816},"end":{"line":70,"column":20,"offset":3831}}},{"type":"raw","value":"<code class=\"language-text\">React.HTMLProps</code>","position":{"start":{"line":70,"column":20,"offset":3831},"end":{"line":70,"column":37,"offset":3848}}},{"type":"text","value":" or ","position":{"start":{"line":70,"column":37,"offset":3848},"end":{"line":70,"column":41,"offset":3852}}},{"type":"raw","value":"<code class=\"language-text\">React.HTMLAttributes</code>","position":{"start":{"line":70,"column":41,"offset":3852},"end":{"line":70,"column":63,"offset":3874}}}],"position":{"start":{"line":70,"column":1,"offset":3812},"end":{"line":70,"column":63,"offset":3874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":72,"column":1,"offset":3876},"end":{"line":72,"column":35,"offset":3910}}},{"type":"raw","value":"<code class=\"language-text\">React.HTMLProps</code>","position":{"start":{"line":72,"column":35,"offset":3910},"end":{"line":72,"column":52,"offset":3927}}},{"type":"text","value":":","position":{"start":{"line":72,"column":52,"offset":3927},"end":{"line":72,"column":53,"offset":3928}}}],"position":{"start":{"line":72,"column":1,"offset":3876},"end":{"line":72,"column":53,"offset":3928}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>HTMLProps<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    specialProp<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> specialProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ERROR: Type 'string' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":74,"column":1,"offset":3930},"end":{"line":83,"column":4,"offset":4264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It infers a too-wide type of ","position":{"start":{"line":85,"column":1,"offset":4266},"end":{"line":85,"column":30,"offset":4295}}},{"type":"raw","value":"<code class=\"language-text\">string</code>","position":{"start":{"line":85,"column":30,"offset":4295},"end":{"line":85,"column":38,"offset":4303}}},{"type":"text","value":" for ","position":{"start":{"line":85,"column":38,"offset":4303},"end":{"line":85,"column":43,"offset":4308}}},{"type":"raw","value":"<code class=\"language-text\">type</code>","position":{"start":{"line":85,"column":43,"offset":4308},"end":{"line":85,"column":49,"offset":4314}}},{"type":"text","value":", because it ","position":{"start":{"line":85,"column":49,"offset":4314},"end":{"line":85,"column":62,"offset":4327}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/128#issuecomment-508103558"},"children":[{"type":"text","value":"uses ","position":{"start":{"line":85,"column":63,"offset":4328},"end":{"line":85,"column":68,"offset":4333}}},{"type":"raw","value":"<code class=\"language-text\">AllHTMLAttributes</code>","position":{"start":{"line":85,"column":68,"offset":4333},"end":{"line":85,"column":87,"offset":4352}}},{"type":"text","value":" under the hood","position":{"start":{"line":85,"column":87,"offset":4352},"end":{"line":85,"column":102,"offset":4367}}}],"position":{"start":{"line":85,"column":62,"offset":4327},"end":{"line":85,"column":186,"offset":4451}}},{"type":"text","value":".","position":{"start":{"line":85,"column":186,"offset":4451},"end":{"line":85,"column":187,"offset":4452}}}],"position":{"start":{"line":85,"column":1,"offset":4266},"end":{"line":85,"column":187,"offset":4452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":87,"column":1,"offset":4454},"end":{"line":87,"column":35,"offset":4488}}},{"type":"raw","value":"<code class=\"language-text\">React.HTMLAttributes</code>","position":{"start":{"line":87,"column":35,"offset":4488},"end":{"line":87,"column":57,"offset":4510}}},{"type":"text","value":":","position":{"start":{"line":87,"column":57,"offset":4510},"end":{"line":87,"column":58,"offset":4511}}}],"position":{"start":{"line":87,"column":1,"offset":4454},"end":{"line":87,"column":58,"offset":4511}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>HTMLAttributes<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* etc */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Property 'type' does not exist on type 'IntrinsicAttributes &amp; ButtonProps'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> text </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":89,"column":1,"offset":4513},"end":{"line":98,"column":4,"offset":4778}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":100,"column":1,"offset":4780},"end":{"line":100,"column":11,"offset":4790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a Component","position":{"start":{"line":102,"column":5,"offset":4796},"end":{"line":102,"column":35,"offset":4826}}}],"position":{"start":{"line":102,"column":1,"offset":4792},"end":{"line":102,"column":35,"offset":4826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TODO: this section needs work to make it simplified.","position":{"start":{"line":104,"column":3,"offset":4830},"end":{"line":104,"column":55,"offset":4882}}}],"position":{"start":{"line":104,"column":3,"offset":4830},"end":{"line":104,"column":55,"offset":4882}}},{"type":"text","value":"\n"}],"position":{"start":{"line":104,"column":1,"offset":4828},"end":{"line":104,"column":55,"offset":4882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: same as above, but for a React Component you don't have access to the underlying props","position":{"start":{"line":106,"column":1,"offset":4884},"end":{"line":106,"column":96,"offset":4979}}}],"position":{"start":{"line":106,"column":1,"offset":4884},"end":{"line":106,"column":96,"offset":4979}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Card <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> $ElementProps<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Box<span class=\"token operator\">></span> <span class=\"token comment\">// new utility, see below</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":4981},"end":{"line":118,"column":4,"offset":5251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extract a component's props by inferring them","position":{"start":{"line":120,"column":1,"offset":5253},"end":{"line":120,"column":56,"offset":5308}}}],"position":{"start":{"line":120,"column":1,"offset":5253},"end":{"line":120,"column":56,"offset":5308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":122,"column":1,"offset":5310},"end":{"line":122,"column":9,"offset":5318}}}],"position":{"start":{"line":122,"column":1,"offset":5310},"end":{"line":122,"column":9,"offset":5318}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ReactUtilityTypes.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">$ElementProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ComponentType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> Props<span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>Props <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> Props <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":124,"column":1,"offset":5320},"end":{"line":127,"column":4,"offset":5481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage:","position":{"start":{"line":129,"column":1,"offset":5483},"end":{"line":129,"column":7,"offset":5489}}}],"position":{"start":{"line":129,"column":1,"offset":5483},"end":{"line":129,"column":7,"offset":5489}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Recompose <span class=\"token keyword\">from</span> <span class=\"token string\">'recompose'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ComponentType<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span>$ElementProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">>></span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    defaults<span class=\"token operator\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span>\n    Component<span class=\"token operator\">:</span> <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentType<span class=\"token operator\">&lt;</span>$ElementProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">>></span> <span class=\"token operator\">=></span> Recompose<span class=\"token punctuation\">.</span><span class=\"token function\">defaultProps</span><span class=\"token punctuation\">(</span>defaults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":131,"column":1,"offset":5491},"end":{"line":137,"column":4,"offset":5775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks ","position":{"start":{"line":139,"column":2,"offset":5778},"end":{"line":139,"column":9,"offset":5785}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/23"},"children":[{"type":"text","value":"dmisdm","position":{"start":{"line":139,"column":10,"offset":5786},"end":{"line":139,"column":16,"offset":5792}}}],"position":{"start":{"line":139,"column":9,"offset":5785},"end":{"line":139,"column":76,"offset":5852}}}],"position":{"start":{"line":139,"column":1,"offset":5777},"end":{"line":139,"column":77,"offset":5853}}}],"position":{"start":{"line":139,"column":1,"offset":5777},"end":{"line":139,"column":77,"offset":5853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":":new: You should also consider whether to explicitly forward refs:","position":{"start":{"line":141,"column":1,"offset":5855},"end":{"line":141,"column":67,"offset":5921}}}],"position":{"start":{"line":141,"column":1,"offset":5855},"end":{"line":141,"column":67,"offset":5921}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// base button, with ref forwarding</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'submit'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'button'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Ref</span> <span class=\"token operator\">=</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">forwardRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Ref<span class=\"token punctuation\">,</span> Props<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyCustomButtonClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// second layer button, no need for forwardRef (TODO: doublecheck this)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DoubleWrappedProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ComponentPropsWithRef<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> FancyButton<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    specialProp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DoubleWrappedButton</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> DoubleWrappedProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> specialProp<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> btnRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DoubleWrappedButton</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>btnRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            text</span><span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DoubleWrappedButton</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":143,"column":1,"offset":5923},"end":{"line":172,"column":4,"offset":6857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIwPTNwBGaWHArjDBAB2AGjgB3YDAAWcSgTgFoY5FAAmwQQHNGMAJ5huABWJh0AXjgBvOLinAANqsqCAXJiowAdNjwwAchCqWDRwegZuAESoPOwgkhFwAD5wEex8AoIJAL70DFgAHpCwofrc2PIWABIAKgCyADIAQulCAKL2WCBYgjC5BUXwuEKo8ABiyIK4us38QnAWPvieilDKauUAPOWixhCmAHwAFIdgJqiicgCU8-twh4xwcBtps4KyWARmlnJZNvZoqD8yC6ZgitV0AGF-qhAcCsAkwlgvqc9qhPIisvsHo8rCjTJ5bA4nN0stiNswXhksQxLpdcowWGxUFghoJVHB-rosFBeK9GP1oPANDBuQQ8NwACIQGIdADqUGQYAMql2pjgBRFbPQiy8EJIkEE3RgqtQsskUk2iIg8nGk2mLUEt0s2NQBlwwGQ9lVAH43CMoBpNLlSXlCoKFDxJjBgHMpTKsPLFcqZhkTmc3HH2HKFUqsCqztdnQxHqyRlY4K6WR6vSYLh9RJ5G5Qy78LHjULlHpQYDwoG9ng73p9vh9fpZG55mzBfsx9sGGQxWHAeKhkJosIwCJH8DG3gBBJWHQvY0vwdgwQTlebuXyeFdYTY1BoptodLo9I6CHj2ewAQku2Ldr2-aZtmSZ5i+byIqClJCAkchfOel6jrcIr5PA5KgQmObJg61IhkAA"},"children":[{"type":"text","value":"TS Playground link","position":{"start":{"line":174,"column":3,"offset":6861},"end":{"line":174,"column":21,"offset":6879}}}],"position":{"start":{"line":174,"column":2,"offset":6860},"end":{"line":174,"column":817,"offset":7675}}}],"position":{"start":{"line":174,"column":1,"offset":6859},"end":{"line":174,"column":818,"offset":7676}}}],"position":{"start":{"line":174,"column":1,"offset":6859},"end":{"line":174,"column":818,"offset":7676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polymorphic Components (e.g. with ","position":{"start":{"line":176,"column":4,"offset":7681},"end":{"line":176,"column":38,"offset":7715}}},{"type":"raw","value":"<code class=\"language-text\">as</code>","position":{"start":{"line":176,"column":38,"offset":7715},"end":{"line":176,"column":42,"offset":7719}}},{"type":"text","value":" props)","position":{"start":{"line":176,"column":42,"offset":7719},"end":{"line":176,"column":49,"offset":7726}}}],"position":{"start":{"line":176,"column":1,"offset":7678},"end":{"line":176,"column":49,"offset":7726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Polymorphic Components\" = passing a component to be rendered, e.g. with ","position":{"start":{"line":178,"column":3,"offset":7730},"end":{"line":178,"column":76,"offset":7803}}},{"type":"raw","value":"<code class=\"language-text\">as</code>","position":{"start":{"line":178,"column":76,"offset":7803},"end":{"line":178,"column":80,"offset":7807}}},{"type":"text","value":" props","position":{"start":{"line":178,"column":80,"offset":7807},"end":{"line":178,"column":86,"offset":7813}}}],"position":{"start":{"line":178,"column":3,"offset":7730},"end":{"line":178,"column":86,"offset":7813}}},{"type":"text","value":"\n"}],"position":{"start":{"line":178,"column":1,"offset":7728},"end":{"line":178,"column":86,"offset":7813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ElementType</code>","position":{"start":{"line":180,"column":1,"offset":7815},"end":{"line":180,"column":14,"offset":7828}}},{"type":"text","value":" is pretty useful to cover most types that can be passed to createElement e.g.","position":{"start":{"line":180,"column":14,"offset":7828},"end":{"line":180,"column":92,"offset":7906}}}],"position":{"start":{"line":180,"column":1,"offset":7815},"end":{"line":180,"column":92,"offset":7906}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">PassThrough</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ElementType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":182,"column":1,"offset":7908},"end":{"line":188,"column":4,"offset":8046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might also see this with React Router:","position":{"start":{"line":190,"column":1,"offset":8048},"end":{"line":190,"column":43,"offset":8090}}}],"position":{"start":{"line":190,"column":1,"offset":8048},"end":{"line":190,"column":43,"offset":8090}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PrivateRoute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> component<span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PrivateRouteProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoggedIn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> isLoggedIn <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Redirect</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":192,"column":1,"offset":8092},"end":{"line":198,"column":4,"offset":8296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more info you can refer to these resources:","position":{"start":{"line":200,"column":1,"offset":8298},"end":{"line":200,"column":48,"offset":8345}}}],"position":{"start":{"line":200,"column":1,"offset":8298},"end":{"line":200,"column":48,"offset":8345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/polymorphic-react-components/"},"children":[{"type":"text","value":"https://blog.andrewbran.ch/polymorphic-react-components/","position":{"start":{"line":202,"column":3,"offset":8349},"end":{"line":202,"column":59,"offset":8405}}}],"position":{"start":{"line":202,"column":3,"offset":8349},"end":{"line":202,"column":59,"offset":8405}}}],"position":{"start":{"line":202,"column":1,"offset":8347},"end":{"line":202,"column":59,"offset":8405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/kripod/react-polymorphic-box"},"children":[{"type":"text","value":"https://github.com/kripod/react-polymorphic-box","position":{"start":{"line":203,"column":3,"offset":8408},"end":{"line":203,"column":50,"offset":8455}}}],"position":{"start":{"line":203,"column":3,"offset":8408},"end":{"line":203,"column":50,"offset":8455}}}],"position":{"start":{"line":203,"column":1,"offset":8406},"end":{"line":203,"column":50,"offset":8455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom"},"children":[{"type":"text","value":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom","position":{"start":{"line":204,"column":3,"offset":8458},"end":{"line":204,"column":124,"offset":8579}}}],"position":{"start":{"line":204,"column":3,"offset":8458},"end":{"line":204,"column":124,"offset":8579}}}],"position":{"start":{"line":204,"column":1,"offset":8456},"end":{"line":204,"column":124,"offset":8579}}},{"type":"text","value":"\n"}],"position":{"start":{"line":202,"column":1,"offset":8347},"end":{"line":204,"column":124,"offset":8579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/69"},"children":[{"type":"text","value":"Thanks @eps1lon","position":{"start":{"line":206,"column":2,"offset":8582},"end":{"line":206,"column":17,"offset":8597}}}],"position":{"start":{"line":206,"column":1,"offset":8581},"end":{"line":206,"column":97,"offset":8677}}},{"type":"text","value":" and ","position":{"start":{"line":206,"column":97,"offset":8677},"end":{"line":206,"column":102,"offset":8682}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/151"},"children":[{"type":"text","value":"@karol-majewski","position":{"start":{"line":206,"column":103,"offset":8683},"end":{"line":206,"column":118,"offset":8698}}}],"position":{"start":{"line":206,"column":102,"offset":8682},"end":{"line":206,"column":179,"offset":8759}}},{"type":"text","value":" for thoughts!","position":{"start":{"line":206,"column":179,"offset":8759},"end":{"line":206,"column":193,"offset":8773}}}],"position":{"start":{"line":206,"column":1,"offset":8581},"end":{"line":206,"column":193,"offset":8773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Generic Components","position":{"start":{"line":208,"column":4,"offset":8778},"end":{"line":208,"column":22,"offset":8796}}}],"position":{"start":{"line":208,"column":1,"offset":8775},"end":{"line":208,"column":22,"offset":8796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just as you can make generic functions and classes in TypeScript, you can also make generic components to take advantage of the type system for reusable type safety. Both Props and State can take advantage of the same generic types, although it probably makes more sense for Props than for State. You can then use the generic type to annotate types of any variables defined inside your function / class scope.","position":{"start":{"line":210,"column":1,"offset":8798},"end":{"line":210,"column":410,"offset":9207}}}],"position":{"start":{"line":210,"column":1,"offset":8798},"end":{"line":210,"column":410,"offset":9207}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">List</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> renderItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You can use type T in List function scope.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>renderItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Clone</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":212,"column":1,"offset":9209},"end":{"line":228,"column":4,"offset":9681}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can then use the generic components and get nice type safety through type inference:","position":{"start":{"line":230,"column":1,"offset":9683},"end":{"line":230,"column":89,"offset":9771}}}],"position":{"start":{"line":230,"column":1,"offset":9683},"end":{"line":230,"column":89,"offset":9771}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span>\n        <span class=\"token attr-name\">items</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token comment\">// type of 'string' inferred</span>\n        <span class=\"token attr-name\">renderItem</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Error: Property 'toPrecision' does not exist on type 'string'. */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span>body\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":232,"column":1,"offset":9773},"end":{"line":245,"column":4,"offset":10109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As of ","position":{"start":{"line":247,"column":1,"offset":10111},"end":{"line":247,"column":7,"offset":10117}}},{"type":"element","tagName":"a","properties":{"href":"#typescript-29"},"children":[{"type":"text","value":"TS 2.9","position":{"start":{"line":247,"column":8,"offset":10118},"end":{"line":247,"column":14,"offset":10124}}}],"position":{"start":{"line":247,"column":7,"offset":10117},"end":{"line":247,"column":31,"offset":10141}}},{"type":"text","value":", you can also supply the type parameter in your JSX to opt out of type inference:","position":{"start":{"line":247,"column":31,"offset":10141},"end":{"line":247,"column":113,"offset":10223}}}],"position":{"start":{"line":247,"column":1,"offset":10111},"end":{"line":247,"column":113,"offset":10223}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n        items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Error: Type 'string' is not assignable to type 'number'.</span>\n        renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span>body\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":249,"column":1,"offset":10225},"end":{"line":257,"column":4,"offset":10459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also use Generics using fat arrow function style:","position":{"start":{"line":259,"column":1,"offset":10461},"end":{"line":259,"column":58,"offset":10518}}}],"position":{"start":{"line":259,"column":1,"offset":10461},"end":{"line":259,"column":58,"offset":10518}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Note the &lt;T extends unknown> before the function definition.</span>\n<span class=\"token comment\">// You can't use just `&lt;T>` as it will confuse the TSX parser whether it's a JSX tag or a Generic Declaration.</span>\n<span class=\"token comment\">// You can also use &lt;T,> https://github.com/microsoft/TypeScript/issues/15713#issuecomment-499474386</span>\n<span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">unknown</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(props: Props&lt;T>) => </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> renderItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You can use type T in List function scope.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>renderItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Clone</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>","position":{"start":{"line":261,"column":1,"offset":10520},"end":{"line":281,"column":4,"offset":11289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The same for using classes: (Credit: ","position":{"start":{"line":283,"column":1,"offset":11291},"end":{"line":283,"column":38,"offset":11328}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/WrocTypeScript/status/1163234064343736326"},"children":[{"type":"text","value":"Karol Majewski","position":{"start":{"line":283,"column":39,"offset":11329},"end":{"line":283,"column":53,"offset":11343}}}],"position":{"start":{"line":283,"column":38,"offset":11328},"end":{"line":283,"column":117,"offset":11407}}},{"type":"text","value":"'s ","position":{"start":{"line":283,"column":117,"offset":11407},"end":{"line":283,"column":120,"offset":11410}}},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/karol-majewski/befaf05af73c7cb3248b4e084ae5df71"},"children":[{"type":"text","value":"gist","position":{"start":{"line":283,"column":121,"offset":11411},"end":{"line":283,"column":125,"offset":11415}}}],"position":{"start":{"line":283,"column":120,"offset":11410},"end":{"line":283,"column":199,"offset":11489}}},{"type":"text","value":")","position":{"start":{"line":283,"column":199,"offset":11489},"end":{"line":283,"column":200,"offset":11490}}}],"position":{"start":{"line":283,"column":1,"offset":11291},"end":{"line":283,"column":200,"offset":11490}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>PureComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// You can use type T inside List class.</span>\n    state<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> renderItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// You can use type T inside List class.</span>\n        <span class=\"token keyword\">const</span> clone<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>renderItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> items<span class=\"token operator\">:</span> clone <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Clone</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":285,"column":1,"offset":11492},"end":{"line":313,"column":4,"offset":12207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Though you can't use Generic Type Parameters for Static Members:","position":{"start":{"line":315,"column":1,"offset":12209},"end":{"line":315,"column":65,"offset":12273}}}],"position":{"start":{"line":315,"column":1,"offset":12209},"end":{"line":315,"column":65,"offset":12273}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>PureComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Static members cannot reference class type parameters.ts(2302)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> items<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":317,"column":1,"offset":12275},"end":{"line":324,"column":4,"offset":12538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To fix this you need to convert your static function to a type inferred function:","position":{"start":{"line":326,"column":1,"offset":12540},"end":{"line":326,"column":82,"offset":12621}}}],"position":{"start":{"line":326,"column":1,"offset":12540},"end":{"line":326,"column":82,"offset":12621}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>PureComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">getDerivedStateFromProps</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> State<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> items<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":328,"column":1,"offset":12623},"end":{"line":334,"column":4,"offset":12819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Generic components with children","position":{"start":{"line":336,"column":5,"offset":12825},"end":{"line":336,"column":37,"offset":12857}}}],"position":{"start":{"line":336,"column":1,"offset":12821},"end":{"line":336,"column":37,"offset":12857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":338,"column":1,"offset":12859},"end":{"line":338,"column":11,"offset":12869}}},{"type":"text","value":" is usually not defined as a part of the props type. Unless ","position":{"start":{"line":338,"column":11,"offset":12869},"end":{"line":338,"column":71,"offset":12929}}},{"type":"raw","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":338,"column":71,"offset":12929},"end":{"line":338,"column":81,"offset":12939}}},{"type":"text","value":" are explicitly defined as a part of the ","position":{"start":{"line":338,"column":81,"offset":12939},"end":{"line":338,"column":122,"offset":12980}}},{"type":"raw","value":"<code class=\"language-text\">props</code>","position":{"start":{"line":338,"column":122,"offset":12980},"end":{"line":338,"column":129,"offset":12987}}},{"type":"text","value":" type, an attempt to use ","position":{"start":{"line":338,"column":129,"offset":12987},"end":{"line":338,"column":154,"offset":13012}}},{"type":"raw","value":"<code class=\"language-text\">props.children</code>","position":{"start":{"line":338,"column":154,"offset":13012},"end":{"line":338,"column":170,"offset":13028}}},{"type":"text","value":" in JSX or in the function body will fail:","position":{"start":{"line":338,"column":170,"offset":13028},"end":{"line":338,"column":212,"offset":13070}}}],"position":{"start":{"line":338,"column":1,"offset":12859},"end":{"line":338,"column":212,"offset":13070}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Property 'children' does not exist on type 'WrapperProps&lt;T>'. */</span>\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nType '{ children: string; item: string; renderItem: (item: string) => string; }' is not assignable to type 'IntrinsicAttributes &amp; WrapperProps&lt;string>'.\n  Property 'children' does not exist on type 'IntrinsicAttributes &amp; WrapperProps&lt;string>'.\n*/</span>\n\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">renderItem</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":340,"column":1,"offset":13072},"end":{"line":366,"column":4,"offset":13781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgHUoUwx6AFHMAZwA8AFQB8cAN4U4cYHRAAuOMIDc0uEWoATegEl5SgBRyki5QEo4AXnHJ0MAHR2MAOQg615GWgAWwADZamkrOjqFuHhQAvhQUAPQAVHC8EFywAJ4EvgFBSNT4cFoQSPxw1BDwSAAewPzwENRwMOlcBGwcaSkCIqL4DnAJcRRoDXWs7Jz01nAicNV02qUSUaKGYHz8Su2TUF1CYpY2kupEMACuUI2G6jKCWsAAbqI3MpLrqfwOmjpQ+qZrGwcJhA5hiXleMgk7wEDmygU0YIhgji9ye6nMniinniCQowhazHwEjgcNy1CUdSgNAA5ipZAY4JSaXTvnoGcYGUzqNTDuIubS4FECrUyhU4Ch+PxgNTqCgAEb+ZgwCBNAkEXS0KnUKVoACCMBgVLlZzopQAZOMOjwNoJ+b0HOouvRmlk-PC8gUiiVRZUamMGqrWvgNYaaDr9aHjaa4Bbtp0bXa+hRBrFyCNtfBTfArHBDLyZqjRAAJJD+fwqrPIwvDUbwADuEzS02u4MEcamwKsACIs12NHkfn8QFYJMDrOJgSsXhIs4iZnF21BnuQMUA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":368,"column":2,"offset":13784},"end":{"line":368,"column":35,"offset":13817}}}],"position":{"start":{"line":368,"column":1,"offset":13783},"end":{"line":368,"column":717,"offset":14499}}}],"position":{"start":{"line":368,"column":1,"offset":13783},"end":{"line":368,"column":717,"offset":14499}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To work around that, either add ","position":{"start":{"line":370,"column":1,"offset":14501},"end":{"line":370,"column":33,"offset":14533}}},{"type":"raw","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":370,"column":33,"offset":14533},"end":{"line":370,"column":43,"offset":14543}}},{"type":"text","value":" to the ","position":{"start":{"line":370,"column":43,"offset":14543},"end":{"line":370,"column":51,"offset":14551}}},{"type":"raw","value":"<code class=\"language-text\">WrapperProps</code>","position":{"start":{"line":370,"column":51,"offset":14551},"end":{"line":370,"column":65,"offset":14565}}},{"type":"text","value":" definition (possibly narrowing down its type, as needed):","position":{"start":{"line":370,"column":65,"offset":14565},"end":{"line":370,"column":123,"offset":14623}}}],"position":{"start":{"line":370,"column":1,"offset":14501},"end":{"line":370,"column":123,"offset":14623}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n    children<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The component will only accept a single string child</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":372,"column":1,"offset":14625},"end":{"line":387,"column":4,"offset":14987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"or wrap the type of the props in ","position":{"start":{"line":389,"column":1,"offset":14989},"end":{"line":389,"column":34,"offset":15022}}},{"type":"raw","value":"<code class=\"language-text\">React.PropsWithChildren</code>","position":{"start":{"line":389,"column":34,"offset":15022},"end":{"line":389,"column":59,"offset":15047}}},{"type":"text","value":" (this is what ","position":{"start":{"line":389,"column":59,"offset":15047},"end":{"line":389,"column":74,"offset":15062}}},{"type":"raw","value":"<code class=\"language-text\">React.FC&lt;></code>","position":{"start":{"line":389,"column":74,"offset":15062},"end":{"line":389,"column":86,"offset":15074}}},{"type":"text","value":" does):","position":{"start":{"line":389,"column":86,"offset":15074},"end":{"line":389,"column":93,"offset":15081}}}],"position":{"start":{"line":389,"column":1,"offset":14989},"end":{"line":389,"column":93,"offset":15081}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">renderItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropsWithChildren<span class=\"token operator\">&lt;</span>WrapperProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":391,"column":1,"offset":15083},"end":{"line":405,"column":4,"offset":15392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Typing Children","position":{"start":{"line":407,"column":4,"offset":15397},"end":{"line":407,"column":19,"offset":15412}}}],"position":{"start":{"line":407,"column":1,"offset":15394},"end":{"line":407,"column":19,"offset":15412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some API designs require some restriction on ","position":{"start":{"line":409,"column":1,"offset":15414},"end":{"line":409,"column":46,"offset":15459}}},{"type":"raw","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":409,"column":46,"offset":15459},"end":{"line":409,"column":56,"offset":15469}}},{"type":"text","value":" passed to a parent component. It is common to want to enforce these in types, but you should be aware of limitations to this ability.","position":{"start":{"line":409,"column":56,"offset":15469},"end":{"line":409,"column":190,"offset":15603}}}],"position":{"start":{"line":409,"column":1,"offset":15414},"end":{"line":409,"column":190,"offset":15603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CAN Do","position":{"start":{"line":411,"column":5,"offset":15609},"end":{"line":411,"column":20,"offset":15624}}}],"position":{"start":{"line":411,"column":1,"offset":15605},"end":{"line":411,"column":20,"offset":15624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can type the ","position":{"start":{"line":413,"column":1,"offset":15626},"end":{"line":413,"column":18,"offset":15643}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"structure","position":{"start":{"line":413,"column":20,"offset":15645},"end":{"line":413,"column":29,"offset":15654}}}],"position":{"start":{"line":413,"column":18,"offset":15643},"end":{"line":413,"column":31,"offset":15656}}},{"type":"text","value":" of your children: just one child, or a tuple of children.","position":{"start":{"line":413,"column":31,"offset":15656},"end":{"line":413,"column":89,"offset":15714}}}],"position":{"start":{"line":413,"column":1,"offset":15626},"end":{"line":413,"column":89,"offset":15714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following are valid:","position":{"start":{"line":415,"column":1,"offset":15716},"end":{"line":415,"column":25,"offset":15740}}}],"position":{"start":{"line":415,"column":1,"offset":15716},"end":{"line":415,"column":25,"offset":15740}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OneChild</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TwoChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayOfProps</span> <span class=\"token operator\">=</span> SomeProp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NumbersChildren</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TwoNumbersChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":417,"column":1,"offset":15742},"end":{"line":423,"column":4,"offset":15957}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>\nDon't forget that you can also use `prop-types` if TS fails you.\n</summary>","position":{"start":{"line":425,"column":1,"offset":15959},"end":{"line":428,"column":11,"offset":16054}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Parent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        props<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// could share `propTypes` to the child</span>\n            value<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span>isRequired\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":430,"column":1,"offset":16056},"end":{"line":439,"column":4,"offset":16282}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":441,"column":1,"offset":16284},"end":{"line":441,"column":11,"offset":16294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CANNOT Do","position":{"start":{"line":443,"column":5,"offset":16300},"end":{"line":443,"column":23,"offset":16318}}}],"position":{"start":{"line":443,"column":1,"offset":16296},"end":{"line":443,"column":23,"offset":16318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing you cannot do is ","position":{"start":{"line":445,"column":1,"offset":16320},"end":{"line":445,"column":28,"offset":16347}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"specify which components","position":{"start":{"line":445,"column":30,"offset":16349},"end":{"line":445,"column":54,"offset":16373}}}],"position":{"start":{"line":445,"column":28,"offset":16347},"end":{"line":445,"column":56,"offset":16375}}},{"type":"text","value":" the children are, e.g. If you want to express the fact that \"React Router ","position":{"start":{"line":445,"column":56,"offset":16375},"end":{"line":445,"column":131,"offset":16450}}},{"type":"raw","value":"<code class=\"language-text\">&lt;Routes></code>","position":{"start":{"line":445,"column":131,"offset":16450},"end":{"line":445,"column":141,"offset":16460}}},{"type":"text","value":" can only have ","position":{"start":{"line":445,"column":141,"offset":16460},"end":{"line":445,"column":156,"offset":16475}}},{"type":"raw","value":"<code class=\"language-text\">&lt;Route></code>","position":{"start":{"line":445,"column":156,"offset":16475},"end":{"line":445,"column":165,"offset":16484}}},{"type":"text","value":" as children, nothing else is allowed\" in TypeScript.","position":{"start":{"line":445,"column":165,"offset":16484},"end":{"line":445,"column":218,"offset":16537}}}],"position":{"start":{"line":445,"column":1,"offset":16320},"end":{"line":445,"column":218,"offset":16537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because when you write a JSX expression (","position":{"start":{"line":447,"column":1,"offset":16539},"end":{"line":447,"column":50,"offset":16588}}},{"type":"raw","value":"<code class=\"language-text\">const foo = &lt;MyComponent foo='foo' /></code>","position":{"start":{"line":447,"column":50,"offset":16588},"end":{"line":447,"column":89,"offset":16627}}},{"type":"text","value":"), the resultant type is blackboxed into a generic JSX.Element type. (","position":{"start":{"line":447,"column":89,"offset":16627},"end":{"line":447,"column":159,"offset":16697}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/271"},"children":[{"type":"text","value":"thanks @ferdaber","position":{"start":{"line":447,"column":161,"offset":16699},"end":{"line":447,"column":177,"offset":16715}}}],"position":{"start":{"line":447,"column":160,"offset":16698},"end":{"line":447,"column":238,"offset":16776}}}],"position":{"start":{"line":447,"column":159,"offset":16697},"end":{"line":447,"column":239,"offset":16777}}},{"type":"text","value":")","position":{"start":{"line":447,"column":239,"offset":16777},"end":{"line":447,"column":240,"offset":16778}}}],"position":{"start":{"line":447,"column":1,"offset":16539},"end":{"line":447,"column":240,"offset":16778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Type Narrowing based on Props","position":{"start":{"line":449,"column":4,"offset":16783},"end":{"line":449,"column":33,"offset":16812}}}],"position":{"start":{"line":449,"column":1,"offset":16780},"end":{"line":449,"column":33,"offset":16812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What you want:","position":{"start":{"line":451,"column":1,"offset":16814},"end":{"line":451,"column":15,"offset":16828}}}],"position":{"start":{"line":451,"column":1,"offset":16814},"end":{"line":451,"column":15,"offset":16828}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Usage</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 😎 All good */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.google.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Test\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 😭 Error, `disabled` doesnt exist on anchor element */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">disabled</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Test\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":453,"column":1,"offset":16830},"end":{"line":469,"column":4,"offset":17207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How to implement: Use ","position":{"start":{"line":471,"column":1,"offset":17209},"end":{"line":471,"column":23,"offset":17231}}},{"type":"element","tagName":"a","properties":{"href":"https://basarat.gitbooks.io/typescript/docs/types/typeGuard.html#user-defined-type-guards"},"children":[{"type":"text","value":"type guards","position":{"start":{"line":471,"column":24,"offset":17232},"end":{"line":471,"column":35,"offset":17243}}}],"position":{"start":{"line":471,"column":23,"offset":17231},"end":{"line":471,"column":127,"offset":17335}}},{"type":"text","value":"!","position":{"start":{"line":471,"column":127,"offset":17335},"end":{"line":471,"column":128,"offset":17336}}}],"position":{"start":{"line":471,"column":1,"offset":17209},"end":{"line":471,"column":128,"offset":17336}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Button props</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>ButtonHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Anchor props</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorProps</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>AnchorHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Input/output options</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Overload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> AnchorProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Guard to check if href exists in props</span>\n<span class=\"token keyword\">const</span> hasHref <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps <span class=\"token operator\">|</span> AnchorProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> props <span class=\"token keyword\">is</span> AnchorProps <span class=\"token operator\">=></span> <span class=\"token string\">'href'</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Component</span>\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> <span class=\"token function-variable function\">Overload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps <span class=\"token operator\">|</span> AnchorProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// anchor render</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasHref</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// button render</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":473,"column":1,"offset":17338},"end":{"line":500,"column":4,"offset":18033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoAekrgCEBXGGCAOzjBzAGcKYBPMEjqNmLAAqcucALyJiMAHQMmrABIAVALIAZAIJMowAEaMkXADwady0QFEANkhBIWMAHxwAZHADeFOHAAFkSYAPwAXHD0LAAmSJjALEgxANwUAL5p5BTUcLosaIHQ7JK8AkL5hdASENwycuiKlUVQVnoGxqYWbc3QDk4u7l6+-kEhEXBcMIYsAOZZmRQ5NACSLGCMlBCMG-C1MMCsPOT8gnAA8gBuSFD2ECgx9X7kAQAUHLVckTasNdwAlJEAFIAZQAGgp+s5XFk3h9uJFelA-lxAXBQRCoYMFlllnAAOL0FBQR7MOCFJBoADWcGAmDG8TgSAAHsAplJEiVPhQ0Ed4IEUFxVCF6u9JN8RL9JHAAD55AotFFo+EcqRIlEyNyjABEwXi2tpbBVuKoNAAwrhIElXDy+cIVCxIlcbncHqKVRKHRq5erJP9NSMXnBcigFcUiLEbqM6XBXgKhSExZ9-v6iDB6FA2OYUL4FHmVelg25YcGaCYHXAI3EoKM0xms+XRLn85JC5RixkTbkAKpcFCzJAUTDRDCHNi6MBgV7+54BOuZ2OjALmLVBgIBHyUABUcEAvBuAOD28vZ7HBZhAII8t5R0kv1+YfmwYMSBzBpNqAPpGeyhqkGvWYN9AiYBFqAAd3AhQzwgWZHAUXkQG1Vd12QuB1DMGBb2XSgHyQlDNx3XdAFo9uBbCgHAoAAGjgAADGI2RQL9kmouAYggMxXCZVkpjgVg4FDKooCZRxoXgK8bzXO8HxY+jGMef832ZRDMPXNCpmU8xsMlFhcKw3D-gWIA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":502,"column":2,"offset":18036},"end":{"line":502,"column":35,"offset":18069}}}],"position":{"start":{"line":502,"column":1,"offset":18035},"end":{"line":502,"column":944,"offset":18978}}}],"position":{"start":{"line":502,"column":1,"offset":18035},"end":{"line":502,"column":944,"offset":18978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Components, and JSX in general, are analogous to functions. When a component can render differently based on their props, it's similar to how a function can be overloaded to have multiple call signatures. In the same way, you can overload a function component's call signature to list all of its different \"versions\".","position":{"start":{"line":504,"column":1,"offset":18980},"end":{"line":504,"column":318,"offset":19297}}}],"position":{"start":{"line":504,"column":1,"offset":18980},"end":{"line":504,"column":318,"offset":19297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very common use case for this is to render something as either a button or an anchor, based on if it receives a ","position":{"start":{"line":506,"column":1,"offset":19299},"end":{"line":506,"column":115,"offset":19413}}},{"type":"raw","value":"<code class=\"language-text\">href</code>","position":{"start":{"line":506,"column":115,"offset":19413},"end":{"line":506,"column":121,"offset":19419}}},{"type":"text","value":" attribute.","position":{"start":{"line":506,"column":121,"offset":19419},"end":{"line":506,"column":132,"offset":19430}}}],"position":{"start":{"line":506,"column":1,"offset":19299},"end":{"line":506,"column":132,"offset":19430}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements<span class=\"token punctuation\">[</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorProps</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// optionally use a custom type guard</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPropsForAnchorElement</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps <span class=\"token operator\">|</span> AnchorProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> props <span class=\"token keyword\">is</span> AnchorProps <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'href'</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clickable</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ButtonProps <span class=\"token operator\">|</span> AnchorProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPropsForAnchorElement</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":508,"column":1,"offset":19432},"end":{"line":524,"column":4,"offset":19891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"They don't even need to be completely different props, as long as they have at least one difference in properties:","position":{"start":{"line":526,"column":1,"offset":19893},"end":{"line":526,"column":115,"offset":20007}}}],"position":{"start":{"line":526,"column":1,"offset":19893},"end":{"line":526,"column":115,"offset":20007}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LinkProps</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'href'</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> to<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RouterLink</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> LinkProps <span class=\"token operator\">|</span> AnchorProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":528,"column":1,"offset":20009},"end":{"line":538,"column":4,"offset":20268}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n<b>Approach: Generic Components</b>\n</summary>","position":{"start":{"line":540,"column":1,"offset":20270},"end":{"line":543,"column":11,"offset":20338}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example solution, see the further discussion for other solutions. ","position":{"start":{"line":545,"column":1,"offset":20340},"end":{"line":545,"column":78,"offset":20417}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks to ","position":{"start":{"line":545,"column":79,"offset":20418},"end":{"line":545,"column":89,"offset":20428}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/12#issuecomment-394440577"},"children":[{"type":"text","value":"@jpavon","position":{"start":{"line":545,"column":90,"offset":20429},"end":{"line":545,"column":97,"offset":20436}}}],"position":{"start":{"line":545,"column":89,"offset":20428},"end":{"line":545,"column":202,"offset":20541}}}],"position":{"start":{"line":545,"column":78,"offset":20417},"end":{"line":545,"column":203,"offset":20542}}}],"position":{"start":{"line":545,"column":1,"offset":20340},"end":{"line":545,"column":203,"offset":20542}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LinkProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorProps</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>AnchorHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RouterLinkProps</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>NavLinkProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'href'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Link <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> LinkProps <span class=\"token operator\">&amp;</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouterLinkProps</span> <span class=\"token operator\">?</span> RouterLinkProps <span class=\"token operator\">:</span> AnchorProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> RouterLinkProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavLink</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> RouterLinkProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> AnchorProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Link<span class=\"token operator\">&lt;</span>RouterLinkProps<span class=\"token operator\">></span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>My link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>Link<span class=\"token operator\">&lt;</span>AnchorProps<span class=\"token operator\">></span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>My link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>Link<span class=\"token operator\">&lt;</span>RouterLinkProps<span class=\"token operator\">></span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n    My link\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>","position":{"start":{"line":547,"column":1,"offset":20544},"end":{"line":565,"column":4,"offset":21152}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":567,"column":1,"offset":21154},"end":{"line":567,"column":11,"offset":21164}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n<b>Approach: Composition</b>\n</summary>","position":{"start":{"line":569,"column":1,"offset":21166},"end":{"line":572,"column":11,"offset":21227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to conditionally render a component, sometimes is better to use ","position":{"start":{"line":574,"column":1,"offset":21229},"end":{"line":574,"column":77,"offset":21305}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/composition-vs-inheritance.html"},"children":[{"type":"text","value":"React's composition model","position":{"start":{"line":574,"column":78,"offset":21306},"end":{"line":574,"column":103,"offset":21331}}}],"position":{"start":{"line":574,"column":77,"offset":21305},"end":{"line":574,"column":162,"offset":21390}}},{"type":"text","value":" to have simpler components and better to understand typings:","position":{"start":{"line":574,"column":162,"offset":21390},"end":{"line":574,"column":223,"offset":21451}}}],"position":{"start":{"line":574,"column":1,"offset":21229},"end":{"line":574,"column":223,"offset":21451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorProps</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>AnchorHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RouterLinkProps</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>AnchorProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'href'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentClass <span class=\"token operator\">|</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> AnchorButton<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span>AnchorProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> LinkButton<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span>RouterLinkProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">as</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>NavLink<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LinkButton</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LinkButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnchorButton</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AnchorButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnchorButton</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Login\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AnchorButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Property 'to' does not exist on type...</span></code></pre></div>","position":{"start":{"line":576,"column":1,"offset":21453},"end":{"line":602,"column":4,"offset":22293}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":604,"column":1,"offset":22295},"end":{"line":604,"column":11,"offset":22305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may also want to use Discriminated Unions, please check out ","position":{"start":{"line":606,"column":1,"offset":22307},"end":{"line":606,"column":65,"offset":22371}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/expressive-react-component-apis-with-discriminated-unions/"},"children":[{"type":"text","value":"Expressive React Component APIs with Discriminated Unions","position":{"start":{"line":606,"column":66,"offset":22372},"end":{"line":606,"column":123,"offset":22429}}}],"position":{"start":{"line":606,"column":65,"offset":22371},"end":{"line":606,"column":211,"offset":22517}}},{"type":"text","value":".","position":{"start":{"line":606,"column":211,"offset":22517},"end":{"line":606,"column":212,"offset":22518}}}],"position":{"start":{"line":606,"column":1,"offset":22307},"end":{"line":606,"column":212,"offset":22518}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a brief intuition for ","position":{"start":{"line":608,"column":1,"offset":22520},"end":{"line":608,"column":31,"offset":22550}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discriminated Union Types","position":{"start":{"line":608,"column":33,"offset":22552},"end":{"line":608,"column":58,"offset":22577}}}],"position":{"start":{"line":608,"column":31,"offset":22550},"end":{"line":608,"column":60,"offset":22579}}},{"type":"text","value":":","position":{"start":{"line":608,"column":60,"offset":22579},"end":{"line":608,"column":61,"offset":22580}}}],"position":{"start":{"line":608,"column":1,"offset":22520},"end":{"line":608,"column":61,"offset":22580}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UserTextEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'TextEvent'</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token operator\">:</span> HTMLInputElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserMouseEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'MouseEvent'</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserEvent</span> <span class=\"token operator\">=</span> UserTextEvent <span class=\"token operator\">|</span> UserMouseEvent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> UserEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'TextEvent'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n        event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLInputElement</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    event<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [number, number]</span>\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":610,"column":1,"offset":22582},"end":{"line":631,"column":4,"offset":23084}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Take care: TypeScript does not narrow the type of a Discriminated Union on the basis of typeof checks. The type guard has to be on the value of a key and not it's type.\n  </summary>","position":{"start":{"line":633,"column":1,"offset":23086},"end":{"line":636,"column":13,"offset":23291}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UserTextEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> target<span class=\"token operator\">:</span> HTMLInputElement <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserMouseEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> target<span class=\"token operator\">:</span> HTMLElement <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserEvent</span> <span class=\"token operator\">=</span> UserTextEvent <span class=\"token operator\">|</span> UserMouseEvent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> UserEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> event<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n        event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLInputElement | HTMLElement (!!!!)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    event<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [number, number]</span>\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLInputElement | HTMLElement (!!!!)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":638,"column":1,"offset":23293},"end":{"line":651,"column":4,"offset":23782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The above example does not work as we are not checking the value of ","position":{"start":{"line":653,"column":1,"offset":23784},"end":{"line":653,"column":69,"offset":23852}}},{"type":"raw","value":"<code class=\"language-text\">event.value</code>","position":{"start":{"line":653,"column":69,"offset":23852},"end":{"line":653,"column":82,"offset":23865}}},{"type":"text","value":" but only it's type. Read more about it ","position":{"start":{"line":653,"column":82,"offset":23865},"end":{"line":653,"column":122,"offset":23905}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/microsoft/TypeScript/issues/30506#issuecomment-474858198"},"children":[{"type":"text","value":"microsoft/TypeScript#30506 (comment)","position":{"start":{"line":653,"column":123,"offset":23906},"end":{"line":653,"column":159,"offset":23942}}}],"position":{"start":{"line":653,"column":122,"offset":23905},"end":{"line":653,"column":237,"offset":24020}}}],"position":{"start":{"line":653,"column":1,"offset":23784},"end":{"line":653,"column":237,"offset":24020}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":655,"column":1,"offset":24022},"end":{"line":655,"column":11,"offset":24032}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Discriminated Unions in TypeScript can also work with hook dependencies in React. The type matched is automatically updated when the corresponding union member based on which a hook depends, changes. Expand more to see an example usecase.\n   <br/>\n<br/>\n  </summary>","position":{"start":{"line":657,"column":1,"offset":24034},"end":{"line":662,"column":13,"offset":24324}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SingleElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isArray<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MultiElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isArray<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> SingleElement <span class=\"token operator\">|</span> MultiElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Sequence</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                value(s):\n                </span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>isArray <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">.</span>isArray <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>isArray<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span> <span class=\"token comment\">// TypeScript automatically matches the corresponding value type based on dependency change</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sequence</span></span> <span class=\"token attr-name\">isArray</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sequence</span></span> <span class=\"token attr-name\">isArray</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":664,"column":1,"offset":24326},"end":{"line":694,"column":4,"offset":25067}}},{"type":"text","value":"\n"},{"type":"raw","value":"<a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8dccAD5wA3vwETgqAIJQoyJgC44MKAFcs9CRIBuyADYblqVcAB2AcwDaAXRpxxAgL7jhY7QKmz5SuAQOomo66BkZwJlDmFloSTvS4EGYmcAAacDxwABRgypwQ3ACU6QB8ouKUMGpQZphUMAB0aoEAslggEJnBmUU8pZ0ecAA8ACbAOsXB2nqGWJmoBYqTEiJg9V5yCnAAZFtwq9Ma9QBWEOaZZAA0ZAUuAwIiAISr6z7bu-uhWLcegwD0o+NggULsErM8ZBsmBc9vUDlgbNDfr84AAVFhYVC4SJgeDINQwEjIGDAXAGfRMOAgIm4AAWGJUdLgCTkGMgZlGljgcJU6PEBXocToBDUZnwwEScGkYDA3TKAgqVRq-QkIzGTP0aFQADlkCAsDwAERSsAGiYDQZpF4KHgifz6QJOLmfG1kAgQCBkR2-M0-S0Qnw21QaR1wm1WV3uy7kABGyCgUbIsYAXmQbF6fQI-gCffy6E4gA\">\n<i>See this in TS Playground</i>\n</a>","position":{"start":{"line":696,"column":1,"offset":25069},"end":{"line":698,"column":5,"offset":25711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example, based on the ","position":{"start":{"line":700,"column":1,"offset":25713},"end":{"line":700,"column":36,"offset":25748}}},{"type":"raw","value":"<code class=\"language-text\">isArray</code>","position":{"start":{"line":700,"column":36,"offset":25748},"end":{"line":700,"column":45,"offset":25757}}},{"type":"text","value":" union member, the type of the ","position":{"start":{"line":700,"column":45,"offset":25757},"end":{"line":700,"column":76,"offset":25788}}},{"type":"raw","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":700,"column":76,"offset":25788},"end":{"line":700,"column":83,"offset":25795}}},{"type":"text","value":" hook dependency changes.","position":{"start":{"line":700,"column":83,"offset":25795},"end":{"line":700,"column":108,"offset":25820}}}],"position":{"start":{"line":700,"column":1,"offset":25713},"end":{"line":700,"column":108,"offset":25820}}},{"type":"text","value":"\n"},{"type":"raw","value":" </details>","position":{"start":{"line":702,"column":1,"offset":25822},"end":{"line":702,"column":12,"offset":25833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To streamline this you may also combine this with the concept of ","position":{"start":{"line":704,"column":1,"offset":25835},"end":{"line":704,"column":66,"offset":25900}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"User-Defined Type Guards","position":{"start":{"line":704,"column":68,"offset":25902},"end":{"line":704,"column":92,"offset":25926}}}],"position":{"start":{"line":704,"column":66,"offset":25900},"end":{"line":704,"column":94,"offset":25928}}},{"type":"text","value":":","position":{"start":{"line":704,"column":94,"offset":25928},"end":{"line":704,"column":95,"offset":25929}}}],"position":{"start":{"line":704,"column":1,"offset":25835},"end":{"line":704,"column":95,"offset":25929}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> a <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":706,"column":1,"offset":25931},"end":{"line":710,"column":4,"offset":26021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards"},"children":[{"type":"text","value":"Read more about User-Defined Type Guards in the Handbook","position":{"start":{"line":712,"column":2,"offset":26024},"end":{"line":712,"column":58,"offset":26080}}}],"position":{"start":{"line":712,"column":1,"offset":26023},"end":{"line":712,"column":150,"offset":26172}}},{"type":"text","value":".","position":{"start":{"line":712,"column":150,"offset":26172},"end":{"line":712,"column":151,"offset":26173}}}],"position":{"start":{"line":712,"column":1,"offset":26023},"end":{"line":712,"column":151,"offset":26173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: One or the Other but not Both","position":{"start":{"line":714,"column":4,"offset":26178},"end":{"line":714,"column":40,"offset":26214}}}],"position":{"start":{"line":714,"column":1,"offset":26175},"end":{"line":714,"column":40,"offset":26214}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":716,"column":1,"offset":26216},"end":{"line":716,"column":9,"offset":26224}}},{"type":"raw","value":"<code class=\"language-text\">in</code>","position":{"start":{"line":716,"column":9,"offset":26224},"end":{"line":716,"column":13,"offset":26228}}},{"type":"text","value":" keyword, function overloading, and union types to make components that take either one or another sets of props, but not both:","position":{"start":{"line":716,"column":13,"offset":26228},"end":{"line":716,"column":140,"offset":26355}}}],"position":{"start":{"line":716,"column":1,"offset":26216},"end":{"line":716,"column":140,"offset":26355}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props1 <span class=\"token operator\">|</span> Props2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// props.bar // error</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// props.foo // error</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> UsageComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">bar</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;MyComponent foo=\"foo\" bar=\"bar\"/> // invalid */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":718,"column":1,"offset":26357},"end":{"line":738,"column":4,"offset":26857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgAUcwBnARjgF44BvOTCBABccFjCjAAdgHM4AXwDcVWvSYRWAJi684AIxRQRYiTPlLK5TAFdJGYBElwAstQDCuSJKSSYACjDMLCJqrBwAPoyBGgCUvBRwcMCYcL4ARAIQqYmOAeossTzxCXAA9CVwuawAdPpQpeVIUDhQRQlEMFZQjgA8ACbAAG4AfDyVLFUZct0l-cPmCXJwSAA2LPSF5MX1FYETgtuNza1w7Z09syNjNQZTM4ND8-IUchRoDmJwAKosKNJI7uAHN4YCJkOgYFUAGKubS+WKcIYpIp9e7HbouAGeYH8QScdKCLIlIZojEeIE+PQGPG1QnEzbFHglABUcHRbjJXgpGTxGSytWpBlSRO2UgGKGWwF6cCZJRe9OmFwo0QUQA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":740,"column":2,"offset":26860},"end":{"line":740,"column":35,"offset":26893}}}],"position":{"start":{"line":740,"column":1,"offset":26859},"end":{"line":740,"column":525,"offset":27383}}}],"position":{"start":{"line":740,"column":1,"offset":26859},"end":{"line":740,"column":525,"offset":27383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Further reading: ","position":{"start":{"line":742,"column":1,"offset":27385},"end":{"line":742,"column":18,"offset":27402}}},{"type":"element","tagName":"a","properties":{"href":"http://www.javiercasas.com/articles/typescript-impossible-states-irrepresentable"},"children":[{"type":"text","value":"how to ban passing ","position":{"start":{"line":742,"column":19,"offset":27403},"end":{"line":742,"column":38,"offset":27422}}},{"type":"raw","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":742,"column":38,"offset":27422},"end":{"line":742,"column":42,"offset":27426}}},{"type":"text","value":" if you have a ","position":{"start":{"line":742,"column":42,"offset":27426},"end":{"line":742,"column":57,"offset":27441}}},{"type":"raw","value":"<code class=\"language-text\">NoFields</code>","position":{"start":{"line":742,"column":57,"offset":27441},"end":{"line":742,"column":67,"offset":27451}}},{"type":"text","value":" type.","position":{"start":{"line":742,"column":67,"offset":27451},"end":{"line":742,"column":73,"offset":27457}}}],"position":{"start":{"line":742,"column":18,"offset":27402},"end":{"line":742,"column":156,"offset":27540}}}],"position":{"start":{"line":742,"column":1,"offset":27385},"end":{"line":742,"column":156,"offset":27540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Must Pass Both","position":{"start":{"line":744,"column":4,"offset":27545},"end":{"line":744,"column":25,"offset":27566}}}],"position":{"start":{"line":744,"column":1,"offset":27542},"end":{"line":744,"column":25,"offset":27566}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OneOrAnother<span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T2</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> OneOrAnother<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n<span class=\"token keyword\">const</span> ab<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></code></pre></div>","position":{"start":{"line":746,"column":1,"offset":27568},"end":{"line":754,"column":4,"offset":27866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks ","position":{"start":{"line":756,"column":1,"offset":27868},"end":{"line":756,"column":8,"offset":27875}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/kentcdodds/status/1085655423611367426"},"children":[{"type":"text","value":"diegohaz","position":{"start":{"line":756,"column":9,"offset":27876},"end":{"line":756,"column":17,"offset":27884}}}],"position":{"start":{"line":756,"column":8,"offset":27875},"end":{"line":756,"column":77,"offset":27944}}}],"position":{"start":{"line":756,"column":1,"offset":27868},"end":{"line":756,"column":77,"offset":27944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Pass One ONLY IF the Other Is Passed","position":{"start":{"line":758,"column":4,"offset":27949},"end":{"line":758,"column":47,"offset":27992}}}],"position":{"start":{"line":758,"column":1,"offset":27946},"end":{"line":758,"column":47,"offset":27992}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you want a Text component that gets truncated if ","position":{"start":{"line":760,"column":1,"offset":27994},"end":{"line":760,"column":54,"offset":28047}}},{"type":"raw","value":"<code class=\"language-text\">truncate</code>","position":{"start":{"line":760,"column":54,"offset":28047},"end":{"line":760,"column":64,"offset":28057}}},{"type":"text","value":" prop is passed but expands to show the full text when ","position":{"start":{"line":760,"column":64,"offset":28057},"end":{"line":760,"column":119,"offset":28112}}},{"type":"raw","value":"<code class=\"language-text\">expanded</code>","position":{"start":{"line":760,"column":119,"offset":28112},"end":{"line":760,"column":129,"offset":28122}}},{"type":"text","value":" prop is passed (e.g. when the user clicks the text).","position":{"start":{"line":760,"column":129,"offset":28122},"end":{"line":760,"column":182,"offset":28175}}}],"position":{"start":{"line":760,"column":1,"offset":27994},"end":{"line":760,"column":182,"offset":28175}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You want to allow ","position":{"start":{"line":762,"column":1,"offset":28177},"end":{"line":762,"column":19,"offset":28195}}},{"type":"raw","value":"<code class=\"language-text\">expanded</code>","position":{"start":{"line":762,"column":19,"offset":28195},"end":{"line":762,"column":29,"offset":28205}}},{"type":"text","value":" to be passed only if ","position":{"start":{"line":762,"column":29,"offset":28205},"end":{"line":762,"column":51,"offset":28227}}},{"type":"raw","value":"<code class=\"language-text\">truncate</code>","position":{"start":{"line":762,"column":51,"offset":28227},"end":{"line":762,"column":61,"offset":28237}}},{"type":"text","value":" is also passed, because there is no use for ","position":{"start":{"line":762,"column":61,"offset":28237},"end":{"line":762,"column":106,"offset":28282}}},{"type":"raw","value":"<code class=\"language-text\">expanded</code>","position":{"start":{"line":762,"column":106,"offset":28282},"end":{"line":762,"column":116,"offset":28292}}},{"type":"text","value":" if the text is not truncated.","position":{"start":{"line":762,"column":116,"offset":28292},"end":{"line":762,"column":146,"offset":28322}}}],"position":{"start":{"line":762,"column":1,"offset":28177},"end":{"line":762,"column":146,"offset":28322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage example:","position":{"start":{"line":764,"column":1,"offset":28324},"end":{"line":764,"column":15,"offset":28338}}}],"position":{"start":{"line":764,"column":1,"offset":28324},"end":{"line":764,"column":15,"offset":28338}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* these all typecheck */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">not truncated</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">truncate</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">truncated</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">truncate</span> <span class=\"token attr-name\">expanded</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            truncate-able but expanded\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* TS error: Property 'truncate' is missing in type '{ children: string; expanded: true; }' but required in type '{ truncate: true; expanded?: boolean | undefined; }'. */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">expanded</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">truncate-able but expanded</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":766,"column":1,"offset":28340},"end":{"line":779,"column":4,"offset":28835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can implement this by function overloads:","position":{"start":{"line":781,"column":1,"offset":28837},"end":{"line":781,"column":46,"offset":28882}}}],"position":{"start":{"line":781,"column":1,"offset":28837},"end":{"line":781,"column":46,"offset":28882}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CommonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n    miscProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NoTruncateProps</span> <span class=\"token operator\">=</span> CommonProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> truncate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TruncateProps</span> <span class=\"token operator\">=</span> CommonProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> truncate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> expanded<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Function overloads to accept both prop types NoTruncateProps &amp; TruncateProps</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> NoTruncateProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> TruncateProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> CommonProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> truncate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> expanded<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> truncate<span class=\"token punctuation\">,</span> expanded<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>otherProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> classNames <span class=\"token operator\">=</span> truncate <span class=\"token operator\">?</span> <span class=\"token string\">'.truncate'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">aria-expanded</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>expanded<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>otherProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":783,"column":1,"offset":28884},"end":{"line":805,"column":4,"offset":29629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Omit prop from a type","position":{"start":{"line":807,"column":4,"offset":29634},"end":{"line":807,"column":32,"offset":29662}}}],"position":{"start":{"line":807,"column":1,"offset":29631},"end":{"line":807,"column":32,"offset":29662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: ","position":{"start":{"line":809,"column":1,"offset":29664},"end":{"line":809,"column":7,"offset":29670}}},{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk"},"children":[{"type":"text","value":"Omit was added as a first class utility in TS 3.5","position":{"start":{"line":809,"column":8,"offset":29671},"end":{"line":809,"column":57,"offset":29720}}}],"position":{"start":{"line":809,"column":7,"offset":29670},"end":{"line":809,"column":130,"offset":29793}}},{"type":"text","value":"! 🎉","position":{"start":{"line":809,"column":130,"offset":29793},"end":{"line":809,"column":134,"offset":29797}}}],"position":{"start":{"line":809,"column":1,"offset":29664},"end":{"line":809,"column":134,"offset":29797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes when intersecting types, we want to define our own version of a prop. For example, I want my component to have a ","position":{"start":{"line":811,"column":1,"offset":29799},"end":{"line":811,"column":124,"offset":29922}}},{"type":"raw","value":"<code class=\"language-text\">label</code>","position":{"start":{"line":811,"column":124,"offset":29922},"end":{"line":811,"column":131,"offset":29929}}},{"type":"text","value":", but the type I am intersecting with also has a ","position":{"start":{"line":811,"column":131,"offset":29929},"end":{"line":811,"column":180,"offset":29978}}},{"type":"raw","value":"<code class=\"language-text\">label</code>","position":{"start":{"line":811,"column":180,"offset":29978},"end":{"line":811,"column":187,"offset":29985}}},{"type":"text","value":" prop. Here's how to extract that out:","position":{"start":{"line":811,"column":187,"offset":29985},"end":{"line":811,"column":225,"offset":30023}}}],"position":{"start":{"line":811,"column":1,"offset":29799},"end":{"line":811,"column":225,"offset":30023}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    label<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will conflict with the InputElement's label</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// this comes inbuilt with TS 3.5</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Checkbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props <span class=\"token operator\">&amp;</span> Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>HTMLProps<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'label'</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> label <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Checkbox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Checkbox-label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":813,"column":1,"offset":30025},"end":{"line":833,"column":4,"offset":30602}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When your component defines multiple props, chances of those conflicts increase. However you can explicitly state that all your fields should be removed from the underlying component using the ","position":{"start":{"line":835,"column":1,"offset":30604},"end":{"line":835,"column":194,"offset":30797}}},{"type":"raw","value":"<code class=\"language-text\">keyof</code>","position":{"start":{"line":835,"column":194,"offset":30797},"end":{"line":835,"column":201,"offset":30804}}},{"type":"text","value":" operator:","position":{"start":{"line":835,"column":201,"offset":30804},"end":{"line":835,"column":211,"offset":30814}}}],"position":{"start":{"line":835,"column":1,"offset":30604},"end":{"line":835,"column":211,"offset":30814}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    label<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// conflicts with the InputElement's label</span>\n    <span class=\"token function-variable function\">onChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// conflicts with InputElement's onChange</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Textbox</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props <span class=\"token operator\">&amp;</span> Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>HTMLProps<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> Props<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// implement Textbox component ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":837,"column":1,"offset":30816},"end":{"line":846,"column":4,"offset":31145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see from the Omit example above, you can write significant logic in your types as well. ","position":{"start":{"line":848,"column":1,"offset":31147},"end":{"line":848,"column":100,"offset":31246}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/pelotom/type-zoo"},"children":[{"type":"text","value":"type-zoo","position":{"start":{"line":848,"column":101,"offset":31247},"end":{"line":848,"column":109,"offset":31255}}}],"position":{"start":{"line":848,"column":100,"offset":31246},"end":{"line":848,"column":147,"offset":31293}}},{"type":"text","value":" is a nice toolkit of operators you may wish to check out (includes Omit), as well as ","position":{"start":{"line":848,"column":147,"offset":31293},"end":{"line":848,"column":233,"offset":31379}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/piotrwitek/utility-types"},"children":[{"type":"text","value":"utility-types","position":{"start":{"line":848,"column":234,"offset":31380},"end":{"line":848,"column":247,"offset":31393}}}],"position":{"start":{"line":848,"column":233,"offset":31379},"end":{"line":848,"column":293,"offset":31439}}},{"type":"text","value":" (especially for those migrating from Flow).","position":{"start":{"line":848,"column":293,"offset":31439},"end":{"line":848,"column":337,"offset":31483}}}],"position":{"start":{"line":848,"column":1,"offset":31147},"end":{"line":848,"column":337,"offset":31483}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Extracting Prop Types of a Component","position":{"start":{"line":850,"column":4,"offset":31488},"end":{"line":850,"column":47,"offset":31531}}}],"position":{"start":{"line":850,"column":1,"offset":31485},"end":{"line":850,"column":47,"offset":31531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you want the prop types of a component, but it isn't exported.","position":{"start":{"line":852,"column":1,"offset":31533},"end":{"line":852,"column":73,"offset":31605}}}],"position":{"start":{"line":852,"column":1,"offset":31533},"end":{"line":852,"column":73,"offset":31605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A simple solution is to use ","position":{"start":{"line":854,"column":1,"offset":31607},"end":{"line":854,"column":29,"offset":31635}}},{"type":"raw","value":"<code class=\"language-text\">React.ComponentProps</code>","position":{"start":{"line":854,"column":29,"offset":31635},"end":{"line":854,"column":51,"offset":31657}}},{"type":"text","value":":","position":{"start":{"line":854,"column":51,"offset":31657},"end":{"line":854,"column":52,"offset":31658}}}],"position":{"start":{"line":854,"column":1,"offset":31607},"end":{"line":854,"column":52,"offset":31658}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// a Modal component defined elsewhere</span>\n<span class=\"token keyword\">const</span> defaultProps<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Modal<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n    visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    onClick<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":856,"column":1,"offset":31660},"end":{"line":863,"column":4,"offset":31839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are advanced edge cases if you want to extract the prop types of a component taking into account internal props, ","position":{"start":{"line":865,"column":1,"offset":31841},"end":{"line":865,"column":120,"offset":31960}}},{"type":"raw","value":"<code class=\"language-text\">propTypes</code>","position":{"start":{"line":865,"column":120,"offset":31960},"end":{"line":865,"column":131,"offset":31971}}},{"type":"text","value":", and ","position":{"start":{"line":865,"column":131,"offset":31971},"end":{"line":865,"column":137,"offset":31977}}},{"type":"raw","value":"<code class=\"language-text\">defaultProps</code>","position":{"start":{"line":865,"column":137,"offset":31977},"end":{"line":865,"column":151,"offset":31991}}},{"type":"text","value":" - ","position":{"start":{"line":865,"column":151,"offset":31991},"end":{"line":865,"column":154,"offset":31994}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/63"},"children":[{"type":"text","value":"check our issue here for helper utilities that resolve these","position":{"start":{"line":865,"column":155,"offset":31995},"end":{"line":865,"column":215,"offset":32055}}}],"position":{"start":{"line":865,"column":154,"offset":31994},"end":{"line":865,"column":275,"offset":32115}}},{"type":"text","value":".","position":{"start":{"line":865,"column":275,"offset":32115},"end":{"line":865,"column":276,"offset":32116}}}],"position":{"start":{"line":865,"column":1,"offset":31841},"end":{"line":865,"column":276,"offset":32116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Render Props","position":{"start":{"line":867,"column":4,"offset":32121},"end":{"line":867,"column":23,"offset":32140}}}],"position":{"start":{"line":867,"column":1,"offset":32118},"end":{"line":867,"column":23,"offset":32140}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advice: Where possible, you should try to use Hooks instead of Render Props. We include this merely for completeness.","position":{"start":{"line":869,"column":3,"offset":32144},"end":{"line":869,"column":120,"offset":32261}}}],"position":{"start":{"line":869,"column":3,"offset":32144},"end":{"line":869,"column":120,"offset":32261}}},{"type":"text","value":"\n"}],"position":{"start":{"line":869,"column":1,"offset":32142},"end":{"line":869,"column":120,"offset":32261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you will want to write a function that can take a React element or a string or something else as a prop. The best Type to use for such a situation is ","position":{"start":{"line":871,"column":1,"offset":32263},"end":{"line":871,"column":161,"offset":32423}}},{"type":"raw","value":"<code class=\"language-text\">React.ReactNode</code>","position":{"start":{"line":871,"column":161,"offset":32423},"end":{"line":871,"column":178,"offset":32440}}},{"type":"text","value":" which fits anywhere a normal, well, React Node would fit:","position":{"start":{"line":871,"column":178,"offset":32440},"end":{"line":871,"column":236,"offset":32498}}}],"position":{"start":{"line":871,"column":1,"offset":32263},"end":{"line":871,"column":236,"offset":32498}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    label<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n    children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Card</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>label <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":873,"column":1,"offset":32500},"end":{"line":886,"column":4,"offset":32772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are using a function-as-a-child render prop:","position":{"start":{"line":888,"column":1,"offset":32774},"end":{"line":888,"column":52,"offset":32825}}}],"position":{"start":{"line":888,"column":1,"offset":32774},"end":{"line":888,"column":52,"offset":32825}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":890,"column":1,"offset":32827},"end":{"line":894,"column":4,"offset":32912}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose"},"children":[{"type":"text","value":"Something to add? File an issue","position":{"start":{"line":896,"column":2,"offset":32915},"end":{"line":896,"column":33,"offset":32946}}}],"position":{"start":{"line":896,"column":1,"offset":32914},"end":{"line":896,"column":123,"offset":33036}}},{"type":"text","value":".","position":{"start":{"line":896,"column":123,"offset":33036},"end":{"line":896,"column":124,"offset":33037}}}],"position":{"start":{"line":896,"column":1,"offset":32914},"end":{"line":896,"column":124,"offset":33037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling Exceptions","position":{"start":{"line":898,"column":4,"offset":33042},"end":{"line":898,"column":23,"offset":33061}}}],"position":{"start":{"line":898,"column":1,"offset":33039},"end":{"line":898,"column":23,"offset":33061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can provide good information when bad things happen.","position":{"start":{"line":900,"column":1,"offset":33063},"end":{"line":900,"column":57,"offset":33119}}}],"position":{"start":{"line":900,"column":1,"offset":33063},"end":{"line":900,"column":57,"offset":33119}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InvalidDateFormatError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RangeError</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DateIsInFutureError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RangeError</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * // optional docblock\n * @throws {InvalidDateFormatError} The user entered date incorrectly\n * @throws {DateIsInFutureError} The user entered date in future\n *\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidDateFormatError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not a valid date format'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInFuture</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateIsInFutureError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date is in the future'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call parse(date) somewhere</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InvalidDateFormatError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invalid date format'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DateIsInFutureError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date is in future'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":902,"column":1,"offset":33121},"end":{"line":929,"column":4,"offset":33897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BJAOwDcVrgATAERRhIAYtBACAolBxQ4SAB6CW3RghQsA5kknS4AbwC+VWgzj9BTOqyEBXGNaLboshUiUq1mxzIMUKmaywYwBAscMB0AGqcPAAU3AJIAFxwdDBQwBoAlHoUcHBEdlCh8YJwAPxwadZIcMmYnHRIANwUhpTk-oEwwaHhVrb2SHEJyanpWTnkeWghqXAlSAByEADucAC8cCxIa2ZDmS1TcDMsc2j2RCwwextbO6YJw4KZuXCvBfah51Ku1wkAdJoYAAVUD7OAAPnmCWWK0BSBBYJiB1avnIAHoAFSY3KYuDo9FwCBgbohTjzCBoABG1EpAGtcXAAAIwAAWOBWjF0rA4XD4CREUDEMC8+jgwNZNWsjRkvyQRG40NKGRmPww1AAnoyWezVly9hZ+oUtFJoGKJVKZbIrvKkIqFmFQv5jbjcei-AEgiE4GAUFBGk8kik0hl1NldK9gJg4DEAIThKJ8wOZF5HPJsjl3NY86L8wSC4VeGIAIhYEHgKDgvJ4SpqmFEAmLKKOUZjfRYNmNyeyGdWWYe5ksHYGDlNUBLDvCjsqkrgzsGTcOeQJcH+a9R7TSGsmy8JaE41B9foDC2ydFwO0lRFaxwEaFZMaQ4cj0ZiNQyqTUaCQEGjOb5ewFhIY7PmmxyzBA1BIP88rSCWGTVvaCRzg2MDFgANLIzZ5GKSDUI0YSvu+pwwF+P7RgaQ6doMXigXk0wQVB-wrH6LATshU4ZHOI5IBhWFLnAuH4TUEZgb2azNK8bT6EAA"},"children":[{"type":"text","value":"View in TypeScript Playground","position":{"start":{"line":931,"column":2,"offset":33900},"end":{"line":931,"column":31,"offset":33929}}}],"position":{"start":{"line":931,"column":1,"offset":33899},"end":{"line":931,"column":904,"offset":34802}}}],"position":{"start":{"line":931,"column":1,"offset":33899},"end":{"line":931,"column":904,"offset":34802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Simply throwing an exception is fine, however it would be nice to make TypeScript remind the consumer of your code to handle your exception. We can do that just by returning instead of throwing:","position":{"start":{"line":933,"column":1,"offset":34804},"end":{"line":933,"column":195,"offset":34998}}}],"position":{"start":{"line":933,"column":1,"offset":34804},"end":{"line":933,"column":195,"offset":34998}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">|</span> InvalidDateFormatError <span class=\"token operator\">|</span> DateIsInFutureError <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidDateFormatError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not a valid date format'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInFuture</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateIsInFutureError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date is in the future'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// now consumer *has* to handle the errors</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mydate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InvalidDateFormatError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invalid date format'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DateIsInFutureError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date is in future'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// use result safely</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// alternately you can just handle all errors</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// use result safely</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":935,"column":1,"offset":35000},"end":{"line":958,"column":4,"offset":35750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also describe exceptions with special-purpose data types (don't say monads...) like the ","position":{"start":{"line":960,"column":1,"offset":35752},"end":{"line":960,"column":97,"offset":35848}}},{"type":"raw","value":"<code class=\"language-text\">Try</code>","position":{"start":{"line":960,"column":97,"offset":35848},"end":{"line":960,"column":102,"offset":35853}}},{"type":"text","value":", ","position":{"start":{"line":960,"column":102,"offset":35853},"end":{"line":960,"column":104,"offset":35855}}},{"type":"raw","value":"<code class=\"language-text\">Option</code>","position":{"start":{"line":960,"column":104,"offset":35855},"end":{"line":960,"column":112,"offset":35863}}},{"type":"text","value":" (or ","position":{"start":{"line":960,"column":112,"offset":35863},"end":{"line":960,"column":117,"offset":35868}}},{"type":"raw","value":"<code class=\"language-text\">Maybe</code>","position":{"start":{"line":960,"column":117,"offset":35868},"end":{"line":960,"column":124,"offset":35875}}},{"type":"text","value":"), and ","position":{"start":{"line":960,"column":124,"offset":35875},"end":{"line":960,"column":131,"offset":35882}}},{"type":"raw","value":"<code class=\"language-text\">Either</code>","position":{"start":{"line":960,"column":131,"offset":35882},"end":{"line":960,"column":139,"offset":35890}}},{"type":"text","value":" data types:","position":{"start":{"line":960,"column":139,"offset":35890},"end":{"line":960,"column":151,"offset":35902}}}],"position":{"start":{"line":960,"column":1,"offset":35752},"end":{"line":960,"column":151,"offset":35902}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> None<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> None<span class=\"token punctuation\">;</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FormikOption<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getOrElse</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Some<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> None<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> None<span class=\"token punctuation\">;</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Some<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Some<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getOrElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">None</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Option<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">flatMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> None <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token generic-function\"><span class=\"token function\">getOrElse</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// now you can use it like:</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Option</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Some&lt;number></span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Option</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Some&lt;number></span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// None</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getOrElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or:</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Option&lt;string></span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Option&lt;Date></span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Option&lt;string></span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getOrElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error parsing string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":962,"column":1,"offset":35904},"end":{"line":999,"column":4,"offset":36904}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1000,"column":1,"offset":36905}}}}