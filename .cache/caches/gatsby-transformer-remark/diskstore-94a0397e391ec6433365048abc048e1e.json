{"expireTime":9007200911870455000,"key":"transformer-remark-markdown-html-3120ff3c600280fcbf629085e604a2ff-gatsby-remark-prismjs-","val":"<h1>folders</h1>\n<p><img src=\"https://pbs.twimg.com/profile_images/1285630920263966721/Uk6O1QGC_400x400.jpg\" alt=\"npm\"></p>\n<hr>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#tldr\"></a>tl;dr</h4>\n<ul>\n<li>Local install (default): puts stuff in <code class=\"language-text\">./node_modules</code> of the current package root.</li>\n<li>Global install (with <code class=\"language-text\">-g</code>): puts stuff in /usr/local or wherever node is installed.</li>\n<li>Install it <strong>locally</strong> if you're going to <code class=\"language-text\">require()</code> it.</li>\n<li>Install it <strong>globally</strong> if you're going to run it on the command line.</li>\n<li>If you need both, then install it in both places, or use <code class=\"language-text\">npm link</code>.</li>\n</ul>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#prefix-configuration\"></a>prefix Configuration</h4>\n<p>The <code class=\"language-text\">prefix</code> config defaults to the location where node is installed. On most systems, this is <code class=\"language-text\">/usr/local</code>. On Windows, it's <code class=\"language-text\">%AppData%\\npm</code>. On Unix systems, it's one level up, since node is typically installed at <code class=\"language-text\">{prefix}/bin/node</code> rather than <code class=\"language-text\">{prefix}/node.exe</code>.</p>\n<p>When the <code class=\"language-text\">global</code> flag is set, npm installs things into this prefix. When it is not set, it uses the root of the current package, or the current working directory if not in a package already.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#node-modules\"></a>Node Modules</h4>\n<p>Packages are dropped into the <code class=\"language-text\">node_modules</code> folder under the <code class=\"language-text\">prefix</code>. When installing locally, this means that you can <code class=\"language-text\">require(\"packagename\")</code> to load its main module, or <code class=\"language-text\">require(\"packagename/lib/path/to/sub/module\")</code> to load other modules.</p>\n<p>Global installs on Unix systems go to <code class=\"language-text\">{prefix}/lib/node_modules</code>. Global installs on Windows go to <code class=\"language-text\">{prefix}/node_modules</code> (that is, no <code class=\"language-text\">lib</code> folder.)</p>\n<p>Scoped packages are installed the same way, except they are grouped together in a sub-folder of the relevant <code class=\"language-text\">node_modules</code> folder with the name of that scope prefix by the @ symbol, e.g. <code class=\"language-text\">npm install @myorg/package</code> would place the package in <code class=\"language-text\">{prefix}/node_modules/@myorg/package</code>. See <a href=\"https://docs.npmjs.com/cli/v6/using-npm/scope\"><code class=\"language-text\">scope</code></a> for more details.</p>\n<p>If you wish to <code class=\"language-text\">require()</code> a package, then install it locally.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#executables\"></a>Executables</h4>\n<p>When in global mode, executables are linked into <code class=\"language-text\">{prefix}/bin</code> on Unix, or directly into <code class=\"language-text\">{prefix}</code> on Windows.</p>\n<p>When in local mode, executables are linked into <code class=\"language-text\">./node_modules/.bin</code> so that they can be made available to scripts run through npm. (For example, so that a test runner will be in the path when you run <code class=\"language-text\">npm test</code>.)</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#man-pages\"></a>Man Pages</h4>\n<p>When in global mode, man pages are linked into <code class=\"language-text\">{prefix}/share/man</code>.</p>\n<p>When in local mode, man pages are not installed.</p>\n<p>Man pages are not installed on Windows systems.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#cache\"></a>Cache</h4>\n<p>See <a href=\"https://docs.npmjs.com/cli/v6/commands/npm-cache\"><code class=\"language-text\">npm cache</code></a>. Cache files are stored in <code class=\"language-text\">~/.npm</code> on Posix, or <code class=\"language-text\">%AppData%/npm-cache</code> on Windows.</p>\n<p>This is controlled by the <code class=\"language-text\">cache</code> configuration param.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#temp-files\"></a>Temp Files</h4>\n<p>Temporary files are stored by default in the folder specified by the <code class=\"language-text\">tmp</code> config, which defaults to the TMPDIR, TMP, or TEMP environment variables, or <code class=\"language-text\">/tmp</code> on Unix and <code class=\"language-text\">c:\\windows\\temp</code> on Windows.</p>\n<p>Temp files are given a unique folder under this root for each run of the program, and are deleted upon successful exit.</p>\n<h3><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#more-information\"></a>More Information</h3>\n<p>When installing locally, npm first tries to find an appropriate <code class=\"language-text\">prefix</code> folder. This is so that <code class=\"language-text\">npm install foo@1.2.3</code> will install to the sensible root of your package, even if you happen to have <code class=\"language-text\">cd</code>ed into some other folder.</p>\n<p>Starting at the $PWD, npm will walk up the folder tree checking for a folder that contains either a <code class=\"language-text\">package.json</code> file, or a <code class=\"language-text\">node_modules</code> folder. If such a thing is found, then that is treated as the effective \"current directory\" for the purpose of running npm commands. (This behavior is inspired by and similar to git's .git-folder seeking logic when running git commands in a working dir.)</p>\n<p>If no package root is found, then the current folder is used.</p>\n<p>When you run <code class=\"language-text\">npm install foo@1.2.3</code>, then the package is loaded into the cache, and then unpacked into <code class=\"language-text\">./node_modules/foo</code>. Then, any of foo's dependencies are similarly unpacked into <code class=\"language-text\">./node_modules/foo/node_modules/...</code>.</p>\n<p>Any bin files are symlinked to <code class=\"language-text\">./node_modules/.bin/</code>, so that they may be found by npm scripts when necessary.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#global-installation\"></a>Global Installation</h4>\n<p>If the <code class=\"language-text\">global</code> configuration is set to true, then npm will install packages \"globally\".</p>\n<p>For global installation, packages are installed roughly the same way, but using the folders described above.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#cycles-conflicts-and-folder-parsimony\"></a>Cycles, Conflicts, and Folder Parsimony</h4>\n<p>Cycles are handled using the property of node's module system that it walks up the directories looking for <code class=\"language-text\">node_modules</code> folders. So, at every stage, if a package is already installed in an ancestor <code class=\"language-text\">node_modules</code> folder, then it is not installed at the current location.</p>\n<p>Consider the case above, where <code class=\"language-text\">foo -> bar -> baz</code>. Imagine if, in addition to that, baz depended on bar, so you'd have: <code class=\"language-text\">foo -> bar -> baz -> bar -> baz ...</code>. However, since the folder structure is: <code class=\"language-text\">foo/node_modules/bar/node_modules/baz</code>, there's no need to put another copy of bar into <code class=\"language-text\">.../baz/node_modules</code>, since when it calls require(\"bar\"), it will get the copy that is installed in <code class=\"language-text\">foo/node_modules/bar</code>.</p>\n<p>This shortcut is only used if the exact same version would be installed in multiple nested <code class=\"language-text\">node_modules</code> folders. It is still possible to have <code class=\"language-text\">a/node_modules/b/node_modules/a</code> if the two \"a\" packages are different versions. However, without repeating the exact same package multiple times, an infinite regress will always be prevented.</p>\n<p>Another optimization can be made by installing dependencies at the highest level possible, below the localized \"target\" folder.</p>\n<h4><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/folders#example\"></a>Example</h4>\n<p>Consider this dependency graph:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo+-- blerg@1.2.5+-- bar@1.2.3|   +-- blerg@1.x (latest=1.3.7)|   +-- baz@2.x|   |   `-- quux@3.x|   |       `-- bar@1.2.3 (cycle)|   `-- asdf@*`-- baz@1.2.3    `-- quux@3.x        `-- bar</code></pre></div>\n<p>In this case, we might expect a folder structure like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo+-- node_modules    +-- blerg (1.2.5) &lt;---[A]    +-- bar (1.2.3) &lt;---[B]    |   `-- node_modules    |       +-- baz (2.0.2) &lt;---[C]    |       |   `-- node_modules    |       |       `-- quux (3.2.0)    |       `-- asdf (2.3.4)    `-- baz (1.2.3) &lt;---[D]        `-- node_modules            `-- quux (3.2.0) &lt;---[E]</code></pre></div>\n<p>Since foo depends directly on <code class=\"language-text\">bar@1.2.3</code> and <code class=\"language-text\">baz@1.2.3</code>, those are installed in foo's <code class=\"language-text\">node_modules</code> folder.</p>\n<p>Even though the latest copy of blerg is 1.3.7, foo has a specific dependency on version 1.2.5. So, that gets installed at [A]. Since the parent installation of blerg satisfies bar's dependency on <code class=\"language-text\">blerg@1.x</code>, it does not install another copy under [B].</p>\n<p>Bar [B] also has dependencies on baz and asdf, so those are installed in bar's <code class=\"language-text\">node_modules</code> folder. Because it depends on <code class=\"language-text\">baz@2.x</code>, it cannot re-use the <code class=\"language-text\">baz@1.2.3</code> installed in the parent <code class=\"language-text\">node_modules</code> folder [D], and must install its own copy [C].</p>\n<p>Underneath bar, the <code class=\"language-text\">baz -> quux -> bar</code> dependency creates a cycle. However, because bar is already in quux's ancestry [B], it does not unpack another copy of bar into that folder.</p>\n<p>Underneath <code class=\"language-text\">foo -> baz</code> [D], quux's [E] folder tree is empty, because its dependency on bar is satisfied by the parent folder copy installed at [B].</p>\n<p>For a graphical breakdown of what is installed where, use <code class=\"language-text\">npm ls</code>.</p>"}